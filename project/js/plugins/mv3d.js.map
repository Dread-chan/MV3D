{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/mv3d.js","webpack:///./src/util.js","webpack:///./src/shaders.js","webpack:///./src/mod_babylon.js","webpack:///./src/features.js","webpack:///external \"fs\"","webpack:///external \"path\"","webpack:///./src/plugin_support/plugin_support.js","webpack:///./src/plugin_support/options/options_main.js","webpack:///./src/plugin_support/options/options_enabled.js","webpack:///./src/plugin_support/movement/movement_main.js","webpack:///./src/plugin_support/movement/movement_Q.js","webpack:///./src/plugin_support/movement/movement_Altimit.js","webpack:///./src/plugin_support/movement/movement_vanilla.js","webpack:///./src/mod_mv.js","webpack:///./src/attributes.js","webpack:///./src/parameters.js","webpack:///./src/blenders.js","webpack:///./src/blendModes.js","webpack:///./src/input.js","webpack:///./src/input_directions.js","webpack:///./src/configuration.js","webpack:///./src/plugin_commands.js","webpack:///./src/MapCellBuilder.js","webpack:///./src/mapCell.js","webpack:///./src/tileData.js","webpack:///./src/loadMap.js","webpack:///./src/assets.js","webpack:///./src/characters.js","webpack:///./src/animations.js","webpack:///./src/parallax.js","webpack:///./src/data.js","webpack:///./src/index.js"],"names":[],"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AA;AAA0B;;AAE1B,OAAO,8BAA8B;;AAE9B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA,iBAAiB;AACjB;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;;;AAGO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP,YAAY,iBAAiB;AAC7B;AACA,cAAc;AACd;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA,EAAE;AACF;AACA;AACA;;AAEO;AACP,eAAe;AACf;AACA;AACO;AACP;AACA;AACO;AACP,QAAQ,cAAc;AACtB,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,qDAAI;AAC9B,0BAA0B,iBAAiB;AAC3C,gCAAgC,aAAa;AAC7C,4BAA4B,mBAAmB;AAC/C,mCAAmC,oBAAoB;AACvD,WAAW,OAAO,GAAG,KAAK;AAC1B;;AAEA;;AAEO;AACA;AACA;;AAEP;AACO;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEP;;AAEO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG,KAAK,kDAAkD;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,qDAAI;AACpC;AACP;AACA;AACA;AACA,6DAA6D,wCAAwC;AACrG;AACA;AACA,yCAAyC,SAAS,WAAW,iBAAiB;AAC9E,yCAAyC,SAAS,WAAW,QAAQ;AACrE,+BAA+B;AAC/B;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA,GAAG,gCAAgC,qDAAI;AACvC;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,6DAAI,E;;;;;;;;;;;;;;;;ACvKZ;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAyC,kBAAkB;AAC3D;AACA;AACA;AACA;A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qDAAI,0BAA0B,cAAc;AACpD,QAAQ,qDAAI,0BAA0B,cAAc;AACpD,QAAQ,qDAAI,0BAA0B,cAAc;AACpD;AACA,oBAAoB,qDAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,8DAAQ;AACR;AACA;AACA;AACA;AACA,GAAG;AACH,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,CAAC;;AAED,8DAAQ;AACR;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;;AAED;AACA,0CAA0C,aAAa;AACvD,qBAAqB;AACrB;AACA;AACA;AACA,sCAAsC,qDAAI,2BAA2B,qDAAI;AACzE;AACA;AACA;AACA;;AAEA,8DAAQ;AACR;AACA;AACA;AACA,6CAA6C,cAAc;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,cAAc;AACpC;AACA;AACA;AACA,uBAAuB,qDAAI,+CAA+C,qDAAI;AAC9E,gDAAgD,cAAc;AAC9D;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,EAAE;AACF,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA;AACA,qBAAqB,qDAAI,+CAA+C,qDAAI;AAC5E;AACA,OAAO,qDAAI,2BAA2B,qDAAI,oBAAoB,aAAa;AAC3E;AACA,kCAAkC,2CAA2C;AAC7E;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iDAAiD,oBAAoB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAI,oCAAoC,UAAU;AAC1D;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA,YAAY,qDAAI;AAChB,MAAM,6DAAO,mEAAmE,qDAAI;AACpF;AACA;;AAEA;AACA;AACA,aAAa,yBAAyB;AACtC;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD;AACA;AACA;AACA,uBAAuB,4BAA4B;AACnD,yBAAyB,aAAa;AACtC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,8DAAQ;AACR;AACA,kCAAkC,aAAa,aAAa;AAC5D;AACA;AACA,eAAe,aAAa;AAC5B,uCAAuC,cAAc;AACrD,WAAW,mBAAmB;AAC9B;AACA,EAAE;AACF,CAAC;;AAED,8DAAQ;AACR;AACA;AACA;AACA,CAAC;;AAED,qDAAI,uFAAuF;AAC3F;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE,qDAAI;AACN,EAAE,qDAAI;AACN,EAAE,qDAAI;AACN,EAAE,qDAAI;AACN;AACA;AACA;;AAEA,qDAAI;AACJ;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,aAAa,WAAW;AACxB;AACA,0DAA0D,cAAc;AACxE;AACA,EAAE;AACF;;AAEA,qDAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,qDAAI;AACT;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA,8DAAQ;AACR,8DAAQ;AACR,8DAAQ;;AAER;AACA,kBAAkB,8DAAQ,CAAC,qDAAI,kCAAkC,qDAAI;AACrE;AACA;;AAEA,8DAAQ;AACR;AACA,WAAW,qDAAI,UAAU,8DAAQ;AACjC;AACA,CAAC;;AAED,8DAAQ;AACR;AACA,WAAW,6DAAO;AAClB;AACA,CAAC;;AAED;AACA,8DAAQ;AACR;AACA;AACA,WAAW,QAAQ;AACnB;AACA,CAAC,E;;;;;;;ACnWD;AAAA;AAA+E;;AAE/E,8DAAQ;AACR;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;AAEA,8DAAQ;AACR;AACA;AACA,cAAc,8DAAQ;AACtB,KAAK,yDAAG,YAAY,yDAAG;AACvB,MAAM,yDAAG,YAAY,yDAAG;AACxB;AACA;AACA;AACA,gC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED,8DAAQ;AACR,sCAAsC,gEAAU;AAChD,CAAC;;AAED,8DAAQ;AACR;AACA;AACA,aAAa,QAAQ;;AAErB;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,SAAS;AAC3B,kBAAkB,SAAS;AAC3B;AACA,uBAAuB;AACvB;AACA;AACA;AACA,mCAAmC,WAAW,GAAG,UAAU;AAC3D;AACA;AACA;AACA;AACA,iCAAiC,UAAU;AAC3C;;AAEA;AACA;AACA,8GAA8G,eAAe;AAC7H,GAAG;AACH,sBAAsB,eAAe;AACrC,qDAAqD,eAAe;AACpE;AACA;AACA,OAAO,6DAAO;AACd;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB;AACA;AACA,CAAC;;AAED,8DAAQ;AACR,6BAA6B,WAAW,gCAAgC;AACxE;AACA;AACA,qCAAqC,WAAW,aAAa;AAC7D;AACA;AACA,EAAE;AACF;AACA,CAAC;;AAED,2FAA2F;AAC3F;AACA;AACA,oBAAoB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA,4BAA4B,cAAc;AAC1C,SAAS,UAAU;AACnB,SAAS,sBAAsB;AAC/B;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA,0GAA0G,aAA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AAEF;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,wBAAwB,0CAAmB;AAC3C;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,qDAAqD,gCAAQ;AAC7D;AACA;AACA,EAAE;AACF,CAAC;;;AClO4B;AACY;AACwC;;AAEjF;AACA,gFAAgF,cAAc;AAC9F;AACA;;AAEA,cAAc,uBAAI;;AAElB;AACA;AACA;AACA,EAAE;AACF;AACA,YAAY,6BAA6B,QAAQ;AACjD;AACA,kCAAkC,6BAA6B;AAC/D;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,0BAA0B,gBAAO;AACjC,yBAAyB,gBAAO;AAChC,6BAA6B,gBAAO;AACpC;AACA,4BAA4B,gBAAO;AACnC;AACA,8BAA8B,gBAAO;AACrC;AACA;AACA,6BAA6B,gBAAO;AACpC,6BAA6B,gBAAO;AACpC;AACA,+BAA+B,gBAAO;AACtC;AACA,uBAAuB,gBAAO;AAC9B,uBAAuB,gBAAO;AAC9B,mCAAmC,gBAAO;AAC1C,kCAAkC,gBAAO,mBAAmB,uBAAI;AAChE,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,6BAA6B;AACrF;AACA,wDAAwD,6BAA6B;AACrF;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA,uDAAuD,4BAA4B;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,uBAAI;AACR;AACA;AACA;AACA;AACA;AACA,MAAM,uBAAI;AACV;AACA,OAAO,uBAAI;AACX,+BAA+B,qBAAK,OAAO,iCAAU;AACrD,kBAAkB,uBAAI;AACtB;AACA,eAAe,uBAAI;AACnB,kBAAkB;AAClB;AACA;AACA;AACA,+BAA+B,8BAAO;AACtC;AACA,qBAAqB,0BAAG,gBAAgB,8BAAO,sBAAsB,uBAAI,6BAA6B,uBAAI,mBAAmB,uBAAI;AACjI,2BAA2B,uBAAI;AAC/B;AACA,4BAA4B,UAAU;AACtC,sDAAsD,eAAe,UAAU;AAC/E;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,6BAA6B,qBAAK,OAAO,iCAAU;AACnD,yBAAyB,0CAAmB;AAC5C;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,4BAA4B,qBAAqB;AACjD;AACA;AACA,6BAA6B,qBAAK,wBAAwB,iCAAU;AACpE;AACA;AACA;;AAEA;AACA;AACA,MAAM,uBAAI;AACV;AACA;AACA,IAAI;AACJ,iCAAiC,uBAAI;AACrC,+BAA+B,uBAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,uBAAI;AACP,GAAG,uBAAI;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG,uBAAI;AACP,GAAG,uBAAI;AACP,GAAG,uBAAI;AACP;;AAEA;AACA,EAAE;;AAEF;AACA,8BAA8B,uBAAI;AAClC,MAAM,uBAAI;AACV,IAAI,uBAAI,yBAAyB,uBAAI;AACrC,IAAI;AACJ,IAAI,uBAAI;AACR;AACA,GAAG;AACH,GAAG,uBAAI,yBAAyB,uBAAI;AACpC;AACA,EAAE;;AAEF,CAAC;;AAED;AACA;AACA;AACA,CAAC,uBAAI;AACL;;;AAGO,MAAM,gBAAO;AACpB;AACA;AACA,cAAc,uBAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,gBAAO;AACV;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mBAAmB,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC,eAAe,iCAAiC;AAChD,gBAAgB,oBAAoB;AACpC;AACA;AACA,0B;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gBAAO;AAC/B;AACA;AACA;AACA;AACA,gBAAO;;AAEA;AACP;AACA;AACA,aAAa,gBAAO,IAAI,IAAI;AAC5B,aAAa,gBAAO,IAAI,IAAI;AAC5B,aAAa,gBAAO,IAAI,IAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,oBAAoB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAI,SAAS,gBAAO;AACpB,uBAAI,2B;;ACzUyB;;AAE7B,uBAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,E;;;;;ACZ6B;AACQ;AACG;;;AAGxC,cAAc,uBAAI;AAClB;AACA,EAAE,uBAAI;AACN,EAAE;;AAEF;AACA,uDAAuD,QAAQ;AAC/D;AACA,oCAAoC,uBAAI;AACxC,iBAAiB,uBAAI,8BAA8B,uBAAI;AACvD,MAAM,uBAAI;AACV;AACA,qBAAqB,uBAAI,kBAAkB,uBAAI;AAC/C;AACA,oEAAoE,uBAAI;AACxE,KAAK;AACL,oEAAoE,uBAAI;AACxE;AACA,IAAI;AACJ,sBAAsB,uBAAI;AAC1B;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iCAAiC,uBAAI;AACrC,qBAAqB,uBAAI;AACzB;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA,EAAE;;AAEF;AACA,KAAK,uBAAI;AACT,UAAU,uBAAI;AACd;AACA;AACA;AACA;AACA,GAAG;AACH,UAAU,uBAAI;AACd;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA,KAAK,uBAAI;AACT,UAAU,uBAAI;AACd;AACA;AACA;AACA;AACA,GAAG;AACH,UAAU,uBAAI;AACd;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,CAAC;;AAED,gCAAQ;AACR,KAAK,uBAAI,oBAAoB,uBAAI,gBAAgB,UAAU;AAC3D,eAAe,uBAAI,gCAAgC,uBAAI;;AAEvD;AACA,+BAA+B,KAAK;AACpC,gCAAgC,KAAK;AACrC;AACA,CAAC;;AAED,uBAAI;AACJ,KAAK,uBAAI,OAAO,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD,mDAAmD,iBAAiB;AACpE,MAAM,uBAAI,eAAe,eAAe;AACxC,MAAM,uBAAI,gBAAgB,eAAe;AACzC;AACA,GAAG;AACH,SAAS,iBAAiB,EAAE;AAC5B;AACA;;AAEA;AACA;AACA,KAAK,uBAAI,e;AACT,KAAK,uBAAI,aAAa,uBAAI,WAAW,mBAAmB;AACxD;AACA;AACA,QAAQ,uBAAI;AACZ;;AAEA,uBAAI;AACJ,WAAW,uBAAI;AACf,QAAQ,uBAAI,wBAAwB,uBAAI;AACxC;;AAEA,MAAM,sBAAgB;AACtB,8DAA8D,cAAc;AAC5E;AACA,yDAAyD,cAAc;AACvE;AACA;AACA;;AAEA;AACA;AACA,KAAK,uBAAI,eAAe,iDAAiD;AACzE;AACA;AACA;;AAEA,yBAAyB,uBAAI,yBAAyB,uBAAI,wBAAwB,uBAAI,WAAW,sBAAgB;AACjH;AACA,KAAK,uBAAI;AACT;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA,uBAAI;AACJ,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,CAAC,uBAAI;AACL;;AAEA,uBAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA,IAAI,uBAAI,eAAe,YAAY;AACnC,IAAI,uBAAI;AACR,YAAY,uBAAI;;AAEhB,EAAE,uBAAI;AACN;AACA;AACA;;;;;;;;AC9L6B;AACQ;;;AAGrC,cAAc,uBAAI;;AAElB;AACA,0BAA0B,uBAAI;AAC9B;AACA,EAAE;;AAEF,cAAc,uBAAI;AAClB;AACA;AACA,eAAe,UAAU,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF,oEAAoE,uBAAI;AACxE,SAAS,uBAAI,UAAU,uBAAI;AAC3B,EAAE;;AAEF;AACA,SAAS,uBAAI,UAAU,uBAAI;AAC3B,EAAE;;AAEF;AACA,OAAO,uBAAI;AACX,GAAG,uBAAI;AACP;AACA,EAAE;AACF,CAAC;;AAED;AACA,gCAAQ;AACR;AACA;AACA,EAAE,uBAAI;AACN;AACA;AACA,CAAC;;AAED,gCAAQ;AACR;AACA,CAAC,uBAAI;AACL,CAAC;;AAED,gCAAQ;AACR,IAAI,uBAAI;AACR,SAAS,uBAAI,UAAU,uBAAI;AAC3B,EAAE;AACF;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC,iBAAiB,uBAAI,UAAU,uBAAI;AACnC,IAAI,uBAAI;AACR;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAQ;AACR;AACA;AACA,CAAC;;AAED,gCAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,uBAAI;AACjB,GAAG,uBAAI;AACP;AACA,CAAC,MAAM,uBAAI,eAAe,uBAAI;;;;ACzHD;AAC+D;AACsB;AAC1E;;AAExC;AACA;AACA;AACA;AACA,cAAc,qBAAqB;AACnC;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC,kBAAkB,MAAM;AACxB;AACA;AACA;AACA,wBAAwB,KAAK;AAC7B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,6BAA6B,uBAAuB,oBAAoB,2BAA2B;AACnG;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA,6BAA6B,OAAO;AACpC,6CAA6C,KAAK;AAClD;AACA;AACA;AACA;AACA,uBAAI;;AAEJ;AACA,kCAAkC,YAAY;AAC9C;AACA;AACA;AACA,WAAW,KAAK,QAAQ,uBAAI;AAC5B,WAAW,KAAK;AAChB,GAAG;AACH;AACA,WAAW,KAAK,QAAQ,uBAAI;AAC5B,GAAG;AACH;AACA,WAAW,KAAK,gBAAgB,8BAAO;AACvC;AACA;AACA,WAAW,KAAK,aAAa;AAC7B;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA,YAAY,KAAK,UAAU,iCAAS;AACpC,IAAI;AACJ,YAAY,KAAK,cAAc,6BAAM;AACrC;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oBAAoB;AAC7C;AACA,EAAE;AACF;AACA,oBAAoB,uBAAuB;AAC3C,EAAE;AACF;AACA;AACA;AACA;AACA,WAAW,KAAK,QAAQ,uBAAI;AAC5B,WAAW,KAAK;AAChB;AACA;AACA,EAAE;AACF;AACA,WAAW,KAAK,gBAAgB,8BAAO;AACvC;AACA;AACA;AACA,WAAW,KAAK,QAAQ,uBAAI;AAC5B;AACA;AACA;AACA;;AAEA,SAAS,KAAK,cAAc;;AAE5B;;AAEA;AACA;AACA,mBAAmB,+BAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B,wBAAwB,SAAS,gCAAQ,GAAG,UAAU;AACtD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,+BAAiB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA,2BAA2B,iBAAiB,gCAAQ,GAAG;AACvD,oBAAoB,gCAAQ;AAC5B;AACA;AACA;AACA,wBAAwB,gCAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gCAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,uBAAI;AAClB,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD,wBAAwB,4BAA4B;AACpD,mBAAmB,SAAS,GAAG,GAAG,GAAG,GAAG;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;AACF,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,KAAK,uBAAI;AACT;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,sBAAsB,0CAA0C;AAChE,qBAAqB,wCAAwC;AAC7D,oBAAoB,sCAAsC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA,2BAA2B,qCAAqC;AAChE;AACA;AACA;AACA,EAAE;;AAEF;AACA,EAAE,gBAAO;;AAET,EAAE,uBAAI;;AAEN;AACA,EAAE;;;AAGF;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA,oCAAoC,IAAI,iBAAiB,IAAI;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA,kCAAkC,IAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF,6CAA6C,uBAAI,sCAAsC;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,yCAAyC,eAAe;AACxD;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,0BAA0B,uBAAuB,EAAE;AACnD,2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H;AACA,UAAU,eAAe;AACzB,iBAAiB,aAAa;AAC9B,aAAa,gBAAgB,iCAAS,mBAAmB;AACzD,YAAY,4BAA4B;AACxC,WAAW,0BAA0B;AACrC,GAAG;AACH;AACA,UAAU,2BAA2B;AACrC,WAAW,4BAA4B;AACvC,aAAa;AACb,YAAY,8BAA8B;AAC1C,cAAc,kCAAkC;AAChD,YAAY,sBAAsB;AAClC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,8BAA8B,qCAAa;AAC3C;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qCAAa;AAC5B;AACA,GAAG;AACH;AACA,iBAAiB,qCAAa;AAC9B,GAAG;AACH;AACA,kBAAkB,qCAAa;AAC/B,GAAG;AACH,EAAE;;AAEF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,uBAAI;AACL,EAAE,uBAAI;AACN,EAAE,uBAAI;AACN;AACA;AACA;AACA;AACA,GAAG,sCAAc;AACjB,GAAG,sCAAc;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,6BAAK;AACZ,IAAI,uBAAI;AACR,EAAE,uBAAI;AACN;AACA,E;;AC1oB6B;AAC+C;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,uBAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uBAAI;AACJ;AACA;AACA;AACA,KAAK,uBAAI,eAAe,QAAQ;AAChC;AACA,cAAc,WAAW;AACzB;AACA,wCAAwC,qCAAa,SAAS;AAC9D,uDAAuD;AACvD;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,mCAAmC,KAAK;AACxC;AACA,uBAAuB,uBAAI;AAC3B;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,4CAA4C;AAC5C,4CAA4C;AAC5C;AACA,4CAA4C;AAC5C,4CAA4C;AAC5C,4CAA4C;AAC5C,2CAA2C;AAC3C,mDAAmD;AACnD,8CAA8C;AAC9C;AACA;AACA;AACA,uBAAuB,uBAAI;AAC3B,OAAO,uBAAI,kBAAkB,CAAC,uBAAI,iBAAiB;AACnD;AACA,mBAAmB,sBAAsB,uBAAI,4BAA4B;AACzE,kBAAkB,sBAAsB,uBAAI,2BAA2B;AACvE,gBAAgB,sBAAsB,uBAAI,yBAAyB;AACnE,gBAAgB,sBAAsB,uBAAI,yBAAyB;AACnE,kBAAkB,sBAAsB,uBAAI,2BAA2B;AACvE;AACA,EAAE,uBAAI;AACN;AACA;AACA;AACA;AACA,uBAAuB,uBAAI;AAC3B,uBAAuB,uBAAI;AAC3B;;AAEA,oBAAoB,2BAA2B;AAC/C,iBAAiB,wBAAwB;;AAEzC,kBAAkB,CAAC,uBAAI,0BAA0B,qCAAa,KAAK;AACnE,eAAe,CAAC,uBAAI,uBAAuB,qCAAa,KAAK;AAC7D,eAAe,CAAC,uBAAI,yBAAyB,qCAAa,KAAK;;AAE/D;AACA;AACA,iBAAiB,QAAQ,GAAG,KAAK;AACjC,mBAAmB,OAAO,qCAAa,QAAQ;AAC/C,OAAO,OAAO,sCAAc,CAAC,uBAAI,wBAAwB;AACzD,EAAE,uBAAI;AACN;AACA,WAAW,2BAA2B;AACtC,WAAW,2BAA2B;AACtC,cAAc,8BAA8B;AAC5C,kBAAkB,CAAC,uBAAI,iBAAiB;AACxC;AACA;AACA;AACA,2CAA2C;AAC3C,yCAAyC;AACzC,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,CAAC,uBAAI,wBAAwB,iCAAS,yBAAyB;AACtF,kBAAkB,sBAAsB,uBAAI,sBAAsB;AAClE,iBAAiB,sBAAsB,uBAAI,qBAAqB;AAChE,eAAe,mBAAmB;AAClC;AACA;AACA;AACA,qDAAqD;AACrD,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA,2BAA2B,CAAC,uBAAI,4BAA4B,iCAAS,yBAAyB;AAC9F,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD,yDAAyD;AACzD;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8BAA8B,iCAAS,yBAAyB;AAC/F,+BAA+B,sDAAsD;AACrF,8BAA8B,qDAAqD;AACnF;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D,+DAA+D;AAC/D;AACA,+DAA+D;AAC/D,+DAA+D;AAC/D,0DAA0D;AAC1D,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,iCAAS,yBAAyB;AACzG,mCAAmC,4DAA4D;AAC/F,kCAAkC,2DAA2D;AAC7F,+BAA+B,wDAAwD;AACvF,+BAA+B,wDAAwD;AACvF,0BAA0B,iCAAiC,IAAI,IAAI;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,uBAAI;AACN;AACA,GAAG,uBAAI;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uBAAI;AAChB,GAAG,uBAAI;AACP;AACA;AACA,mBAAmB,CAAC,uBAAI,mBAAmB;AAC3C,kBAAkB,CAAC,uBAAI,kBAAkB;AACzC,iCAAiC,kBAAkB,sCAAc,wCAAwC;AACzG;AACA,6BAA6B,aAAa;AAC1C;AACA,yBAAyB,UAAU;AACnC;AACA;AACA;AACA,yCAAyC,kBAAkB;AAC3D;AACA;AACA;AACA,MAAM,uBAAI;AACV,GAAG,uBAAI;AACP;AACA,YAAY,0BAA0B;AACtC;AACA;AACA,SAAS,6BAAK;AACd,cAAc,0BAA0B;AACxC;AACA;AACA;AACA;AACA,SAAS,uBAAI;AACb;AACA;;AAEA,uBAAI;AACJ,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAI;AACJ;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA,cAAc,2CAA2C;AACzD;AACA;AACA,cAAc,iCAAiC;AAC/C;AACA;;AAEA,wEAAwE;AACxE;AACA;AACA;;AAEA;AACA,CAAC,uBAAI;AACL;AACA,EAAE,uBAAI;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAI;AACJ;AACA;AACA;AACA;AACA,EAAE;AACF,E;;AC7R6B;AACuB;AAC0B;;AAEvE,MAAM,8BAAe;AAC5B;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD;AACA;AACA,+BAA+B,gCAAgC;AAC/D;AACA,GAAG;AACH,eAAe,2BAAI;AACnB;AACA;AACA;AACA;AACA,6CAA6C,6BAAc;AAC3D;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,iBAAiB,6BAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA,iBAAiB,6BAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA,iBAAiB,6BAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA,iBAAiB,6BAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM,6BAAc;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAAI,cAAc,uBAAI;AACzC;AACA,oBAAoB,iCAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,WAAW,2BAAG;AACd,WAAW,2BAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,6BAAc;AAC5B,gBAAgB,6BAAc;AAC9B,mBAAmB,CAAC,6BAAc,2BAA2B;AAC7D,uBAAuB,uCAAuC;AAC9D;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,6BAAc;AAC5B,gBAAgB,6BAAc;AAC9B,mBAAmB,CAAC,6BAAc,2BAA2B;AAC7D;AACA;AACA;AACA,OAAO;AACP,WAAW,2BAAG;AACd,WAAW,2BAAG;AACd;AACA;AACA,4BAA4B,2BAAG,MAAM,kBAAE;AACvC,4BAA4B,2BAAG,MAAM,kBAAE;AACvC,4BAA4B,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CvB,WAAW,2DAA2D,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,uBAAI;AAC/B;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA,wB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA,oCAAoC,cAAc,UAAU;AAC5D,SAAS,kBAAkB;AAC3B,4BAA4B,gBAAgB;AAC5C,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA,iBAAiB,oCAAoC;AACrD,iBAAiB;AACjB,kBAAkB,sCAAsC;AACxD,iBAAiB;AACjB,IAAI;AACJ,a;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA,oCAAoC,cAAc,kBAAkB;AACpE,SAAS,kBAAkB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oCAAoC;AACrD,iBAAiB;AACjB,kBAAkB,sCAAsC;AACxD,iBAAiB;AACjB,IAAI;AACJ,qB;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD;AACA,eAAe,IAAI,KAAK;AACxB;AACA;AACA;AACA,EAAE;;;AAGF;;AAEA,4BAA4B,0BAA0B;AACtD,0BAA0B,2BAA2B;;AAErD;AACA,oCAAoC,UAAU;AAC9C;AACA,gCAAgC,UAAU;;AAE1C;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,gCAAgC;AAChC,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAO;AACnC;AACA;AACA;AACA;AACA;AACA,cAAc,2BAA2B;AACzC;AACA,YAAY;AACZ;AACA,0DAA0D,cAAc;AACxE,0DAA0D,cAAc;AACxE,+DAA+D,uBAAI,gBAAgB,YAAY;AAC/F,mDAAmD,uBAAI,gBAAgB,YAAY;AACnF,6BAA6B,YAAY;AACzC,kCAAkC,YAAY;AAC9C,gFAAgF,YAAY;AAC5F,mCAAmC,aAAa;AAChD,2CAA2C,aAAa;AACxD;AACA,gBAAgB,gCAAQ;AACxB,eAAe,kBAAkB;AACjC;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,iBAAiB,+DAA+D;AAChF;AACA,WAAW,2BAAG,WAAW,2BAAG;AAC5B;AACA,sBAAsB,SAAS;AAC/B,sBAAsB,SAAS;AAC/B;AACA;AACA,EAAE;;AAEF,gCAAgC;AAChC;AACA;AACA,qBAAqB,kBAAkB;AACvC,kBAAkB,sBAAsB;AACxC;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,IAAI;AACJ;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ,qBAAqB,YAAY;AACjC;AACA;AACA,mBAAmB,sDAAsD;AACzE,qCAAqC,8CAA8C;AACnF;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,mDAAmD,UAAU;AAC7D,6DAA6D,UAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA;AACA,+BAA+B,UAAU;AACzC;AACA,+BAA+B,oBAAoB;AACnD;AACA;AACA;AACA;AACA,EAAE;;AAEF,uCAAuC;AACvC;AACA;AACA;AACA;AACA,KAAK,iBAAiB;AACtB;AACA;AACA,cAAc,YAAY;AAC1B,iCAAiC,eAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA,oBAAoB,aAAa;AACjC;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,qBAAqB;AACrB,eAAe,6DAA6D;AAC5E,IAAI;AACJ,yCAAyC,KAAK;AAC9C,kBAAkB,gCAAQ;AAC1B,kBAAkB,gCAAQ;AAC1B;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA,EAAE;;AAEF;AACA,iBAAiB,uBAAI;AACrB;AACA,EAAE;AACF;AACA,iBAAiB,uBAAI;AACrB;AACA,EAAE;;AAEF;AACA,yBAAyB,kBAAkB;AAC3C;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,kCAAkC,eAAe;AACjD;AACA;AACA,EAAE;;AAEF,CAAC,E;;ACzf4B;AACU;AACG;AACU;;AAEpD,cAAc,uBAAI;;AAElB;AACA;AACA;AACA;AACA;AACA,sCAAsC,MAAM;AAC5C;AACA;AACA;AACA;;AAEA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,KAAK,uBAAI,YAAY,kBAAkB;AACvC;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iBAAiB;AAC3C,yBAAyB,kBAAkB;AAC3C;AACA,6BAA6B,wDAAwD;AACrF,2BAA2B,yDAAyD;AACpF;AACA;AACA;AACA,IAAI;AACJ,yBAAyB,8BAAO;AAChC;AACA;AACA;AACA,MAAM,uBAAI;AACV;AACA;AACA;AACA;AACA,4BAA4B,8BAAO;AACnC,0BAA0B,8BAAO,kCAAkC,8BAAO;AAC1E;AACA;AACA;AACA;AACA,QAAQ,UAAU;AAClB;AACA,qBAAqB,OAAO,6BAAK,KAAK;AACtC,uBAAuB,qBAAqB,QAAQ;AACpD;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,wBAAwB,QAAQ;AAChC,mBAAmB,eAAO;AAC1B;AACA;AACA,EAAE;;AAEF;AACA;AACA,mDAAmD,QAAQ;AAC3D;AACA;AACA;AACA,0CAA0C,UAAU;AACpD;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,uBAAI;AACN;;AAEA,CAAC,E;;AClJ4B;AACgD;AAClB;;AAE3D,cAAc,uBAAI;;AAElB;AACA,gBAAgB;AAChB,iBAAiB;;AAEjB;AACA;AACA,iDAAiD,uBAAI,QAAQ,uBAAI;AACjE;AACA,EAAE;;AAEF;AACA;AACA;AACA,SAAS,uBAAI;AACb;AACA,GAAG;AACH;AACA;AACA,EAAE;;AAEF,4BAA4B;AAC5B,wBAAwB,WAAW;AACnC;AACA;AACA,GAAG;AACH,EAAE,EAAE;;AAEJ;AACA;AACA,EAAE;;AAEF;AACA,oBAAoB,KAAK,GAAG,MAAM,GAAG,MAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA;;AAEA;;AAEA,uCAAuC,qCAAqC;AAC5E;AACA;AACA,UAAU,gBAAgB;AAC1B,sBAAsB;AACtB;AACA;AACA;AACA;AACA;;AAEA,EAAE;;AAEF;AACA,wBAAwB,0BAA0B;AAClD,kDAAkD,uBAAI,aAAa;AACnE;AACA;AACA;AACA,EAAE;;AAEF;AACA,4BAA4B,8BAA8B;AAC1D;AACA,sDAAsD,uBAAI,aAAa;AACvE;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4BAA4B,8BAA8B;AAC1D;AACA;AACA;AACA;AACA,EAAE;;AAEF,+DAA+D;AAC/D;AACA,oBAAoB,KAAK,GAAG,MAAM,GAAG,MAAM,GAAG,0BAA0B;AACxE;AACA;AACA;AACA;AACA,uBAAuB,uCAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,+BAA+B,iDAAiD;AAChF;AACA;AACA,EAAE;;AAEF;AACA,eAAe,uBAAI,0BAA0B,KAAK;AAClD,kBAAkB,uBAAI;AACtB,mBAAmB,uBAAI;AACvB;AACA,eAAe,uBAAI;AACnB,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,KAAK,iBAAiB;AACzB;AACA,oBAAoB,+BAAO;AAC3B,oBAAoB,+BAAO;AAC3B,oBAAoB,+BAAO;AAC3B,oBAAoB,+BAAO;AAC3B,GAAG,KAAK,kBAAkB,6BAAM,UAAU;AAC1C,6BAA6B;AAC7B,sCAAsC,2BAA2B,uBAAI,kBAAkB;AACvF,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;;AAEA;AACA;AACA;AACA;AACA;AACA,gEAAgE,QAAQ;AACxE;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,iCAAS;AAC/D,sDAAsD,kCAAU;AAChE;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF,CAAC,E;;AC7L4B;AACiL;AACjG;AACvD;;AAEtD,cAAc,uBAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,MAAM;AACtC;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,sBAAsB,oBAAS;AAC/B;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA,sCAAsC,MAAM;AAC5C;AACA;AACA,EAAE;;AAEF;AACA,gBAAgB,iBAAM;AACtB,EAAE,iBAAM,cAAc,kCAAW,4BAA4B,kBAAkB,iCAAU,CAAC,CAAC,uBAAI;AAC/F,EAAE,iBAAM,aAAa,2BAAI,cAAc,iBAAM,6BAA6B,qBAAK,WAAW,iCAAU;AACpG,EAAE,iBAAM,eAAe,2BAAI,cAAc,iBAAM,gCAAgC,qBAAK,KAAK,iCAAU;AACnG,EAAE,iBAAM,cAAc,2BAAI;AAC1B,GAAG,iBAAM;AACT,GAAG,iBAAM,8BAA8B,qBAAK,WAAW,iCAAU;AACjE;AACA,oBAAoB,iBAAM;AAC1B,GAAG,iBAAM,8BAA8B,uBAAI;AAC3C,GAAG,uBAAI,kBAAkB,iBAAM;AAC/B;AACA,EAAE;;AAEF;AACA,2BAA2B,6BAA6B;AACxD,8BAA8B,uBAAI,kBAAkB,uBAAI,aAAa;AACrE,6BAA6B,uCAAgB,oBAAoB,uBAAI;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,oCAAoC,OAAO,6BAAK,MAAM;AACtD,uBAAuB;AACvB;AACA;AACA,cAAc,iBAAM;AACpB;AACA;AACA,GAAG,uBAAI;AACP;AACA;AACA;AACA,EAAE;;AAEF;AACA,CAAC;;AAED,MAAM,iBAAM,SAAS,oCAAa;AAClC;AACA,iBAAiB,uBAAI;AACrB,0BAA0B,oCAAa,iBAAiB,uBAAI;AAC5D;AACA,cAAc,iBAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uBAAI;AAC1B,GAAG;AACH,sBAAsB,uBAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uCAAgB,mBAAmB,uBAAI;AAC7D;AACA,8BAA8B,uBAAI;AAClC;AACA;AACA,+BAA+B,sDAAsD;AACrF;AACA;AACA;AACA,QAAQ,uBAAI;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,qBAAqB,EAAE;AAC9B;AACA;AACA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;AACA,OAAO,0BAA0B,EAAE;AACnC;AACA;AACA;AACA;AACA;;AAEA,MAAM,oBAAS,SAAS,iBAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,+BAA+B,4BAA4B;AAC3D,+BAA+B,4BAA4B;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,uBAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,uBAAI;AACN;AACA;AACA,GAAG;;AAEH;;AAEA,yBAAyB,oCAAa,gBAAgB,uBAAI;AAC1D;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA,gBAAgB,gCAAgC;;AAEhD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,uBAAI;AACnB;AACA;AACA,sCAAsC,OAAO;AAC7C;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,SAAS,6BAAK;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uBAAI;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,sCAAsC,oBAAoB;AAC1D,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,QAAQ;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,+BAA+B;AAC3D;AACA,iDAAiD,8BAAO;AACxD,iDAAiD,gCAAQ;AACzD,mDAAmD,gCAAQ;AAC3D;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU,uBAAI,IAAI,8BAA8B;AAChD;AACA;AACA,UAAU,uBAAI;AACd,GAAG;AACH,UAAU,uBAAI;AACd,GAAG;AACH,UAAU,uBAAI;AACd;AACA;;AAEA;AACA;AACA,UAAU,WAAW;AACrB,aAAa,uBAAI;AACjB;AACA,GAAG,uBAAI,oBAAoB,uBAAI;AAC/B,IAAI,uBAAI;AACR,IAAI,uBAAI;AACR;AACA;AACA,SAAS,uBAAI;AACb;;AAEA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG,uBAAI;AACP,IAAI,uBAAI;AACR,IAAI,uBAAI;AACR;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,uBAAI;AACN,GAAG,uBAAI;AACP,GAAG,uBAAI;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG,KAAK,QAAQ;;AAEhB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,sCAAc;AAClB,IAAI,sCAAc;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,QAAQ;AAC7B;AACA,0CAA0C,6BAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0FAA0F,uBAAI;AAC9F;AACA;AACA;;AAEA;AACA;AACA,GAAG,uBAAI;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,QAAQ;AACzB,EAAE,oBAAS;AACX;AACA;AACA,kBAAkB,UAAU;AAC5B,kBAAkB,UAAU;AAC5B;AACA,MAAM,uBAAI,mBAAmB,mBAAmB,uBAAI,YAAY,uBAAI,aAAa;AACjF,MAAM,uBAAI,iBAAiB,mBAAmB,uBAAI,aAAa,uBAAI,aAAa;AAChF,gBAAgB,uBAAI;AACpB,aAAa,UAAU;AACvB;AACA;AACA,IAAI,uBAAI;AACR;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,WAAW;AAC5B,cAAc,8BAAO;AACrB;AACA,6BAA6B,qBAAqB;AAClD,6BAA6B,qBAAqB;AAClD;AACA,MAAM,uBAAI,mBAAmB,qBAAqB,uBAAI,YAAY,uBAAI,aAAa;AACnF,MAAM,uBAAI,iBAAiB,qBAAqB,uBAAI,aAAa,uBAAI,aAAa;AAClF,gBAAgB,uBAAI;AACpB,yBAAyB,UAAU;AACnC;AACA,gBAAgB,8BAAO;AACvB,4CAA4C,UAAU;AACtD;AACA;AACA;AACA,iBAAiB,8BAAO;AACxB,6CAA6C,UAAU;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA,YAAY,uBAAI;AAChB,SAAS,uBAAI;AACb,GAAG;AACH;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,wBAAwB,gCAAS,cAAc,8BAAO,QAAQ,8BAAO;AACrE,GAAG,gCAAQ,yCAAyC,uBAAI,2BAA2B,uBAAI;AACvF;AACA;AACA;AACA,wEAAwE,uBAAI;AAC5E;AACA;AACA;AACA,4BAA4B,oCAAa,qBAAqB,uBAAI;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA,YAAY,uBAAI;AAChB,GAAG;AACH;AACA;AACA;AACA;AACA,uCAAuC;AACvC,kBAAkB,iCAAU,QAAQ,8BAAO,QAAQ,uBAAI;AACvD;AACA;AACA;AACA;AACA,sBAAsB,oCAAa,eAAe,uBAAI;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,sCAAc,EAAE,uBAAI,sCAAsC,uBAAI;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,uBAAI;AAC/E;AACA,0BAA0B,gCAAQ,0CAA0C,uBAAI;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,gBAAO;AACrC;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,YAAY;AACjD;;AAEA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,uBAAI;AACrC;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA,iBAAiB,iBAAM;AACvB,iBAAiB,uBAAI;AACrB;AACA;AACA,cAAc,iBAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iBAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,uBAAI;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB,+BAA+B;AAC1E,GAAG;AACH,qBAAqB,wBAAwB;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iCAAiC;AAC9D,8BAA8B,6BAA6B;;AAE3D;AACA,iBAAiB,uBAAI;AACrB;AACA,qBAAqB,uBAAI;AACzB,mBAAmB,uBAAI;AACvB,GAAG;AACH;AACA,mBAAmB,uBAAI;AACvB,GAAG;AACH;AACA;AACA;AACA,kCAAkC;AAClC;;AAEA;AACA,4BAA4B,uBAAI;AAChC;;AAEA;;AAEA;AACA;AACA,kBAAkB,qBAAqB;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C,+BAA+B;AACzE;;AAEA;AACA;AACA;AACA,oBAAoB,uBAAI;AACxB;AACA;AACA;AACA,iBAAiB,uBAAI;AACrB;AACA,GAAG;AACH;AACA,sBAAsB,uBAAI;AAC1B;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C,uBAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,uBAAI;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,uBAAI;AACtB,yBAAyB,uBAAI;AAC7B,GAAG,qBAAqB,uBAAI;AAC5B,yBAAyB,uBAAI,0CAA0C,uBAAI;AAC3E,GAAG;AACH;AACA;;AAEA,8BAA8B,8BAAO,WAAW,uBAAI,iCAAiC,uBAAI;AACzF;AACA,kBAAkB,uBAAI;AACtB,yCAAyC,uBAAI;AAC7C,yCAAyC,uBAAI;AAC7C;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,uBAAI;AACtB;AACA;;AAEA,iCAAiC,QAAQ;;AAEzC,sDAAsD,uBAAI;AAC1D,sDAAsD,uBAAI;AAC1D,eAAe,uBAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,QAAQ;;AAEzC;AACA,mEAAmE,QAAQ;;AAE3E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,oFAAoF,SAAS;AAC7F,yCAAyC,uBAAI;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gCAAQ;AACnC,GAAG;AACH;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,uBAAI;AACX;AACA;AACA,IAAI;AACJ;AACA,OAAO,uBAAI;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,4CAA4C;AACjE;AACA;AACA;AACA,gDAAgD,SAAS;AACzD,GAAG;AACH;AACA;;AAEA;;AAEA;AACA,sBAAsB,uBAAI,2BAA2B,uBAAI;AACzD;AACA;AACA;;AAEA,0DAA0D;AAC1D,SAAS,uBAAI;AACb;;AAEA,+DAA+D;AAC/D,qBAAqB,4CAA4C;AACjE;AACA;AACA;AACA;AACA,QAAQ,uBAAI,oEAAoE,uBAAI,eAAe,uBAAI;AACvG;AACA;AACA;;AAEA;AACA,mEAAmE,uBAAI;;AAEvE;AACA,mBAAmB,uBAAI;AACvB;AACA,wBAAwB,GAAG,uBAAI,mBAAmB;AAClD,kBAAkB,uBAAI;AACtB,sCAAsC,UAAU;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8BAA8B;AACnD,GAAG;AACH,sBAAsB,+BAA+B;AACrD;AACA,qBAAqB,QAAQ;;AAE7B;AACA;AACA;AACA,gCAAgC,uBAAI;AACpC,oCAAoC;AACpC;AACA;AACA;AACA,uDAAuD;AACvD;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,uBAAI;AACtB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,uBAAI;AACpB,EAAE,uBAAI;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,sCAAsC;AACtD;AACA;AACA;;AAEA;AACA,sDAAsD,uBAAI;AAC1D;AACA;;AAEA;AACA,qBAAqB,uBAAuB;AAC5C,oBAAoB;AACpB;AACA;AACA,OAAO,gBAAgB;AACvB,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,4BAA4B,8BAA8B;AAC1D;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK,QAAQ,uBAAI;AACjB;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,OAAO;AACP;AACA;AACA;AACA,KAAK,QAAQ,uBAAI;AACjB;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA,WAAW;AACX,GAAG,QAAQ,uBAAI;AACf,WAAW;AACX,GAAG;AACH;AACA;AACA;AACA;;AAEA,gCAAQ;AACR;AACA,aAAa,gCAAgC;AAC7C;AACA;AACA,iGAAiG,uBAAI;AACrG;AACA,YAAY,uBAAI;AAChB,kBAAkB,UAAU;AAC5B,OAAO,iCAAiC;AACxC,EAAE;AACF,QAAQ,uBAAI,sBAAsB,uBAAI;AACtC,EAAE;AACF,QAAQ,uBAAI,sBAAsB,uBAAI;AACtC;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,CAAC,OAAO,uBAAI,iBAAiB,uBAAI,WAAW,uBAAI;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAQ;AACR;AACA,4CAA4C,aAAa,QAAQ;AACjE,6BAA6B,QAAQ;AACrC;AACA,CAAC;;AAED,gCAAQ;AACR;AACA,4CAA4C,aAAa,QAAQ;AACjE;AACA,CAAC;;AAED,uBAAI,UAAU,iBAAM;AACpB,uBAAI,aAAa,oBAAS;;;AAG1B;AACA;AACA,IAAI,uBAAI,kCAAkC,wCAAwC;AAClF;AACA,gBAAgB,uBAAI;AACpB,gBAAgB,uBAAI;AACpB;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA,E;;AChvC6B;AACoG;AAClF;;AAE/C,cAAc,uBAAI;AAClB;AACA,YAAY,8BAA8B;AAC1C,aAAa,kBAAO;AACpB;AACA,CAAC;;AAED,MAAM,qBAAU,SAAS,oCAAa;AACtC;AACA,qBAAqB,uBAAI;AACzB,mBAAmB;AACnB;AACA;AACA,cAAc,uBAAI;AAClB;AACA;AACA;AACA,sBAAsB,uCAAgB,iBAAiB,uBAAI;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAI;AAC3B;AACA;AACA,QAAQ,uBAAI;AACZ;AACA,KAAK,8BAAO;AACZ,KAAK,8BAAO;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,QAAQ;AAClC,6BAA6B,4BAA4B;AACzD,eAAe,uBAAI;AACnB,aAAa,uBAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAI,YAAY,qBAAU;;AAE1B;AACA,MAAM,kBAAO,SAAS,qBAAU;AAChC;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,8CAA8C,8BAAO;AACrD;AACA;AACA,UAAU,QAAQ;AAClB;AACA;AACA;AACA;AACA,uBAAI,SAAS,kBAAO;;AAEpB;;AAEA,MAAM,yBAAc;AACpB;AACA;AACA;AACA;AACA,EAAE,yBAAc;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,KAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,0BAA0B,uBAAI,qBAAqB,uBAAI;AACvD;AACA;AACA;AACA,cAAc,gDAAgD;AAC9D;AACA,qCAAqC,UAAU;AAC/C;AACA,6BAA6B,uBAAI;;AAEjC,kBAAkB,gCAAQ;AAC1B;AACA;AACA;AACA;;AAEA,4BAA4B,8BAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAU;AAC1B;AACA;AACA;AACA;AACA;AACA,iCAAiC,uBAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,y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","file":"mv3d.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","import { Engine, Scene, TransformNode, FreeCamera, Node, Matrix, Vector2, Vector3, Color3, FOGMODE_LINEAR, ORTHOGRAPHIC_CAMERA, PERSPECTIVE_CAMERA, setupBabylonMods, Quaternion } from \"./mod_babylon.js\";\r\nimport util, { degtorad, optimalFrustrumHeight } from \"./util.js\";\r\n\r\n\r\nconst mv3d = {\r\n\tutil:util,\r\n\r\n\tsetup(){\r\n\t\tthis.setupParameters();\r\n\t\tsetupBabylonMods();\r\n\r\n\t\tthis.canvas = document.createElement('canvas');\r\n\t\tthis.texture = PIXI.Texture.fromCanvas(this.canvas);\r\n\t\tthis.texture.baseTexture.scaleMode=PIXI.SCALE_MODES.NEAREST;\r\n\t\tthis.engine = new Engine(this.canvas,this.ANTIALIASING);\r\n\t\tthis.scene = new Scene(this.engine);\r\n\t\t//this.scene.clearColor.a=0;\r\n\t\tthis.scene.clearColor.set(0,0,0,0);\r\n\r\n\t\t//this.engine.forcePOTTextures=true;\r\n\r\n\t\tthis.cameraStick = new TransformNode(\"cameraStick\",this.scene);\r\n\t\tthis.cameraNode = new TransformNode(\"cameraNode\",this.scene);\r\n\t\tthis.cameraNode.parent=this.cameraStick;\r\n\t\tthis.camera = new FreeCamera(\"camera\",new Vector3(0,0,0),this.scene);\r\n\t\tthis.camera.parent=this.cameraNode;\r\n\t\tthis.camera.fov=degtorad(mv3d.FOV);\r\n\t\t/*\r\n\t\tthis.camera.orthoLeft=-Graphics.width/2/tileSize();\r\n\t\tthis.camera.orthoRight=Graphics.width/2/tileSize();\r\n\t\tthis.camera.orthoTop=Graphics.height/2/tileSize();\r\n\t\tthis.camera.orthoBottom=-Graphics.height/2/tileSize();\r\n\t\t*/\r\n\t\tthis.camera.minZ=0.1;\r\n\t\tthis.camera.maxZ=this.RENDER_DIST;\r\n\r\n\t\t//this.scene.activeCameras.push(this.camera);\r\n\r\n\t\tthis.scene.ambientColor = new Color3(1,1,1);\r\n\t\tthis.scene.fogMode=FOGMODE_LINEAR;\r\n\r\n\t\tthis.map = new Node(\"map\",this.scene);\r\n\t\tthis.cells={};\r\n\t\tthis.characters=[];\r\n\r\n\t\tthis.setupBlenders();\r\n\t\t//this.updateBlenders(true);\r\n\t\tthis.setupInput();\r\n\r\n\t\tthis.setupSpriteMeshes();\r\n\r\n\t\tthis.callFeatures('setup');\r\n\r\n\t\tif(isNaN(this.LIGHT_LIMIT)){\r\n\t\t\tconst _sortLightsByPriority=BABYLON.Scene.prototype.sortLightsByPriority;\r\n\t\t\tBABYLON.Scene.prototype.sortLightsByPriority=function(){\r\n\t\t\t\t_sortLightsByPriority.apply(this,arguments);\r\n\t\t\t\tmv3d.updateAutoLightLimit();\r\n\t\t\t};\r\n\t\t}\r\n\t},\r\n\r\n\tupdateCanvas(){\r\n\t\tthis.canvas.width = Graphics._width*mv3d.RES_SCALE;\r\n\t\tthis.canvas.height = Graphics._height*mv3d.RES_SCALE;\r\n\t},\r\n\r\n\trender(){\r\n\t\tthis.scene.render();\r\n\t\tthis.texture.update();\r\n\t\t//this.callFeatures('render');\r\n\t},\r\n\r\n\tlastMapUpdate:0,\r\n\tupdate(){\r\n\t\tif( performance.now()-this.lastMapUpdate > 1000 && !this.mapUpdating ){\r\n\t\t\tthis.updateMap();\r\n\t\t\tthis.lastMapUpdate=performance.now();\r\n\t\t}\r\n\r\n\t\tthis.updateAnimations();\r\n\r\n\t\tthis.updateCharacters();\r\n\r\n\t\tthis.intensiveUpdate();\r\n\r\n\t\tthis.updateBlenders();\r\n\r\n\t\t// input\r\n\t\tthis.updateInput();\r\n\r\n\t\tfor (const key in this.cells){\r\n\t\t\tthis.cells[key].update();\r\n\t\t}\r\n\r\n\t\tthis.callFeatures('update');\r\n\r\n\t\tthis.updateData();\r\n\t},\r\n\r\n\tloadData(key,dfault){\r\n\t\tif(!$gameVariables || !$gameVariables.mv3d || !(key in $gameVariables.mv3d)){ return dfault; }\r\n\t\treturn $gameVariables.mv3d[key];\r\n\t},\r\n\tsaveData(key,value){\r\n\t\tif(!$gameVariables){ return console.warn(`MV3D: Couldn't save data ${key}:${value}`); }\r\n\t\tif(!$gameVariables.mv3d){ $gameVariables.mv3d={}; }\r\n\t\t$gameVariables.mv3d[key]=value;\r\n\t},\r\n\tclearData(key){\r\n\t\tif(!$gameVariables){ return console.warn(`MV3D: Couldn't clear data ${key}`); }\r\n\t\tif(!$gameVariables.mv3d){ return; }\r\n\t\tdelete $gameVariables.mv3d[key];\r\n\t},\r\n\r\n\tupdateCameraMode(){\r\n\t\tconst mode = this.cameraMode;\r\n\t\tlet updated=false;\r\n\t\tif(mode.startsWith('O')){\r\n\t\t\tif(this.camera.mode!==ORTHOGRAPHIC_CAMERA){ this.camera.mode=ORTHOGRAPHIC_CAMERA; updated=true; }\r\n\t\t}else{\r\n\t\t\tif(this.camera.mode!==PERSPECTIVE_CAMERA){ this.camera.mode=PERSPECTIVE_CAMERA; updated=true; }\r\n\t\t}\r\n\t\tif(updated){\r\n\t\t\tthis.updateBlenders(true);\r\n\t\t\tthis.callFeatures('updateCameraMode');\r\n\t\t\tthis.updateParameters();\r\n\t\t}\r\n\t},\r\n\tget cameraMode(){\r\n\t\treturn this.loadData('cameraMode',this.CAMERA_MODE).toUpperCase();\r\n\t},\r\n\tset cameraMode(v){\r\n\t\tv = String(v).toUpperCase().startsWith('O') ? 'ORTHOGRAPHIC' : 'PERSPECTIVE' ;\r\n\t\tthis.saveData('cameraMode',v);\r\n\t\tthis.updateBlenders(true);\r\n\t},\r\n\r\n\tis1stPerson(useCurrent){\r\n\t\tconst k = useCurrent?'currentValue':'targetValue';\r\n\t\treturn this.getCameraTarget()===$gamePlayer && this.blendCameraTransition[k]()<=0\r\n\t\t&& this.blendCameraDist[k]()<=0 && this.blendPanX[k]()===0 && this.blendPanY[k]()===0;\r\n\t},\r\n\r\n\tisDisabled(){\r\n\t\treturn this.loadData('disabled', this.getMapConfig('disabled', !mv3d.ENABLED_DEFAULT ));\r\n\t},\r\n\tdisable(fadeType=2){\r\n\t\tmv3d.saveData('disabled',true);\r\n\t\t//SceneManager.goto(Scene_Map);\r\n\t\t$gamePlayer.reserveTransfer($gameMap.mapId(),$gamePlayer.x,$gamePlayer.y,$gamePlayer.direction(),fadeType);\r\n\t},\r\n\tenable(fadeType=2){\r\n\t\tmv3d.saveData('disabled',false);\r\n\t\t//SceneManager.goto(Scene_Map);\r\n\t\t$gamePlayer.reserveTransfer($gameMap.mapId(),$gamePlayer.x,$gamePlayer.y,$gamePlayer.direction(),fadeType);\r\n\t\tmv3d.createCharacters();\r\n\t},\r\n\r\n\tloopCoords(x,y){\r\n\t\tif(this.loopHorizontal()){\r\n\t\t\tconst mapWidth=mv3d.mapWidth();\r\n\t\t\tconst ox = this.cameraStick.x - mapWidth/2;\r\n\t\t\tx=(x-ox).mod(mapWidth)+ox;\r\n\t\t}\r\n\t\tif(this.loopVertical()){\r\n\t\t\tconst mapHeight=mv3d.mapHeight();\r\n\t\t\tconst oy = this.cameraStick.y - mapHeight/2;\r\n\t\t\ty=(y-oy).mod(mapHeight)+oy;\r\n\t\t}\r\n\t\treturn new Vector2(x,y);\r\n\t},\r\n\r\n\tautoLightLimit(lightLimit){\r\n\t\tif(isNaN(this.LIGHT_LIMIT)){\r\n\t\t\treturn Math.max(4,lightLimit);\r\n\t\t}else{\r\n\t\t\treturn this.LIGHT_LIMIT;\r\n\t\t}\r\n\t},\r\n\r\n\tupdateAutoLightLimit(){\r\n\t\tconst lightLimit=this.autoLightLimit(mv3d.scene.lights.length);\r\n\t\tfor(const m of Object.values(mv3d.materialCache)){\r\n\t\t\tm.maxSimultaneousLights=lightLimit;\r\n\t\t}\r\n\t\tfor(const char of this.characters){\r\n\t\t\tif(!char.material){ continue; }\r\n\t\t\tchar.material.maxSimultaneousLights=this.autoLightLimit(char.mesh.lightSources.length);\r\n\t\t}\r\n\t},\r\n\r\n\tgetFieldSize(dist=mv3d.blendCameraDist.currentValue()){\r\n\t\tconst size = Math.tan(mv3d.camera.fov/2)*dist*2;\r\n\t\treturn {\r\n\t\t\twidth:size*mv3d.engine.getAspectRatio(mv3d.camera),\r\n\t\t\theight:size,\r\n\t\t};\r\n\t},\r\n\tgetScaleForDist(dist=mv3d.blendCameraDist.currentValue()){\r\n\t\treturn Graphics.height/this.getFieldSize(dist).height/48;\r\n\t},\r\n\tgetFovForDist(dist=mv3d.blendCameraDist.currentValue(),height=optimalFrustrumHeight()){\r\n\t\treturn 2*Math.atan(height/2/dist);\r\n\t},\r\n\tgetFrustrumHeight(dist=mv3d.blendCameraDist.currentValue(),fov=mv3d.camera.fov){\r\n\t\treturn 2*dist*Math.tan(fov/2);\r\n\t},\r\n\r\n\r\n\tgetScreenPosition(node,offset=Vector3.Zero()){\r\n\t\tconst matrix = node.parent ? node.parent.getWorldMatrix() : Matrix.Identity();\r\n\t\tconst pos = node instanceof Vector3 ? node.add(offset) : node.position.add(offset);\r\n\t\tconst projected = Vector3.Project(pos,matrix,mv3d.scene.getTransformMatrix(),mv3d.camera.viewport);\r\n\t\treturn {x:projected.x*Graphics.width, y:projected.y*Graphics.height, behindCamera:projected.z>1};\r\n\t},\r\n\t\r\n\tgetUnscaledMatrix(mesh){\r\n\t\tconst matrix = mesh.getWorldMatrix();\r\n\t\tconst qrot=new Quaternion(), vtrans=new Vector3();\r\n\t\tmatrix.decompose(null,qrot,vtrans);\r\n\t\treturn Matrix.Compose(Vector3.One(),qrot,vtrans);\r\n\t},\r\n\tgetTranslationMatrix(mesh){\r\n\t\tconst matrix = mesh.getWorldMatrix();\r\n\t\tconst vrot=Vector3.Zero(), vtrans=new Vector3();\r\n\t\tvrot.y=-degtorad(mv3d.blendCameraYaw.currentValue());\r\n\t\tvrot.x=-degtorad(mv3d.blendCameraPitch.currentValue()-90);\r\n\t\tmatrix.decompose(null,null,vtrans);\r\n\t\treturn Matrix.Compose(Vector3.One(),vrot.toQuaternion(),vtrans);\r\n\t},\r\n\tgetRotationMatrix(mesh){\r\n\t\tconst matrix = mesh.getWorldMatrix();\r\n\t\tconst qrot=new Quaternion();\r\n\t\tmatrix.decompose(null,qrot,null);\r\n\t\treturn Matrix.Compose(Vector3.One(),qrot,Vector3.Zero());\r\n\t},\r\n\r\n\tglobalPosition(node){\r\n\t\tconst matrix = node.parent ? node.parent.getWorldMatrix() : Matrix.Identity();\r\n\t\treturn Vector3.TransformCoordinates(node.position,matrix);\r\n\t},\r\n\r\n}\r\nwindow.mv3d=mv3d;\r\nexport default mv3d;","import mv3d from \"./mv3d\";\r\n\r\nconst {Vector2,Vector3,Color3,Color4} = window.BABYLON;\r\n\r\nexport const makeColor = color=>{\r\n\tif (typeof color === 'number'){\r\n\t\treturn {\r\n\t\t\tr: (color>>16)/255,\r\n\t\t\tg: (color>>8&255)/255,\r\n\t\t\tb: (color&255)/255,\r\n\t\t\ta: 1,\r\n\t\t};\r\n\t}else if(color instanceof Color3){\r\n\t\treturn color.toColor4();\r\n\t}else if(color instanceof Color4){\r\n\t\treturn color;\r\n\t}else{\r\n\t\tconst canvas = document.createElement('canvas');\r\n\t\tcanvas.width=1; canvas.height=1;\r\n\t\tconst context = canvas.getContext('2d');\r\n\t\tcontext.fillStyle = color; context.fillRect(0,0,1,1);\r\n\t\tconst bytes = context.getImageData(0,0,1,1).data;\r\n\t\treturn new Color4(bytes[0]/255,bytes[1]/255,bytes[2]/255,bytes[3]/255);\r\n\t}\r\n}\r\n\r\n\r\nexport const hexNumber=n=>{\r\n\tn=String(n);\r\n\tif(n.startsWith('#')){\r\n\t\tn=n.substr(1);\r\n\t}\r\n\treturn Number.parseInt(n,16);\r\n};\r\n\r\nexport const relativeNumber=(current,n)=>{\r\n\tif(n===''){ return +current; }\r\n\tconst relative = /^[+]/.test(n);\r\n\tif(relative){n=n.substr(1);}\r\n\tn=Number(n);\r\n\tif(Number.isNaN(n)){ return +current; }\r\n\tif(relative){\r\n\t\treturn +current+n;\r\n\t}else{\r\n\t\treturn +n;\r\n\t}\r\n};\r\n\r\nexport const booleanNumber=s=>{\r\n\tif(!isNaN(s)){return Number(s);}\r\n\treturn booleanString(s);\r\n};\r\nexport const booleanString=s=>{\r\n\treturn Boolean(falseString(s));\r\n};\r\nexport const falseString=s=>{\r\n\tif(!s){ return false; }\r\n\tif(typeof s !=='string'){ s=String(s); }\r\n\tconst S=s.toUpperCase();\r\n\tif(falseString.values.includes(S)){\r\n\t\treturn false;\r\n\t}\r\n\treturn s;\r\n};\r\nfalseString.values=['OFF','FALSE','UNDEFINED','NULL','DISABLE','DISABLED'];\r\n\r\nexport const sleep=(ms=0)=>new Promise(resolve=>setTimeout(resolve,ms));\r\nexport const degtorad=deg=>deg*Math.PI/180;\r\nexport const radtodeg=rad=>rad*180/Math.PI;\r\n\r\nexport const pointtorad=(x,y)=>Math.atan2(-y,x)-Math.PI/2;\r\nexport const pointtodeg=(x,y)=>radtodeg(pointtorad(x,y));\r\n\r\nexport const sin=r=>unround(Math.sin(r),1e15);\r\nexport const cos=r=>unround(Math.cos(r),1e15);\r\n\r\nexport const unround=(n,m=1e15)=>Math.round(n*m)/m;\r\n\r\nexport const minmax=(min,max,v)=>Math.min(max,Math.max(min,v));\r\n\r\nexport const tileSize=()=>tileWidth();\r\nexport const tileWidth=()=>Game_Map.prototype.tileWidth();\r\nexport const tileHeight=()=>Game_Map.prototype.tileHeight();\r\nexport const optimalFrustrumWidth=()=>Graphics.width/48;\r\nexport const optimalFrustrumHeight=()=>Graphics.height/48;\r\n\r\nexport const file=(folder=mv3d.MV3D_FOLDER,name)=>{\r\n\tif(name.startsWith('/')){ return '.'+name; }\r\n\telse if(name.startsWith('./')){ return name; }\r\n\tif(folder.startsWith('/')){ folder='.'+folder; }\r\n\telse if(!folder.startsWith('./')){ folder='./'+folder; }\r\n\treturn `${folder}/${name}`;\r\n};\r\n\r\n// directions\r\n\r\nexport const dirtoh=d=>5 + ((d-1)%3-1);\r\nexport const dirtov=d=>5 + (Math.floor((d-1)/3)-1)*3;\r\nexport const hvtodir=(h,v)=>5 + (Math.floor((v-1)/3)-1)*3 + ((h-1)%3-1);\r\n\r\n// useful consts\r\nexport const XAxis = new Vector3(1,0,0);\r\nexport const YAxis = new Vector3(0,1,0);\r\nexport const ZAxis = new Vector3(0,0,1);\r\nexport const v2origin = new Vector2(0,0);\r\nexport const v3origin = new Vector3(0,0,0);\r\n\r\nexport const PI = Math.PI;\r\nexport const PI2 = Math.PI*2;\r\n\r\n// overloading\r\n\r\nexport const overload=funcs=>{\r\n\tconst overloaded = function(){\r\n\t\tconst l=arguments.length;\r\n\t\tif(typeof funcs[l] === 'function'){\r\n\t\t\treturn funcs[l].apply(this,arguments);\r\n\t\t}else if(typeof funcs.default === 'function'){\r\n\t\t\treturn funcs.default.apply(this,arguments);\r\n\t\t}else{ console.warn(\"Unsupported number of arguments.\"); }\r\n\t}\r\n\tfor(const key in funcs){\r\n\t\toverloaded[key]=funcs[key].bind\r\n\t}\r\n\treturn overloaded;\r\n};\r\n\r\n// override\r\nconst _override_default_condition=()=>!mv3d.isDisabled();\r\nexport const override=(obj,methodName,getNewMethod,condition=_override_default_condition)=>{\r\n\tconst oldMethod = obj[methodName];\r\n\tconst newMethod = getNewMethod(oldMethod);\r\n\tconst overrider = function(){\r\n\t\tif(!(typeof condition==='function'?condition():condition)){ return oldMethod.apply(this,arguments); }\r\n\t\treturn newMethod.apply(this,arguments);\r\n\t};\r\n\tObject.defineProperty(overrider,'name',{value:`${methodName}<mv3d_override>`});\r\n\tObject.defineProperty(newMethod,'name',{value:`${methodName}<mv3d>`});\r\n\toverrider.oldMethod=oldMethod; overrider.newMethod=newMethod;\r\n\treturn obj[methodName] = overrider;\r\n};\r\n\r\n// assign\r\nexport const assign=(obj,methods)=>{\r\n\tfor (const key in methods){\r\n\t\tconst descriptor = Object.getOwnPropertyDescriptor(methods,key);\r\n\t\tif (descriptor.get||descriptor.set){\r\n\t\t\tObject.defineProperty(obj,key,descriptor);\r\n\t\t}else if(methods[key] instanceof mv3d.Attribute){\r\n\t\t\tconst attribute = methods[key];\r\n\t\t\tObject.defineProperty(obj,key,attribute.descriptor);\r\n\t\t}else{\r\n\t\t\tobj[key]=methods[key];\r\n\t\t}\r\n\t}\r\n};\r\n\r\n\r\n//\r\nconst util = {\r\n\tmakeColor,hexNumber,relativeNumber,booleanString,falseString,booleanNumber,\r\n\tsleep,degtorad,radtodeg,sin,cos,unround,\r\n\ttileSize,tileWidth,tileHeight,optimalFrustrumWidth,optimalFrustrumHeight,\r\n\tpointtorad,pointtodeg,minmax,\r\n\tdirtov,dirtoh,hvtodir,\r\n\tXAxis,YAxis,ZAxis,v2origin,v3origin,PI,PI2,\r\n\toverload, override, file, assign,\r\n};\r\nexport default util;","\r\nexport function hackShaders(){\r\n\thackShaderAlphaCutoff('shadowMapPixelShader');\r\n\thackShaderAlphaCutoff('depthPixelShader');\r\n\thackDefaultShader();\r\n}\r\n\r\nfunction hackShaderAlphaCutoff(shader){\r\n\thackShaderReplace(shader,\r\n\t\t'if (texture2D(diffuseSampler,vUV).a<0.4)',\r\n\t\t`if (texture2D(diffuseSampler,vUV).a<${mv3d.ALPHA_CUTOFF})`,\r\n\t);\r\n}\r\nfunction hackShaderReplace(shader,find,replace){\r\n\tBABYLON.Effect.ShadersStore[shader]=BABYLON.Effect.ShadersStore[shader].replace(find,replace);\r\n}\r\nfunction hackShaderInsert(shader,find,insert){\r\n\thackShaderReplace(shader,find,`${find}\\n${insert}\\n`);\r\n}\r\n\r\nfunction hackDefaultShader(){\r\n\thackShaderReplace('defaultPixelShader',\r\n\t\t'vec4 color=vec4(finalDiffuse*baseAmbientColor+finalSpecular+reflectionColor+refractionColor,alpha);',\r\n\t\t`vec3 mv3d_extra_emissiveColor = max(emissiveColor-1.,0.);\r\n\t\tvec4 color=vec4(clamp(finalDiffuse*baseAmbientColor+finalSpecular+reflectionColor+mv3d_extra_emissiveColor+refractionColor,0.0,1.0),alpha);`,\r\n\t);\r\n}\r\n","\r\nconst BABYLON = window.BABYLON;\r\nexport const {\r\n\tScene,\r\n\tEngine,\r\n\tFreeCamera,\r\n\tHemisphericLight,\r\n\tDirectionalLight,\r\n\tSpotLight,\r\n\tPointLight,\r\n\tShadowGenerator,\r\n\tVector2,\r\n\tVector3,\r\n\tQuaternion,\r\n\tMatrix,\r\n\tColor3,\r\n\tColor4,\r\n\tPlane,\r\n\tNode,\r\n\tTransformNode,\r\n\tTexture,\r\n\tStandardMaterial,\r\n\tShaderMaterial,\r\n\tEffect,\r\n\tMesh,\r\n\tVertexData,\r\n\tMeshBuilder,\r\n\tAssetsManager,\r\n\tSceneSerializer,\r\n\tSprite,\r\n\tSpriteManager,\r\n\tRay,\r\n} = BABYLON;\r\n\r\nexport const {\r\n\tFRONTSIDE,BACKSIDE,DOUBLESIDE,\r\n} = Mesh;\r\n\r\nexport const {\r\n\tPERSPECTIVE_CAMERA,\r\n\tORTHOGRAPHIC_CAMERA,\r\n} = BABYLON.Camera;\r\n\r\nexport const{\r\n\tFOGMODE_NONE,\r\n\tFOGMODE_EXP,\r\n\tFOGMODE_EXP2,\r\n\tFOGMODE_LINEAR,\r\n} = Scene;\r\n\r\nexport const WORLDSPACE = BABYLON.Space.WORLD,\r\n             LOCALSPACE = BABYLON.Space.LOCAL,\r\n              BONESPACE = BABYLON.Space.BONE;\r\n\r\nimport mv3d from './mv3d.js';\r\nimport { radtodeg, degtorad } from './util.js';\r\nimport { hackShaders } from './shaders.js';\r\n\r\nTexture.prototype.crop=function(x=0,y=0,w=0,h=0,useBaseSize=false){\r\n\tconst { width, height } = useBaseSize?this.getBaseSize():this.getSize();\r\n\tif(!w)w=width-x;\r\n\tif(!h)h=height-y;\r\n\tif(mv3d.EDGE_FIX){ x+=mv3d.EDGE_FIX;y+=mv3d.EDGE_FIX;w-=mv3d.EDGE_FIX*2;h-=mv3d.EDGE_FIX*2; }\r\n\tif(!useBaseSize){\r\n\t\tconst size = this.getSize(), baseSize = this.getBaseSize();\r\n\t\tconst scaleX=baseSize.width/size.width;\r\n\t\tconst scaleY=baseSize.height/size.height;\r\n\t\tx/=scaleX; w/=scaleX; y/=scaleY; h/=scaleY;\r\n\t}\r\n\tthis.uScale=w/width;\r\n\tthis.vScale=h/height;\r\n\tthis.uOffset=x/width;\r\n\tthis.vOffset=1-y/height-this.vScale;\r\n}\r\n\r\nconst _mixin_xyz = {\r\n\tx:{\r\n\t\tget(){ return this.position?this.position.x:undefined; },\r\n\t\tset(v){ if(this.position){ this.position.x=v; } },\r\n\t},\r\n\ty:{\r\n\t\tget(){ return this.position?-this.position.z:undefined; },\r\n\t\tset(v){ if(this.position){ this.position.z=-v; } },\r\n\t},\r\n\tz:{\r\n\t\tget(){ return this.position?this.position.y:undefined; },\r\n\t\tset(v){ if(this.position){ this.position.y=v; } },\r\n\t},\r\n};\r\nconst _mixin_angles = {\r\n\tpitch:{\r\n\t\tget(){ return this.rotation?-radtodeg(this.rotation.x):undefined; },\r\n\t\tset(v){ if(this.rotation){ this.rotation.x=-degtorad(v); } },\r\n\t},\r\n\tyaw:{\r\n\t\tget(){ return this.rotation?-radtodeg(this.rotation.y):undefined; },\r\n\t\tset(v){  if(this.rotation){ this.rotation.y=-degtorad(v); } },\r\n\t},\r\n\troll:{\r\n\t\tget(){ return this.rotation?-radtodeg(this.rotation.z):undefined; },\r\n\t\tset(v){  if(this.rotation){ this.rotation.z=-degtorad(v); } },\r\n\t},\r\n}\r\nObject.defineProperties(Node.prototype,_mixin_xyz);\r\nObject.defineProperties(Node.prototype,_mixin_angles);\r\nObject.defineProperties(Sprite.prototype,_mixin_xyz);\r\n\r\n// mesh sorting\r\n\r\nObject.defineProperty(Mesh.prototype,'order',{\r\n\tget(){ return this._order; },\r\n\tset(v){ this._order=v; this._scene.sortMeshes(); }\r\n});\r\nconst meshSorter=(m1,m2)=>(m1._order|0)-(m2._order|0);\r\nScene.prototype.sortMeshes=function(){\r\n\tthis.meshes.sort(meshSorter);\r\n}\r\nconst _addMesh = Scene.prototype.addMesh;\r\nScene.prototype.addMesh=function(mesh){\r\n\t_addMesh.apply(this,arguments);\r\n\tif(typeof mesh._order==='number'){\r\n\t\tthis.sortMeshes();\r\n\t}\r\n}\r\nconst _removeMesh = Scene.prototype.removeMesh;\r\nScene.prototype.removeMesh=function(mesh){\r\n\t_removeMesh.apply(this,arguments);\r\n\tthis.sortMeshes();\r\n}\r\n\r\n// color\r\nColor3.prototype.toNumber=Color4.prototype.toNumber=function(){return this.r*255<<16|this.g*255<<8|this.b*255;}\r\n\r\n// hack babylon\r\nexport function setupBabylonMods(){\r\n\thackShaders();\r\n};\r\n\r\nStandardMaterial.prototype._shouldTurnAlphaTestOn=function(mesh){\r\n\treturn this.needAlphaTesting();\r\n};\r\n\r\n","import mv3d from './mv3d.js';\r\n\r\nmv3d.features={};\r\n\r\nmv3d.callFeature=function(name,method,...args){\r\n\tif(!this.featureEnabled(name)){ return; }\r\n\tconst feature = this.features[name];\r\n\tif(method in feature.methods){\r\n\t\tfeature.methods[method](...args);\r\n\t}\r\n}\r\n\r\nmv3d.callFeatures=function(method,...args){\r\n\tfor(const name in this.features){\r\n\t\tthis.callFeature(name,method,...args);\r\n\t}\r\n}\r\n\r\nmv3d.featureEnabled=function(name){\r\n\tif( !(name in this.features) ){ return false; }\r\n\tif(!this.features[name].enabled()){ return false; }\r\n\treturn true;\r\n}\r\n\r\nexport class Feature{\r\n\tconstructor(name,methods,condition=true){\r\n\t\tObject.assign(this,{name,condition,methods});\r\n\t\tmv3d.features[name]=this;\r\n\t}\r\n\tenabled(){\r\n\t\tif(typeof this.condition==='function'){\r\n\t\t\treturn this.condition();\r\n\t\t}\r\n\t\treturn Boolean(this.condition);\r\n\t}\r\n}\r\nmv3d.Feature = Feature;\r\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","\r\nrequire('./options/options_main.js');\r\nrequire('./movement/movement_main.js');\r\n\r\nif(window.Imported&&Imported.YEP_SaveCore){\r\n\tconst _onLoadSuccess = Scene_File.prototype.onLoadSuccess;\r\n\tScene_File.prototype.onLoadSuccess=function(){\r\n\t\t_onLoadSuccess.apply(this,arguments);\r\n\t\tmv3d.needClearMap=true;\r\n\t}\r\n}","import mv3d from '../../mv3d.js';\r\n\r\nmv3d['option-store']={}\r\n\r\nmv3d.options={};\r\n\r\nif(mv3d.OPTION_RENDER_DIST) mv3d.options['mv3d-renderDist']={\r\n\tname:mv3d.OPTION_NAME_RENDER_DIST,\r\n\tmin:mv3d.OPTION_RENDER_DIST_MIN, max:mv3d.OPTION_RENDER_DIST_MAX,\r\n\tincrement:5,\r\n\twrap:false,\r\n\tapply(v){ mv3d.RENDER_DIST=v; },\r\n\tdefault:mv3d.RENDER_DIST,\r\n};\r\n\r\nif(mv3d.OPTION_FOV) mv3d.options['mv3d-fov']={\r\n\tname:mv3d.OPTION_NAME_FOV,\r\n\tmin:mv3d.OPTION_FOV_MIN, max:mv3d.OPTION_FOV_MAX,\r\n\tincrement:5,\r\n\tapply(v){ mv3d.FOV=v; },\r\n\tdefault:mv3d.FOV,\r\n};\r\n\r\nif(mv3d.OPTION_MIPMAP) mv3d.options['mv3d-mipmap']={\r\n\tname:mv3d.OPTION_NAME_MIPMAP,\r\n\ttype:'bool',\r\n\tapply(v){ mv3d.MIPMAP=v; mv3d.needReloadMap=true; },\r\n\tdefault:mv3d.MIPMAP,\r\n};\r\n\r\nif(mv3d.ENABLE_3D_OPTIONS){\r\n\trequire('./options_enabled.js');\r\n}","import mv3d from '../../mv3d.js';\r\nimport { override } from '../../util.js';\r\n\r\n\r\nconst _option_command_list = Window_Options.prototype.makeCommandList;\r\nWindow_Options.prototype.makeCommandList = function() {\r\n\t_option_command_list.apply(this,arguments);\r\n\tif(mv3d.ENABLE_3D_OPTIONS===mv3d.enumOptionModes.SUBMENU && Object.keys(mv3d.options).length){\r\n\t\tthis.addCommand(\"3D Options\", 'mv3d-options');\r\n\t}else if(mv3d.ENABLE_3D_OPTIONS===mv3d.enumOptionModes.ENABLE){\r\n\t\tfor (const key in mv3d.options){\r\n\t\t\tthis.addCommand(mv3d.options[key].name,key);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconst _option_status_text = Window_Options.prototype.statusText;\r\nWindow_Options.prototype.statusText = function(index) {\r\n\tconst symbol = this.commandSymbol(index);\r\n\tconst value = this.getConfigValue(symbol);\r\n\tif(symbol==='mv3d-options'){ return ''; }\r\n\treturn _option_status_text.apply(this,arguments);\r\n};\r\n\r\nObject.defineProperty(ConfigManager, 'mv3d-options', {\r\n\tget(){ return undefined; },\r\n\tset(v){ SceneManager.push(Scene_3D_Options); },\r\n\tconfigurable: true,\r\n\tenumerable:false,\r\n});\r\n\r\nconst _config_makeData=ConfigManager.makeData;\r\nConfigManager.makeData = function() {\r\n\tconst config = _config_makeData.apply(this,arguments);\r\n\tObject.assign(config,mv3d['option-store']);\r\n\treturn config;\r\n};\r\nconst _config_applyData=ConfigManager.applyData;\r\nConfigManager.applyData = function(config) {\r\n\t_config_applyData.apply(this,arguments);\r\n\tfor(const key in mv3d.options){\r\n\t\tif(key in config){\r\n\t\t\tmv3d['option-store'][key]=config[key];\r\n\t\t\tmv3d.options[key].apply(config[key]);\r\n\t\t}\r\n\t}\r\n\tmv3d.updateParameters();\r\n};\r\n\r\n\r\n\r\nclass Scene_3D_Options extends Scene_Options{\r\n\tcreateOptionsWindow(){\r\n\t\tthis._optionsWindow = new Window_3D_Options();\r\n\t\tthis._optionsWindow.setHandler('cancel', this.popScene.bind(this));\r\n\t\tthis.addWindow(this._optionsWindow);\r\n\t}\r\n\tterminate(){\r\n\t\tsuper.terminate();\r\n\t\tmv3d.updateParameters();\r\n\t}\r\n}\r\n\r\nclass Window_3D_Options extends Window_Options{\r\n\tmakeCommandList(){\r\n\t\tfor (const key in mv3d.options){\r\n\t\t\tthis.addCommand(mv3d.options[key].name,key);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nif(mv3d.ENABLE_3D_OPTIONS===1) override(Scene_Options.prototype,'terminate',o=>function(){\r\n\to.apply(this,arguments);\r\n\tmv3d.updateParameters();\r\n},true);\r\n\r\nWindow_Options.prototype._is_mv3d_option=function(symbol){\r\n\treturn symbol in mv3d.options;\r\n}\r\n\r\nWindow_Options.prototype._mv3d_cursor=function(wrap,direction){\r\n\tconst index = this.index();\r\n\tconst symbol = this.commandSymbol(index);\r\n\tlet value = this.getConfigValue(symbol);\r\n\tconst option = mv3d.options[symbol];\r\n\tif(!option) { return; }\r\n\tif(option.type==='bool'){\r\n\t\tthis.changeValue(symbol, direction>0);\r\n\t}else{\r\n\t\tconst min = option.min||0;\r\n\t\tconst max = option.values?option.values.length-1:option.max||1;\r\n\t\tvalue += (option.increment||1)*direction;\r\n\t\tif(wrap&&option.wrap||wrap==='ok'){\r\n\t\t\tif(value>max){ value = min; }\r\n\t\t\tif(value<min){ value = max; }\r\n\t\t}else{\r\n\t\t\tvalue = value.clamp(min,max);\r\n\t\t}\r\n\t\tthis.changeValue(symbol, value);\r\n\t}\r\n}\r\n\r\n\r\noverride(Window_Options.prototype,'statusText',o=>function(index){\r\n    const symbol = this.commandSymbol(index);\r\n    if(!this._is_mv3d_option(symbol)){ return o.apply(this,arguments); }\r\n    const value = this.getConfigValue(symbol);\r\n    const option = mv3d.options[symbol];\r\n    if(option.type==='bool'){\r\n        return this.booleanStatusText(value);\r\n    }else if(option.values){\r\n        return option.values[value];\r\n    }\r\n    return String(value);\r\n},true);\r\n\r\noverride(Window_Options.prototype,'setConfigValue',o=>function(symbol, value){\r\n    if(!this._is_mv3d_option(symbol)){ return o.apply(this,arguments); }\r\n    mv3d['option-store'][symbol]=value;\r\n    const option = mv3d.options[symbol];\r\n    if(option.apply){ option.apply(value); }\r\n},true);\r\n\r\noverride(Window_Options.prototype,'getConfigValue',o=>function(symbol){\r\n    if(!this._is_mv3d_option(symbol)){ return o.apply(this,arguments); }\r\n    const option = mv3d.options[symbol];\r\n    let value = mv3d['option-store'][symbol];\r\n    if(value==null){ value=option.default||option.min||0; }\r\n    return value;\r\n},true);\r\n\r\noverride(Window_Options.prototype,'cursorLeft',o=>function(wrap){\r\n    const symbol = this.commandSymbol(this.index());\r\n    if(this._is_mv3d_option(symbol)){\r\n        return this._mv3d_cursor(wrap,-1);\r\n    }else{\r\n        return o.apply(this,arguments);\r\n    }\r\n},true);\r\n\r\noverride(Window_Options.prototype,'cursorRight',o=>function(wrap){\r\n    const symbol = this.commandSymbol(this.index());\r\n    if(this._is_mv3d_option(symbol)){\r\n        return this._mv3d_cursor(wrap,1);\r\n    }else{\r\n        return o.apply(this,arguments);\r\n    }\r\n},true);\r\n\r\noverride(Window_Options.prototype,'processOk',o=>function(){\r\n    const index = this.index();\r\n    const symbol = this.commandSymbol(index);\r\n    if(!this._is_mv3d_option(symbol)){\r\n        return o.apply(this,arguments);\r\n    }\r\n    let value = this.getConfigValue(symbol);\r\n    const option = mv3d.options[symbol];\r\n    if(option.type==='bool'){\r\n        this.changeValue(symbol, !value);\r\n    }else{\r\n        this._mv3d_cursor('ok',1);\r\n    }\r\n},true);\r\n","import mv3d from '../../mv3d.js';\r\nimport { override } from '../../util.js';\r\n\r\nObject.assign(mv3d,{\r\n\tvehicleObstructed(vehicle,...args){\r\n\t\treturn vehicleObstructed.apply(vehicle,args);\r\n\t},\r\n\ttileCollision(char,x,y,useStairThresh=false,useTargetZ=false){\r\n\t\tif(!(char instanceof mv3d.Character)){if(!char.mv3d_sprite){return false;}char=char.mv3d_sprite;}\r\n\t\tconst z = typeof useTargetZ==='number'? useTargetZ\r\n\t\t:useTargetZ?char.getTargetElevation(x,y):char.z;\r\n\t\tconst cc = char.getCollisionHeight(z);\r\n\t\tconst tcs = this.getCollisionHeights(x,y);\r\n\t\tif(useStairThresh==2){ cc.z1+=mv3d.STAIR_THRESH; cc.z2+=mv3d.STAIR_THRESH; }\r\n\t\tfor (const tc of tcs){\r\n\t\t\tif(cc.z1<tc.z2&&cc.z2>tc.z1){\r\n\t\t\t\tif(useStairThresh==1&&mv3d.STAIR_THRESH){ return this.tileCollision(char,x,y,2,useTargetZ); }\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\tcharCollision(char1,char2,useStairThresh=false,useTargetZ1=false,useTargetZ2=useTargetZ1,triggerMode=false){\r\n\t\tif(!(char1 instanceof mv3d.Character)){if(!char1.mv3d_sprite){return false;}char1=char1.mv3d_sprite;}\r\n\t\tif(!(char2 instanceof mv3d.Character)){if(!char2.mv3d_sprite){return false;}char2=char2.mv3d_sprite;}\r\n\t\tif(!triggerMode&&(!char1.char._mv3d_hasCollide()||!char2.char._mv3d_hasCollide())){ return false; } \r\n\t\tconst c1z = typeof useTargetZ1==='number'? useTargetZ1 : useTargetZ1?char1.getTargetElevation(char2.x,char2.y):char1.z;\r\n\t\tconst c2z = typeof useTargetZ2==='number'? useTargetZ2 : useTargetZ2?char2.targetElevation:char2.z;\r\n\t\tconst cc1 = char1.getCollisionHeight(c1z);\r\n\t\tconst cc2 = triggerMode ? char2.getTriggerHeight(c2z) : char2.getCollisionHeight(c2z);\r\n\t\tif(useStairThresh==2){ cc1.z1+=mv3d.STAIR_THRESH; cc1.z2+=mv3d.STAIR_THRESH; }\r\n\t\tif(!triggerMode&&cc1.z1<cc2.z2&&cc1.z2>cc2.z1 || triggerMode&&cc1.z1<=cc2.z2&&cc1.z2>=cc2.z1){\r\n\t\t\tif(useStairThresh==1&&mv3d.STAIR_THRESH){ return this.charCollision(char1,char2,2,useTargetZ1,useTargetZ2); }\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\tgetPlatformFloatForCharacter(char,x,y,opts={}){\r\n\t\tif(!(char instanceof mv3d.Character)){if(!char.mv3d_sprite){return 0;}char=char.mv3d_sprite;}\r\n\t\tlet z = mv3d.getPlatformForCharacter(char,x,y,opts).z2;\r\n\t\tif(char.hasFloat){\r\n\t\t\tconst cHeight = char.getCHeight();\r\n\t\t\tz += mv3d.getFloatHeight(x,y,char.z+Math.max(cHeight,mv3d.STAIR_THRESH),mv3d.STAIR_THRESH>=cHeight);\r\n\t\t}\r\n\t\treturn z;\r\n\t},\r\n\tgetPlatformForCharacter(char,x,y,opts={}){\r\n\t\tif(!(char instanceof mv3d.Character)){if(!char.mv3d_sprite){return false;}char=char.mv3d_sprite;}\r\n\t\tconst cHeight = char.getCHeight();\r\n\t\tconst useStairThresh = mv3d.STAIR_THRESH>=cHeight;\r\n\t\tObject.assign(opts,{char:char,gte:useStairThresh});\r\n\t\treturn this.getPlatformAtLocation(x,y,char.z+Math.max(cHeight,mv3d.STAIR_THRESH),opts);\r\n\t},\r\n\tgetPlatformAtLocation(x,y,z,opts={}){\r\n\t\tconst char = opts.char;\r\n\t\tconst cs = this.getCollisionHeights(x,y,opts);\r\n\t\tcs.push(...mv3d.getEventsAt(x,y)\r\n\t\t\t.filter(event=>{\r\n\t\t\t\tif(!(event.mv3d_sprite&&event._mv3d_isPlatform()&&event._mv3d_hasCollide()&&event.mv3d_sprite.visible)){ return false; }\r\n\t\t\t\tif(char){\r\n\t\t\t\t\tif(char.char===event || event.isMoving()){ return false; }\r\n\t\t\t\t\tlet pc=event.mv3d_sprite;\r\n\t\t\t\t\twhile(pc=pc.platformChar){\r\n\t\t\t\t\t\tif(pc===char||pc===event.mv3d_sprite){ return false; }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t})\r\n\t\t\t.map(event=>event.mv3d_sprite.getCollisionHeight())\r\n\t\t);\r\n\t\tlet closest = cs[0];\r\n\t\tfor (const c of cs){\r\n\t\t\tif(c.z2>closest.z2 && (opts.gte?c.z2<=z:c.z2<z) ){\r\n\t\t\t\tclosest=c;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn closest;\r\n\t},\r\n\r\n\tgetEventsAt(x,y){\r\n\t\treturn $gameMap.eventsXyNt(Math.round(x),Math.round(y));\r\n\t},\r\n\r\n\tisRampAt(x,y,z){\r\n\t\tconst tileData = this.getTileData(x,y);\r\n\t\tlet height = 0;\r\n\t\tfor (let l=0;l<4;++l){\r\n\t\t\theight += this.getTileFringe(x,y,l);\r\n\t\t\theight += this.getTileHeight(x,y,l);\r\n\t\t\tconst conf = this.getTileConfig(tileData[l],x,y,l);\r\n\t\t\tif(conf.shape!==this.enumShapes.SLOPE){ continue; }\r\n\t\t\tconst slopeHeight = conf.slopeHeight||1;\r\n\t\t\tif(z>=height-slopeHeight && z<=height){\r\n\t\t\t\treturn { id:tileData[l], x,y,l,conf, z1:height-slopeHeight, z2:height };\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\r\n\tgetRampData(x,y,l,conf=null){\r\n\t\tconst tileId = mv3d.getTileId(x,y,l);\r\n\t\tif(!conf){ conf = this.getTileConfig(tileId,x,y,l); }\r\n\t\tif(conf.shape!==this.enumShapes.SLOPE){ return false; }\r\n\t\tconst height = mv3d.getStackHeight(x,y,l);\r\n\t\tconst slopeHeight = conf.slopeHeight||1;\r\n\t\treturn { id:tileId, x,y,l,conf, z1:height-slopeHeight, z2:height };\r\n\t},\r\n\r\n\tcanPassRamp(d,slope,opts={}){\r\n\t\tif(d===5||d<=0||d>=10){ return true; }\r\n\t\tconst {dir:sd} = mv3d.getSlopeDirection(slope.x,slope.y,slope.l,true);\r\n\t\tconst x2 = $gameMap.roundXWithDirection(slope.x,d);\r\n\t\tconst y2 = $gameMap.roundYWithDirection(slope.y,d);\r\n\t\tconst slope2 = this.isRampAt(x2,y2,sd===d?slope.z1:sd===10-d?slope.z2:(slope.z1+slope.z2)/2);\r\n\t\tif(slope2){\r\n\t\t\tconst  {dir:sd2} = mv3d.getSlopeDirection(x2,y2,slope2.l,true);\r\n\t\t\tif(sd!==d&&sd!==10-d){\r\n\t\t\t\tif(sd===sd2&&slope.z1===slope2.z1&&slope.z2===slope2.z2){ return true; }\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn sd===sd2 && (sd===d?(slope.z1===slope2.z2):(slope.z2===slope2.z1));\r\n\t\t}\r\n\t\tif(sd!==d&&sd!==10-d){ return false; }\r\n\t\tconst dh = this.getPlatformAtLocation(x2,y2, (opts.z!=null?opts.z:sd===d?slope.z1:slope.z2)+mv3d.STAIR_THRESH ).z2;\r\n\t\treturn Math.abs(dh-(sd===d?slope.z1:slope.z2))<=mv3d.STAIR_THRESH;\r\n\t}\r\n});\r\n\r\nGame_CharacterBase.prototype._mv3d_isFlying=function(){\r\n\tif(!this.mv3d_sprite){ return false;}\r\n\treturn this.mv3d_sprite.blendElevation.currentValue()>0||this.mv3d_sprite.hasConfig('zlock');\r\n};\r\nGame_Vehicle.prototype._mv3d_isFlying=function(){\r\n\treturn this.isAirship()||Game_CharacterBase.prototype._mv3d_isFlying.apply(this,arguments);\r\n};\r\nGame_Player.prototype._mv3d_isFlying=function(){\r\n\tif(this.isInVehicle()&&this.vehicle().isAirship()){ return true; }\r\n\treturn Game_CharacterBase.prototype._mv3d_isFlying.apply(this,arguments);\r\n};\r\n\r\nGame_CharacterBase.prototype._mv3d_isPlatform=function(){\r\n\treturn this.mv3d_sprite&&this.mv3d_sprite.getConfig('platform',mv3d.WALK_ON_EVENTS);\r\n};\r\n\r\nGame_CharacterBase.prototype._mv3d_hasCollide=function(){\r\n\tconst sprite = this.mv3d_sprite;\r\n\tif(!sprite || sprite.getConfig('collide')===false){ return false; }\r\n\treturn this._mv3d_isPlatform() || Boolean(sprite.getCHeight());\r\n};\r\n\r\nif(window.Imported&&Imported.QMovement){\r\n\trequire('./movement_Q.js');\r\n}else if(PluginManager._scripts.includes(\"AltimitMovement\")&&Game_CharacterBase.prototype.moveVector){\r\n\trequire('./movement_Altimit.js');\r\n}else{\r\n\trequire('./movement_vanilla.js');\r\n}\r\n\r\n// jump\r\nconst _charBase_jump = Game_CharacterBase.prototype.jump;\r\nGame_CharacterBase.prototype.jump = function(xPlus, yPlus) {\r\n\tif (mv3d.isDisabled()){ return _charBase_jump.apply(this,arguments); }\r\n\tthis.mv3d_jumpHeightStart = this.z||mv3d.getWalkHeight(this.x,this.y);\r\n\tthis.mv3d_jumpHeightEnd = mv3d.getWalkHeight(this.x+xPlus,this.y+yPlus);\r\n\t_charBase_jump.apply(this,arguments);\r\n};\r\n\r\noverride(Game_Map.prototype,'allTiles',o=>function(x,y){\r\n\treturn this.layeredTiles(x, y);\r\n});","import { override, unround, minmax, radtodeg, degtorad, hvtodir } from \"../../util\";\r\nimport mv3d from \"../../mv3d\";\r\nimport { Feature } from \"../../features\";\r\n\r\noverride(ColliderManager,'update',o=>function(){\r\n\tthis.hide();\r\n});\r\n\r\noverride(ColliderManager.container,'update',o=>function(){\r\n\tif(this.visible){ o.apply(this,arguments); }\r\n},true);\r\n\r\nlet _tileColliders={};\r\nmv3d.getQTileColliders=()=>_tileColliders;\r\n\r\nfunction mv3d_makeTileCollider(x,y,zcollider,extra){\r\n\tconst tc=new Box_Collider($gameMap.tileWidth(),$gameMap.tileHeight());\r\n\ttc.x=x*$gameMap.tileWidth();\r\n\ttc.y=y*$gameMap.tileHeight();\r\n\ttc.mv3d_collider=zcollider;\r\n\ttc.mv3d_collider_type=extra;\r\n\treturn tc;\r\n}\r\n\r\nconst infiniteHeightCollider={z1:-Infinity,z2:Infinity};\r\n\r\noverride(Game_Map.prototype,'setupMapColliders',o=>function(){\r\n\tthis._tileCounter = 0;\r\n\t_tileColliders={};\r\n\tfor (let x = 0; x < this.width(); x++)\r\n\tfor (let y = 0; y < this.height(); y++) {\r\n\t\tconst px = x * this.tileWidth(), py = y * this.tileHeight();\r\n\t\tconst flags = this.tilesetFlags();\r\n\t\tconst tiles = mv3d.getTileData(x, y);\r\n\t\tconst zColliders = mv3d.getCollisionHeights(x,y,{layers:true,slopeMin:true});\r\n\t\tconst tileCollider_list = _tileColliders[[x,y]]=[];\r\n\t\tfor (let i=0; i<zColliders.length; ++i) {\r\n\t\t\ttileCollider_list[i]=mv3d_makeTileCollider(x,y,zColliders[i],'mv3d');\r\n\t\t}\r\n\t\t_tileColliders[[x,y,'x']]=mv3d_makeTileCollider(x,y,infiniteHeightCollider,'mv3d_x');\r\n\t\tfor (let l = 0; l < tiles.length; ++l) {\r\n\t\t\tconst flag = flags[tiles[l]];\r\n\t\t\tconst passage = mv3d.getTilePassage(tiles[l],x,y,l);\r\n\t\t\tif(passage===mv3d.enumPassage.THROUGH){ continue; }\r\n\t\t\tconst conf = mv3d.getTileConfig(x,y,l);\r\n\t\t\tif(conf.shape===mv3d.enumShapes.SLOPE){\r\n\t\t\t\tconst rampData = mv3d.getRampData(x,y,l,conf);\r\n\t\t\t\tlet dcol=0;\r\n\t\t\t\tif(!mv3d.canPassRamp(2,rampData)){ dcol|=0b0001; }\r\n\t\t\t\tif(!mv3d.canPassRamp(4,rampData)){ dcol|=0b0010; }\r\n\t\t\t\tif(!mv3d.canPassRamp(6,rampData)){ dcol|=0b0100; }\r\n\t\t\t\tif(!mv3d.canPassRamp(8,rampData)){ dcol|=0b1000; }\r\n\t\t\t\tdcol+=1536;\r\n\t\t\t\tconst slopeZ2 = mv3d.getStackHeight(x,y,l);\r\n\t\t\t\tconst slopeZ1 = slopeZ2-(conf.slopeHeight||1);\r\n\t\t\t\t//const data = Array.from(QMovement.tileBoxes[flag]);\r\n\t\t\t\tlet data = QMovement.tileBoxes[dcol];\r\n\t\t\t\tconst key = [x,y,l,'slope'].toString();\r\n\t\t\t\t_tileColliders[key]=[];\r\n\t\t\t\tif(data){\r\n\t\t\t\t\tif(data[0].constructor!==Array){ data=[data]; }\r\n\t\t\t\t\tfor(const box of data){\r\n\t\t\t\t\t\tconst c = new Box_Collider(box[0]||0,box[1]||0,box[2],box[3]);\r\n\t\t\t\t\t\tc.slopeZ1=slopeZ1; c.slopeZ2=slopeZ2;\r\n\t\t\t\t\t\tc.moveTo(px,py);\r\n\t\t\t\t\t\tc.mv3d_collider=infiniteHeightCollider;\r\n\t\t\t\t\t\t_tileColliders[key].push(c);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet mv3d_collider;\r\n\t\t\tif(zColliders.layers[l]){\r\n\t\t\t\tmv3d_collider=zColliders.layers[l];\r\n\t\t\t\tmv3d_collider.passage=passage;\r\n\t\t\t\tmv3d_collider.l=l;\r\n\t\t\t}\r\n\t\t\tlet data = this.getMapCollider(x, y, flag);\r\n\t\t\tif (!data){ continue; }\r\n\t\t\tdata=Array.from(data);\r\n\t\t\tif (data[0].constructor === Array) {\r\n\t\t\t\tfor (var j = 0; j < data.length; j++) {\r\n\t\t\t\t\tdata[j].mv3d_collider=mv3d_collider;\r\n\t\t\t\t\tdata[j].isRegionCollider=true;\r\n\t\t\t\t\tthis.makeTileCollider(x, y, flag, data[j], j);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdata.mv3d_collider=mv3d_collider;\r\n\t\t\t\tdata.isQCollider=true;\r\n\t\t\t\tthis.makeTileCollider(x, y, flag, data, 0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n},true);\r\n\r\noverride(Game_Map.prototype,'makeTileCollider',o=>function(x,y,flag,boxData,index){\r\n\tconst collider = o.apply(this,arguments);\r\n\tif(boxData.mv3d_collider){\r\n\t\tif(boxData.isRegionCollider){\r\n\t\t\tcollider.mv3d_collider = infiniteHeightCollider;\r\n\t\t}else if(boxData.isQCollider){\r\n\t\t\tcollider.mv3d_collider = {z1:-Infinity,z2:Infinity};\r\n\t\t\tif(boxData.mv3d_collider){\r\n\t\t\t\tcollider.mv3d_collider.l = boxData.mv3d_collider.l;\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\tcollider.mv3d_collider = {\r\n\t\t\t\tz1: boxData.mv3d_collider.z2,\r\n\t\t\t\tz2: boxData.mv3d_collider.z2 + mv3d.STAIR_THRESH + 0.01,\r\n\t\t\t};\r\n\t\t\t*/\r\n\t\t}else{\r\n\t\t\tcollider.mv3d_collider = boxData.mv3d_collider;\r\n\t\t}\r\n\t}\r\n\treturn collider;\r\n},true);\r\n\r\noverride(Game_CharacterBase.prototype,'collider',o=>function collider(){\r\n\tconst collider = o.apply(this,arguments);\r\n\tif(!this.mv3d_sprite){ return collider; }\r\n\tif(!collider.mv3d_collider){\r\n\t\tObject.defineProperty(collider,'mv3d_collider',{\r\n\t\t\tconfigurable:true,enumerable:false, value: this.mv3d_sprite.getCollider(),\r\n\t\t});\r\n\t\tObject.defineProperty(collider,'mv3d_triggerCollider',{\r\n\t\t\tconfigurable:true,enumerable:false, value: this.mv3d_sprite.getTriggerCollider(),\r\n\t\t});\r\n\t}\r\n\treturn collider;\r\n});\r\n\r\nfunction QzCollidersOverlap(c1,c2){\r\n\tif(!c1.mv3d_collider||!c2.mv3d_collider){ return true; }\r\n\tc1=c1.mv3d_collider; c2=c2.mv3d_collider;\r\n\treturn zCollidersOverlap(c1,c2);\r\n}\r\nfunction zCollidersOverlap(c1,c2){\r\n\tif(c1.z1<c2.z2&&c1.z2>c2.z1 && c1.z1+mv3d.STAIR_THRESH<c2.z2&&c1.z2+mv3d.STAIR_THRESH>c2.z1){\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\noverride(ColliderManager,'getCollidersNear',o=>function getCollidersNear(collider, only, debug){\r\n\t// Q colliders\r\n\tlet isBreak=false;\r\n\tconst near = o.call(this,collider,c=>{\r\n\t\tif(QzCollidersOverlap(collider,c)===false){ return false; }\r\n\t\tif(collider.mv3d_collider){\r\n\t\t\tconst cx = Math.round(c.x/QMovement.tileSize);\r\n\t\t\tconst cy = Math.round(c.y/QMovement.tileSize);\r\n\t\t\tif(collider.mv3d_collider.char){\r\n\t\t\t\t// if we're standing on a character, ignore Q colliders.\r\n\t\t\t\t//const platform = collider.mv3d_collider.char.getPlatform();\r\n\t\t\t\tconst platform = collider.mv3d_collider.char.getPlatform(cx,cy);\r\n\t\t\t\tif(platform.char){ return false; }\r\n\t\t\t}\r\n\t\t\tif(c.mv3d_collider){\r\n\t\t\t\t// ignore Q colliders not on current layer\r\n\t\t\t\tconst tileLayers = mv3d.getTileLayers(cx,cy,collider.mv3d_collider.z1+mv3d.STAIR_THRESH);\r\n\t\t\t\tif(!tileLayers.includes(c.mv3d_collider.l)){ return false; }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(only){\r\n\t\t\tconst value = only(c);\r\n\t\t\tif(value==='break'){isBreak=true;}\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\treturn true;\r\n\t},debug);\r\n\tif(isBreak){ return near; }\r\n\tconst x1 = (collider.x+collider._offset.x-1)/QMovement.tileSize;\r\n\tconst y1 = (collider.y+collider._offset.y-1)/QMovement.tileSize;\r\n\tconst x2 = (collider.x+collider._offset.x+collider.width+1)/QMovement.tileSize;\r\n\tconst y2 = (collider.y+collider._offset.y+collider.height+1)/QMovement.tileSize;\r\n\tif (collider.mv3d_collider)\r\n\tfor (let tx = Math.floor(x1); tx < Math.ceil(x2); ++tx)\r\n\tfor (let ty = Math.floor(y1); ty < Math.ceil(y2); ++ty){\r\n\t\tconst colliderList=_tileColliders[[tx,ty]];\r\n\t\tconst xCollider = _tileColliders[[tx,ty,'x']];\r\n\t\tlet slopeColliders = null;\r\n\t\tlet isWall=false;\r\n\t\tconst tileLayers = mv3d.getTileLayers(tx,ty,collider.mv3d_collider.z1+mv3d.STAIR_THRESH);\r\n\t\tfor(const l of tileLayers){\r\n\t\t\tif( mv3d.getTilePassage(tx,ty,l)===mv3d.enumPassage.WALL ){ isWall=true; }\r\n\t\t\tconst slopeKey = [tx,ty,l,'slope'].toString();\r\n\t\t\tif(slopeKey in _tileColliders){ slopeColliders = _tileColliders[slopeKey]; }\r\n\t\t}\r\n\t\tlet shouldCollide=false;\r\n\t\tif(xCollider&&collider.mv3d_collider.char){\r\n\t\t\tconst char = collider.mv3d_collider.char;\r\n\t\t\tconst opts = {slopeMin:true};\r\n\t\t\tconst platform = char.getPlatform(tx,ty,opts);\r\n\t\t\topts.platform=platform;\r\n\t\t\t// collide if falling\r\n\t\t\tif(char.falling&&!char.char._mv3d_isFlying()){ shouldCollide=true; }\r\n\t\t\t// x passage\r\n\t\t\telse if(isWall && !platform.char){\r\n\t\t\t\tshouldCollide=true;\r\n\t\t\t}\r\n\t\t\t// collide slopes\r\n\t\t\telse if (slopeColliders && !char.platform.char && !platform.char){\r\n\t\t\t\tfor (const c of slopeColliders){\r\n\t\t\t\t\tif(mv3d.WALK_OFF_EDGE && char.z>c.slopeZ1){ continue; }\r\n\t\t\t\t\tlet value=true;\r\n\t\t\t\t\tif(only){ value = only(c); }\r\n\t\t\t\t\tif(value!==false){\r\n\t\t\t\t\t\tnear.push(c);\r\n\t\t\t\t\t\tif(value==='break'){ return near; }\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// collide ledges\r\n\t\t\telse if(!mv3d.WALK_OFF_EDGE && !char.char._mv3d_isFlying() && (!char.platform||!char.platform.isSlope)\r\n\t\t\t&& unround(Math.abs(char.getPlatformFloat(tx,ty,opts)-char.targetElevation))>mv3d.STAIR_THRESH){\r\n\t\t\t\tshouldCollide=true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(shouldCollide){\r\n\t\t\t\tlet value=true;\r\n\t\t\t\tif(only){ value = only(xCollider); }\r\n\t\t\t\tif(value!==false){\r\n\t\t\t\t\tnear.push(xCollider);\r\n\t\t\t\t\tif(value==='break'){ return near; }\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// collide with wall\r\n\t\tif(colliderList) for(let i = 0; i<colliderList.length; ++i){\r\n\t\t\tif(QzCollidersOverlap(collider,colliderList[i])){\r\n\t\t\t\tif(only){\r\n\t\t\t\t\tconst value = only(colliderList[i]);\r\n\t\t\t\t\tif(value!==false){ near.push(colliderList[i]); }\r\n\t\t\t\t\tif(value==='break'){ return near; }\r\n\t\t\t\t}else{\r\n\t\t\t\t\tnear.push(colliderList[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn near;\r\n});\r\n\r\noverride(ColliderManager,'getCharactersNear',o=>function(collider, only){\r\n\treturn o.call(this,collider,char=>{\r\n\t\tconst sprite = char.mv3d_sprite; if(!sprite){ return true; }\r\n\t\tconst c1 = collider.mv3d_collider;\r\n\t\tconst c2 = $gameTemp._mv3d_Q_getCharactersTriggerHeight?sprite.getTriggerHeight():sprite.getCollisionHeight();\r\n\t\tif(!c1||!c2){ return true; }\r\n\t\tif(zCollidersOverlap(c1,c2)===false){ return false; }\r\n\t\tif(only){ return only(char); }\r\n\t\treturn true;\r\n\t});\r\n});\r\n\r\noverride(Game_Player.prototype,'startMapEvent',o=>function(x,y,triggers,normal){\r\n\t$gameTemp._mv3d_Q_getCharactersTriggerHeight=true;\r\n\to.apply(this,arguments);\r\n\t$gameTemp._mv3d_Q_getCharactersTriggerHeight=false;\r\n});\r\n\r\nmv3d.Character.prototype.getPlatform=function(x=this.char._realX,y=this.char._realY,opts={}){\r\n\tconst px = (x-0.5)*QMovement.tileSize;\r\n\tconst py = (y-0.5)*QMovement.tileSize;\r\n\tconst collider = this.char.collider();\r\n\r\n\tconst x1 = (px+collider._offset.x+1)/QMovement.tileSize;\r\n\tconst y1 = (py+collider._offset.y+1)/QMovement.tileSize;\r\n\tconst x2 = (px+collider._offset.x+collider.width-1)/QMovement.tileSize;\r\n\tconst y2 = (py+collider._offset.y+collider.height-1)/QMovement.tileSize;\r\n\t\r\n\tconst platform = [\r\n\t\t//mv3d.getPlatformForCharacter(this,x,y),\r\n\t\tmv3d.getPlatformForCharacter(this,x1,y1,opts),\r\n\t\tmv3d.getPlatformForCharacter(this,x2,y1,opts),\r\n\t\tmv3d.getPlatformForCharacter(this,x2,y2,opts),\r\n\t\tmv3d.getPlatformForCharacter(this,x1,y2,opts),\r\n\t].reduce((a,b)=>a.z2>=b.z2?a:b);\r\n\treturn platform;\r\n};\r\n\r\nmv3d.getEventsAt=function(x,y){\r\n\tlet events;\r\n\ttry{\r\n\t\tevents = ColliderManager._characterGrid[Math.round(x)][Math.round(y)];\r\n\t}catch(err){\r\n\t\treturn [];\r\n\t}\r\n\tif(!events){ return []; }\r\n\treturn events.filter(event=>{\r\n\t\tif(!(event instanceof Game_Event) || event.isThrough()){ return false; }\r\n\t\treturn true;\r\n\t});\r\n};\r\n\r\nmv3d.setDestination=function(x,y){\r\n\t$gameTemp.setPixelDestination(Math.round(x*$gameMap.tileWidth()), Math.round(y*$gameMap.tileHeight()));\r\n};\r\n\r\nconst _clearMouseMove = Game_Player.prototype.clearMouseMove;\r\nGame_Player.prototype.clearMouseMove=function(){\r\n\t_clearMouseMove.apply(this,arguments);\r\n\tif(this._pathfind){\r\n\t\tthis.clearPathfind();\r\n\t}\r\n}\r\n\r\n\r\nconst _QdiagMap={\r\n\t1: [4, 2], 3: [6, 2],\r\n\t7: [4, 8], 9: [6, 8]\r\n};\r\nconst _QMoveVH=o=>function(dir) {\r\n\tif($gameMap.offGrid()){\r\n\t\tthis.mv3d_QMoveRadian(dir);\r\n\t\treturn;\r\n\t}\r\n\tdir=mv3d.transformDirection(dir);\r\n\tif(dir%2){\r\n\t\tconst diag = _QdiagMap[dir];\r\n\t\tthis.moveDiagonally(diag[0], diag[1]);\r\n\t}else{\r\n\t\tthis.moveStraight(dir);\r\n\t}\r\n\t\r\n};\r\noverride(Game_Player.prototype,'moveInputHorizontal',_QMoveVH);\r\noverride(Game_Player.prototype,'moveInputVertical',_QMoveVH);\r\noverride(Game_Player.prototype,'moveInputDiagonal',_QMoveVH);\r\n\r\nGame_Player.prototype.mv3d_QMoveRadian=function(dir,dist=this.moveTiles()){\r\n\tthis.moveRadian(-degtorad(mv3d.blendCameraYaw.currentValue()+90+mv3d.dirToYaw(dir)),dist);\r\n\t//this.mv3d_setDirection(mv3d.transformDirection(dir));\r\n};\r\n\r\noverride(Game_Character.prototype,'moveRadian',o=>function(radian, dist){\r\n\to.apply(this,arguments);\r\n\tconst d = mv3d.yawToDir(radtodeg(-radian)-90,true);\r\n\tthis.mv3d_setDirection(d);\r\n});\r\n\r\noverride(Game_Character.prototype,'moveDiagonally',o=>function(h,v){\r\n\to.apply(this,arguments);\r\n\tconst d = hvtodir(h,v);\r\n\tthis.mv3d_setDirection(d);\r\n});\r\n\r\nif(Game_Follower.prototype.updateMoveList)\r\noverride(Game_Follower.prototype,'updateMoveList',o=>function(){\r\n\tconst move = this._moveList[0];\r\n\to.apply(this,arguments);\r\n\tif(!move){ return; }\r\n\tthis.mv3d_setDirection(move[3]);\r\n});","import { override, unround, degtorad, cos, sin, pointtodeg } from \"../../util\";\r\n\r\noverride(Game_Player.prototype,'moveByInput',o=>function(){\r\n\t$gameTemp._mv3d_altimit_moveByInput=true;\r\n\to.apply(this,arguments);\r\n\t$gameTemp._mv3d_altimit_moveByInput=false;\r\n});\r\n\r\nmv3d.getInputDirection=function(){\r\n\tlet dir = mv3d.DIR8MOVE ? Input.dir8 : Input.dir4;\r\n\treturn dir;\r\n};\r\n\r\noverride(Game_Player.prototype,'moveVector',o=>function(vx,vy){\r\n\tif($gameTemp._mv3d_altimit_moveByInput && !this._touchTarget){\r\n\t\tconst _vx=vx,_vy=vy;\r\n\t\tconst yaw = degtorad(mv3d.blendCameraYaw.currentValue());\r\n\t\tvx=cos(yaw)*_vx + sin(yaw)*_vy;\r\n\t\tvy=-sin(yaw)*_vx + cos(yaw)*_vy;\r\n\t\t//console.log(_vx,_vy,vx,vy);\r\n\t}\r\n\tif(this.mv3d_sprite && this.mv3d_sprite.platform && this.mv3d_sprite.platform.isSlope){\r\n\t\tif(Math.abs(vx)>Math.abs(vy)){ \r\n\t\t\tvx=Math.round(this._x)-this._x+Math.sign(vx);\r\n\t\t\tvy=Math.round(this._y)-this._y;\r\n\t\t}else{\r\n\t\t\tvx=Math.round(this._x)-this._x;\r\n\t\t\tvy=Math.round(this._y)-this._y+Math.sign(vy);\r\n\t\t}\r\n\t\tif($gamePlayer._touchTarget){\r\n\t\t\t$gamePlayer._touchTarget.x=Math.round($gamePlayer._touchTarget.x);\r\n\t\t\t$gamePlayer._touchTarget.y=Math.round($gamePlayer._touchTarget.y);\r\n\t\t}\r\n\t}\r\n\t\r\n\to.call(this,vx,vy);\r\n});\r\n\r\noverride(Game_CharacterBase.prototype,'setDirectionVector',o=>function(vx,vy){\r\n\tthis.mv3d_setDirection(mv3d.yawToDir(pointtodeg(vx,vy),true));\r\n});\r\n\r\noverride(Game_CharacterBase.prototype,'moveVectorMap',o=>function(owner, collider, bboxTests, move, vx, vy){\r\n\to.apply(this,arguments);\r\n\tconst sprite = owner.mv3d_sprite;\r\n\tif(!sprite){ return; }\r\n\r\n\tconst x = Math.floor(owner.x+collider.x);\r\n\tconst y = Math.floor(owner.y+collider.y);\r\n\tconst x1=Math.floor(owner.x+move.x+collider.aabbox.left), x2=Math.ceil(owner.x+move.x+collider.aabbox.right);\r\n\tconst y1=Math.floor(owner.y+move.y+collider.aabbox.top), y2=Math.ceil(owner.y+move.y+collider.aabbox.bottom);\r\n\t\r\n\t//const d = Input._makeNumpadDirection(Math.sign(move.x),Math.sign(move.y));\r\n\t//const d = this.direction();\r\n\r\n\tfor (let tx = x1; tx < x2; ++tx)\r\n\tfor (let ty = y1; ty < y2; ++ty){\r\n\t\tconst d = Input._makeNumpadDirection(Math.sign(tx-x),Math.sign(ty-y));\r\n\t\t//if(tx===x&&ty===y){continue;}\r\n\t\tlet slope;\r\n\t\tlet realign = false;\r\n\t\tif(slope=mv3d.isRampAt(tx,ty,sprite.z)){\r\n\t\t\tif(mv3d.canPassRamp(10-d,slope,{z:sprite.z})){ continue; }\r\n\t\t}\r\n\t\tconst tx2 = $gameMap.roundXWithDirection(tx, 10-d);\r\n\t\tconst ty2 = $gameMap.roundYWithDirection(ty, 10-d);\r\n\t\tif(slope=mv3d.isRampAt(tx2,ty2,sprite.z)){\r\n\t\t\tif(mv3d.canPassRamp(d,slope)){ continue; }\r\n\t\t}\r\n\r\n\t\tlet collided = false;\r\n\t\tif(this._mv3d_isFlying()){\r\n\t\t\tif(!mv3d.ALLOW_GLIDE&&mv3d.tileCollision(this,tx,ty,true,true)||mv3d.tileCollision(this,tx,ty,true,false)){ collided=true; }\r\n\t\t}else{\r\n\t\t\tif(sprite.falling){ collided=true; }\r\n\t\t\telse if(mv3d.tileCollision(this,tx,ty,true,true)){ collided=true; }\r\n\t\t\telse if(!mv3d.WALK_OFF_EDGE){\r\n\t\t\t\tconst platformz = mv3d.getPlatformFloatForCharacter(this,tx,ty);\r\n\t\t\t\tif(unround(Math.abs(platformz-sprite.targetElevation))>mv3d.STAIR_THRESH){\r\n\t\t\t\t\tcollided=true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(collided){\r\n\t\t\tif(tx!==x){ move.x=0; }\r\n\t\t\tif(ty!==y){ move.y=0; }\r\n\t\t}\r\n\t}\r\n});\r\n\r\noverride(Game_CharacterBase.prototype,'moveVectorCharacters',o=>function(owner, collider, characters, loopMap, move){\r\n\tconst spr1=this.mv3d_sprite; if(!spr1){ return o.apply(this,arguments); }\r\n\tconst zcol1=spr1.getCollisionHeight();\r\n\tcharacters=characters.filter(character=>{\r\n\t\tconst spr2 = character.mv3d_sprite; if(!spr2){ return true; }\r\n\t\tconst zcol2=spr2.getCollisionHeight();\r\n\t\treturn zcol1.z1<zcol2.z2&&zcol1.z2>zcol2.z1;\r\n\t});\r\n\treturn o.call(this,owner,collider,characters,loopMap,move);\r\n});\r\n\r\nmv3d.Character.prototype.getPlatform=function(x=this.char._realX,y=this.char._realY,opts={}){\r\n\tconst collider = this.char.collider();\r\n\tif(collider.type===0){\r\n\t\tx+=collider.x-0.5; y+=collider.y-0.5;\r\n\t\tconst r = collider.radius*0.95;\r\n\t\t\r\n\t\tconst platform = [\r\n\t\t\tmv3d.getPlatformForCharacter(this,x,y),\r\n\t\t\tmv3d.getPlatformForCharacter(this,x,y-r,opts),\r\n\t\t\tmv3d.getPlatformForCharacter(this,x-r,y,opts),\r\n\t\t\tmv3d.getPlatformForCharacter(this,x,y+r,opts),\r\n\t\t\tmv3d.getPlatformForCharacter(this,x+r,y,opts),\r\n\t\t]\r\n\t\tconst diagPlatforms = [\r\n\t\t\t-Infinity,\r\n\t\t\tmv3d.getPlatformForCharacter(this,x-r*Math.SQRT1_2,y-r*Math.SQRT1_2,opts),\r\n\t\t\tmv3d.getPlatformForCharacter(this,x-r*Math.SQRT1_2,y+r*Math.SQRT1_2,opts),\r\n\t\t\tmv3d.getPlatformForCharacter(this,x+r*Math.SQRT1_2,y+r*Math.SQRT1_2,opts),\r\n\t\t\tmv3d.getPlatformForCharacter(this,x+r*Math.SQRT1_2,y-r*Math.SQRT1_2,opts),\r\n\t\t].filter(c=>c.z2<=this.z);\r\n\t\treturn platform.concat(diagPlatforms).reduce((a,b)=>a.z2>=b.z2?a:b);\r\n\t}else{\r\n\t\tx-=0.5; y-=0.5;\r\n\t\tconst b = {\r\n\t\t\tl:collider.aabbox.left*0.99,\r\n\t\t\tr:collider.aabbox.right*0.99,\r\n\t\t\tt:collider.aabbox.top*0.99,\r\n\t\t\tb:collider.aabbox.bottom*0.99,\r\n\t\t};\r\n\t\tconst platform = [\r\n\t\t\tmv3d.getPlatformForCharacter(this,x,y),\r\n\t\t\tmv3d.getPlatformForCharacter(this,x+b.l,y+b.t,opts),\r\n\t\t\tmv3d.getPlatformForCharacter(this,x+b.l,y+b.b,opts),\r\n\t\t\tmv3d.getPlatformForCharacter(this,x+b.r,y+b.t,opts),\r\n\t\t\tmv3d.getPlatformForCharacter(this,x+b.r,y+b.b,opts),\r\n\t\t].reduce((a,b)=>a.z2>=b.z2?a:b);\r\n\t\treturn platform;\r\n\t}\r\n};\r\n\r\nmv3d.getEventsAt=function(x,y){\r\n\tx=Math.round(x); y=Math.round(y);\r\n\treturn $gameMap.events().filter( character=>{\r\n\t\tif(character.isThrough()){ return false; }\r\n\t\tconst {x:cx,y:cy}=character;\r\n\t\tconst {left,right,top,bottom}=character.collider().aabbox;\r\n\t\treturn cx+left<x+1 && cx+right>x && cy+top<y+1 && cy+bottom>y;\r\n\t  } );\r\n};\r\n\r\n// give followers through if they fall behind\r\n/*\r\nconst _FOLLOWER_THROUGH_THRESH=3;\r\noverride(Game_Follower.prototype,'isThrough',o=>function(){\r\n\tconst precedingCharacter = (this._memberIndex > 1 ? $gamePlayer._followers._data[this._memberIndex - 2] : $gamePlayer);\r\n\tif(Math.abs(precedingCharacter.x-this.x)+Math.abs(precedingCharacter.y-this.y)>_FOLLOWER_THROUGH_THRESH){ return true; }\r\n\treturn o.apply(this,arguments);\r\n});\r\n*/\r\n\r\nfunction zCollidersOverlap(s1,s2){\r\n\ts1=s1.getCollisionHeight(); s2=s2.getCollisionHeight();\r\n\tif(s1.z1===s1.z2||s2.z1===s2.z2){ return s1.z1<=s2.z2&&s1.z2>=s2.z1 }\r\n\treturn s1.z1<s2.z2&&s1.z2>s2.z1;\r\n}\r\n\r\noverride(Game_Map.prototype,'events',o=>function(){\r\n\tconst events = o.apply(this,arguments);\r\n\tif(!$gameTemp._mv3d_altimit_eventsHeightFilter){ return events; }\r\n\tdelete $gameTemp._mv3d_altimit_eventsHeightFilter;\r\n\tconst player=$gamePlayer.mv3d_sprite;\r\n\tif(!player){ return events; }\r\n\treturn events.filter(e=>{\r\n\t\tconst sprite = e.mv3d_sprite;\r\n\t\tif(!sprite){ return true; }\r\n\t\treturn zCollidersOverlap(sprite,player);\r\n\t});\r\n});\r\n\r\noverride(Game_Event.prototype,'checkEventTriggerTouch',o=>function(){\r\n\tconst sprite = this.mv3d_sprite, player=$gamePlayer.mv3d_sprite;\r\n\tif(sprite&&player){\r\n\t\tif(!zCollidersOverlap(sprite,player)){ return false; }\r\n\t}\r\n\treturn o.apply(this,arguments);\r\n});\r\n\r\nconst _eventsHeightFilter=o=>function(){\r\n\t$gameTemp._mv3d_altimit_eventsHeightFilter=true;\r\n\treturn o.apply(this,arguments);\r\n};\r\noverride(Game_Player.prototype,'checkEventTriggerHere',_eventsHeightFilter);\r\noverride(Game_Player.prototype,'checkEventTriggerThere',_eventsHeightFilter);","import mv3d from '../../mv3d.js';\r\nimport { override, unround, hvtodir, dirtoh, dirtov } from '../../util.js';\r\n\r\nconst _characterBase_canPass = Game_CharacterBase.prototype.canPass\r\nGame_CharacterBase.prototype.canPass = function(x, y, d) {\r\n\r\n\tif(!_characterBase_canPass.apply(this,arguments)){\r\n\t\treturn false;\r\n\t}\r\n\tif (mv3d.isDisabled()||this.isDebugThrough()||this.isThrough()){return true; }\r\n\r\n\treturn true;\r\n};\r\n\r\nfunction charCollidesWithChars(char1,charlist,x,y){\r\n\treturn charlist.some(char2=>{\r\n\t\tconst isPlatform = char2._mv3d_isPlatform();\r\n\t\tif(mv3d.WALK_OFF_EDGE&&!isPlatform){\r\n\t\t\tconst platformHeight = mv3d.getPlatformForCharacter(char1,x,y).z2;\r\n\t\t\tif(mv3d.charCollision(char1,char2,false,platformHeight)){ return true; }\r\n\t\t}\r\n\t\treturn mv3d.charCollision(char1,char2,isPlatform,true);\r\n\t});\r\n}\r\n\r\nconst _isCollidedWithEvents=o=>function(x,y){\r\n\treturn charCollidesWithChars(this,$gameMap.eventsXyNt(x,y),x,y);\r\n};\r\n\r\noverride(Game_CharacterBase.prototype,'isCollidedWithEvents',_isCollidedWithEvents);\r\n\r\noverride(Game_Event.prototype,'isCollidedWithEvents',_isCollidedWithEvents);\r\n\r\noverride(Game_Event.prototype,'isCollidedWithPlayerCharacters',o=>function(x,y){\r\n\tif($gamePlayer.isThrough()){ return false; }\r\n\tconst chars = [$gamePlayer,...$gamePlayer.followers()._data.filter(f=>f.isVisible()&&f.mv3d_sprite&&f.mv3d_sprite.visible)]\r\n\t.filter(char=>char.pos(x,y));\r\n\treturn charCollidesWithChars(this,chars,x,y);\r\n});\r\n\r\noverride(Game_CharacterBase.prototype,'isCollidedWithVehicles',o=>function(x,y){\r\n\tconst boat=$gameMap.boat(), ship=$gameMap.ship();\r\n\treturn boat.posNt(x,y)&&mv3d.charCollision(this,boat,boat._mv3d_isPlatform(),true) || ship.posNt(x,y)&&mv3d.charCollision(this,ship,ship._mv3d_isPlatform(),true);\r\n});\r\n\r\nconst _isMapPassable=o=>function(x,y,d){\r\n\tconst sprite = this.mv3d_sprite;\r\n\tif(!sprite){ return o.apply(this,arguments); }\r\n\r\n\t$gameTemp._mv3d_collision_char = sprite;\r\n\tlet collided = !o.apply(this,arguments);\r\n\tdelete $gameTemp._mv3d_collision_char;\r\n\tif(collided){ return false; }\r\n\r\n\r\n\tlet slope;\r\n\tif(slope=mv3d.isRampAt(x,y,sprite.z)){\r\n\t\tif(mv3d.canPassRamp(d,slope)){ return true; }\r\n\t}\r\n\r\n\tvar x2 = $gameMap.roundXWithDirection(x, d);\r\n\tvar y2 = $gameMap.roundYWithDirection(y, d);\r\n\t\r\n\tif(slope=mv3d.isRampAt(x2,y2,sprite.z)){\r\n\t\tif(mv3d.canPassRamp(10-d,slope,{z:sprite.z})){ return true; }\r\n\t}\r\n\t\r\n\tif(this._mv3d_isFlying()){\r\n\t\tif(!mv3d.ALLOW_GLIDE&&mv3d.tileCollision(this,x2,y2,true,true)||mv3d.tileCollision(this,x2,y2,true,false)){ return false; }\r\n\t}else{\r\n\t\tif(mv3d.tileCollision(this,x2,y2,true,true)){ return false; }\r\n\t\t\r\n\t\tif(sprite.falling){ return false; }\r\n\t\tif(!mv3d.WALK_OFF_EDGE){\r\n\t\t\tconst platformz = mv3d.getPlatformFloatForCharacter(this,x2,y2);\r\n\t\t\tif(unround(Math.abs(platformz-sprite.targetElevation))>mv3d.STAIR_THRESH){\r\n\t\t\t\treturn false; \r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n};\r\n\r\noverride(Game_CharacterBase.prototype,'isMapPassable',_isMapPassable);\r\n\r\noverride(Game_Vehicle.prototype,'isMapPassable',_isMapPassable);\r\n\r\noverride(Game_Player.prototype,'startMapEvent',o=>function(x,y,triggers,normal){\r\n\tif ($gameMap.isEventRunning()) { return; }\r\n\t$gameMap.eventsXy(x,y)\r\n\t.filter(event=>mv3d.charCollision(this,event,false,false,false,true))\r\n\t.forEach(event=>{\r\n\t\tif (event.isTriggerIn(triggers) && event.isNormalPriority() === normal) {\r\n\t\t\tevent.start();\r\n\t\t}\r\n\t});\r\n});\r\n\r\nconst _checkPassage = Game_Map.prototype.checkPassage;\r\nGame_Map.prototype.checkPassage = function(x, y, bit) {\r\n\tif(!('_mv3d_collision_char' in $gameTemp)){\r\n\t\treturn _checkPassage.apply(this,arguments);\r\n\t}\r\n\tconst char = $gameTemp._mv3d_collision_char;\r\n\tconst cHeight = char.getCHeight();\r\n\tconst z = char.z+Math.max(cHeight,mv3d.STAIR_THRESH);\r\n\tconst platform = mv3d.getPlatformForCharacter(char,x,y);\r\n\tif(platform.char){ return true; }\r\n\tvar flags = this.tilesetFlags();\r\n\t//var tiles = this.allTiles(x, y);\r\n\tconst layers = mv3d.getTileLayers(x,y,z,mv3d.STAIR_THRESH>=cHeight);\r\n\tconst tiles = mv3d.getTileData(x,y);\r\n\tfor (var i = layers.length-1; i>=0; --i) {\r\n\t\tconst l=layers[i];\r\n\t\tif(bit&0x0f){\r\n\t\t\tconst conf = mv3d.getTileConfig(x,y,l);\r\n\t\t\tif('pass' in conf){\r\n\t\t\t\t//const passage = mv3d.getTilePassage(x,y,l);\r\n\t\t\t\tif(conf.pass===mv3d.enumPassage.THROUGH){ continue; }\r\n\t\t\t\tif(conf.pass===mv3d.enumPassage.FLOOR){ return true; }\r\n\t\t\t\tif(conf.pass===mv3d.enumPassage.WALL){ return false; }\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst flag = flags[tiles[l]];\r\n\t\tif ((flag & 0x10) !== 0)  // [*] No effect on passage\r\n\t\t\tcontinue;\r\n\t\tif ((flag & bit) === 0)   // [o] Passable\r\n\t\t\treturn true;\r\n\t\tif ((flag & bit) === bit) // [x] Impassable\r\n\t\t\treturn false;\r\n\t}\r\n    return false;\r\n};\r\n\r\nconst _dir8Condition=()=> !mv3d.isDisabled() || mv3d.DIR8MOVE&&mv3d.DIR8_2D;\r\n\r\noverride(Game_Player.prototype,'moveStraight',o=>function(d){\r\n\tif(!mv3d.DIR8MOVE){ return o.apply(this,arguments); }\r\n\tswitch(d){\r\n\t\tcase 1: this.moveDiagonally(4, 2); break;\r\n\t\tcase 3: this.moveDiagonally(6, 2); break;\r\n\t\tcase 7: this.moveDiagonally(4, 8); break;\r\n\t\tcase 9: this.moveDiagonally(6, 8); break;\r\n\t\tdefault: o.apply(this,arguments);\r\n\t}\r\n\t\r\n},_dir8Condition);\r\n\r\noverride(Game_Character.prototype,'moveDiagonally',o=>function(h,v){\r\n\to.apply(this,arguments);\r\n\r\n\tlet adjustDirection=false;\r\n\r\n\tif(this.isMovementSucceeded()){\r\n\t\tadjustDirection=true;\r\n\t}else if(mv3d.DIR8SMART){\r\n\t\tthis.moveStraight(h);\r\n\t\tif(!this.isMovementSucceeded()){\r\n\t\t\tthis.moveStraight(v);\r\n\t\t\tif(!this.isMovementSucceeded()){\r\n\t\t\t\tadjustDirection=true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif(adjustDirection){\r\n\t\tconst d = hvtodir(h,v);\r\n\t\tthis.mv3d_setDirection(d);\r\n\t}\r\n\r\n},_dir8Condition);\r\n\r\noverride(Game_CharacterBase.prototype,'canPassDiagonally',o=>function(x,y,horz,vert){\r\n    const x2 = $gameMap.roundXWithDirection(x, horz);\r\n\tconst y2 = $gameMap.roundYWithDirection(y, vert);\r\n\tif(mv3d.tileCollision(this,x,y2,true,true)||mv3d.tileCollision(this,x2,y,true,true)){\r\n\t\treturn false;\r\n\t}\r\n\treturn o.apply(this,arguments);\r\n});\r\n\r\nconst _dontSnapRealXY=o=>function(){\r\n\tconst realX=this._realX, realY=this._realY;\r\n\to.apply(this,arguments);\r\n\tif(Math.abs(realX-this._realX)>2||Math.abs(realY-this._realY)>2){ return;}\r\n\tthis._realX=realX; this._realY=realY;\r\n};\r\noverride(Game_Follower.prototype,'moveDiagonally',_dontSnapRealXY,_dir8Condition);\r\noverride(Game_Follower.prototype,'moveStraight',_dontSnapRealXY,_dir8Condition);\r\n\r\noverride(Game_CharacterBase.prototype,'distancePerFrame',o=>function(){\r\n\tconst dist = o.apply(this,arguments);\r\n\tif(this._mv3d_direction%2){\r\n\t\treturn dist * Math.SQRT1_2;\r\n\t}\r\n\treturn dist;\r\n},_dir8Condition);\r\n\r\n// triggering\r\n\r\noverride(Game_Player.prototype,'checkEventTriggerThere',o=>function(triggers){\r\n\tif (!this.canStartLocalEvents()) { return; }\r\n\tconst dir = this.mv3d_direction();\r\n\tif(dir%2===0){ return o.apply(this,arguments); }\r\n\tconst horz = dirtoh(dir),vert = dirtov(dir);\r\n\tconst x2 = $gameMap.roundXWithDirection(this.x, horz);\r\n\tconst y2 = $gameMap.roundYWithDirection(this.y, vert);\r\n\tthis.startMapEvent(x2, y2, triggers, true);\r\n\tif(!$gameMap.isAnyEventStarting()){\r\n\t\treturn o.apply(this,arguments);\r\n\t}\r\n},_dir8Condition);\r\n\r\n\r\n// VEHICLES\r\n\r\nconst _airship_land_ok = Game_Map.prototype.isAirshipLandOk;\r\nGame_Map.prototype.isAirshipLandOk = function(x, y) {\r\n\tif (mv3d.isDisabled()){ return _airship_land_ok.apply(this,arguments); }\r\n\tif(mv3d.AIRSHIP_SETTINGS.bushLanding){\r\n\t\treturn this.checkPassage(x, y, 0x0f);\r\n\t}else{\r\n\t\treturn _airship_land_ok.apply(this,arguments);\r\n\t}\r\n\r\n};\r\n\r\nconst _player_updateVehicleGetOn = Game_Player.prototype.updateVehicleGetOn;\r\nGame_Player.prototype.updateVehicleGetOn = function() {\r\n\tif (mv3d.isDisabled()){ return _player_updateVehicleGetOn.apply(this,arguments); }\r\n\tconst vehicle = this.vehicle();\r\n\tconst speed = mv3d.loadData(`${vehicle._type}_speed`,vehicle._moveSpeed);\r\n\tvehicle.setMoveSpeed(speed);\r\n\t_player_updateVehicleGetOn.apply(this,arguments);\r\n\tthis.setThrough(false);\r\n};\r\n\r\n// get on off vehicle\r\n\r\nconst _getOnVehicle = Game_Player.prototype.getOnVehicle;\r\nGame_Player.prototype.getOnVehicle = function(){\r\n\tif(mv3d.isDisabled()){ return _getOnVehicle.apply(this,arguments); }\r\n\tvar d = this.direction();\r\n\tvar x1 = Math.round(this.x);\r\n    var y1 = Math.round(this.y);\r\n    var x2 = $gameMap.roundXWithDirection(x1,d);\r\n\tvar y2 = $gameMap.roundYWithDirection(y1,d);\r\n\t\r\n\tif($gameMap.airship().pos(x1,y1) && mv3d.charCollision(this,$gameMap.airship(),false,false,false,true)){\r\n\t\tthis._vehicleType = 'airship';\r\n\t}else if($gameMap.ship().pos(x2,y2) && mv3d.charCollision(this,$gameMap.ship())) {\r\n\t\tthis._vehicleType = 'ship';\r\n\t}else if($gameMap.boat().pos(x2,y2) && mv3d.charCollision(this,$gameMap.boat())) {\r\n\t\tthis._vehicleType = 'boat';\r\n\t}\r\n\tif (this.isInVehicle()) {\r\n\t\tthis._vehicleGettingOn = true;\r\n\t\tif (!this.isInAirship()) {\r\n\t\t\tthis.forceMoveForward();\r\n\t\t}\r\n\t\tthis.gatherFollowers();\r\n\t}\r\n\treturn this._vehicleGettingOn;\r\n};\r\n\r\n\r\noverride(Game_Vehicle.prototype,'isLandOk',o=>function(x,y,d){\r\n\t$gameTemp._mv3d_collision_char = $gamePlayer.mv3d_sprite;\r\n\tlet landOk = o.apply(this,arguments);\r\n\tdelete $gameTemp._mv3d_collision_char;\r\n\tif (this.isAirship()) { return landOk; }\r\n\tvar x2 = $gameMap.roundXWithDirection(x, d);\r\n\tvar y2 = $gameMap.roundYWithDirection(y, d);\r\n\tconst platform = mv3d.getPlatformForCharacter($gamePlayer,x2,y2);\r\n\tif(platform.char){ landOk=true; }\r\n\tconst diff = Math.abs(platform.z2-this.z);\r\n\treturn landOk && diff<Math.max($gamePlayer.mv3d_sprite.getCHeight(),this.mv3d_sprite.getCHeight());\r\n});","import mv3d from './mv3d.js';\r\nimport { override } from './util.js';\r\n\r\nconst _graphics_createCanvas=Graphics._createCanvas;\r\nGraphics._createCanvas = function() {\r\n\tmv3d.setup();\r\n\tmv3d.updateCanvas();\r\n\t_graphics_createCanvas.apply(this,arguments);\r\n};\r\n\r\nconst _graphics_updateAllElements=Graphics._updateAllElements;\r\nGraphics._updateAllElements = function() {\r\n\t_graphics_updateAllElements.apply(this,arguments);\r\n\tmv3d.updateCanvas();\r\n};\r\n\r\nconst _graphics_render=Graphics.render;\r\nGraphics.render=function(){\r\n\tmv3d.render();\r\n\t_graphics_render.apply(this,arguments);\r\n};\r\n\r\nconst _sceneMap_update=Scene_Map.prototype.update;\r\nScene_Map.prototype.update = function(){\r\n\t_sceneMap_update.apply(this,arguments);\r\n\tif(!mv3d.isDisabled()){\r\n\t\tmv3d.update();\r\n\t}\r\n}\r\n\r\nconst _renderWebGL = ShaderTilemap.prototype.renderWebGL;\r\nShaderTilemap.prototype.renderWebGL = function(renderer) {\r\n\tif(mv3d.mapDisabled){ _renderWebGL.apply(this,arguments); }\r\n};\r\n\r\nconst _createTilemap=Spriteset_Map.prototype.createTilemap;\r\nSpriteset_Map.prototype.createTilemap=function(){\r\n\t_createTilemap.apply(this,arguments);\r\n\tmv3d.mapDisabled = mv3d.isDisabled();\r\n\tmv3d.pixiSprite=new PIXI.Sprite(mv3d.texture);\r\n\tmv3d.pixiSprite.scale.set(1/mv3d.RES_SCALE,1/mv3d.RES_SCALE);\r\n\tmv3d.pixiContainer=new PIXI.Container();\r\n\tmv3d.viewContainer=new PIXI.Container();\r\n\tmv3d.pixiContainer.addChild( mv3d.viewContainer );\r\n\tmv3d.viewContainer.addChild( mv3d.pixiSprite );\r\n\tmv3d.mv_baseSprite = this._baseSprite;\r\n\tif(!mv3d.mapDisabled){\r\n\t\tthis._tilemap.visible=false;\r\n\t\tthis._baseSprite.addChild( mv3d.pixiContainer );\r\n\t}\r\n};\r\n\r\nconst _sprite_char_setchar = Sprite_Character.prototype.setCharacter;\r\nSprite_Character.prototype.setCharacter = function(character) {\r\n\t_sprite_char_setchar.apply(this,arguments);\r\n\tObject.defineProperty(character,'mv_sprite',{\r\n\t\tvalue:this,\r\n\t\tconfigurable:true,\r\n\t\tenumerable:false,\r\n\t});\r\n};\r\n\r\n// Player Transfer\r\n\r\nconst _performTransfer=Game_Player.prototype.performTransfer;\r\nGame_Player.prototype.performTransfer = function() {\r\n\t_performTransfer.apply(this,arguments);\r\n\tif(mv3d.is1stPerson()){\r\n\t\tmv3d.blendCameraYaw.setValue(mv3d.dirToYaw($gamePlayer.direction(),0));\r\n\t}\r\n};\r\n\r\n// On Map Load\r\n\r\nlet tilesetLoaded = false;\r\n\r\nconst _onMapLoaded=Scene_Map.prototype.onMapLoaded;\r\nScene_Map.prototype.onMapLoaded=function(){\r\n\tconst newmap = this._transfer && ( $gamePlayer._newMapId !== $gameMap.mapId() );\r\n\tInput.clear();\r\n\tif(newmap || mv3d.needClearMap){\r\n\t\tmv3d.clearMap();\r\n\t\tmv3d.needClearMap=false;\r\n\t}else if(mv3d.needReloadMap&&mv3d.mapLoaded){\r\n\t\tmv3d.reloadMap();\r\n\t}\r\n\tmv3d.needReloadMap=false;\r\n\ttilesetLoaded = false;\r\n\tif(!mv3d.mapLoaded){\r\n\t\tmv3d.beforeMapLoad(newmap);\r\n\t\tmv3d.loadMapSettings();\r\n\t}\r\n\t_onMapLoaded.apply(this,arguments);\r\n\tif(!tilesetLoaded){ mv3d.loadTilesetSettings(); }\r\n\tif(!mv3d.mapLoaded){\r\n\t\tif(newmap){ mv3d.applyMapSettings(); }\r\n\t\tmv3d.afterMapLoad(newmap);\r\n\t\tif(mv3d.isDisabled()){\r\n\t\t\tmv3d.mapReady=true;\r\n\t\t\t//mv3d.createCharacters();\r\n\t\t}else{\r\n\t\t\tmv3d.mapReady=false;\r\n\t\t\t//mv3d.mapReady=true;\r\n\t\t\tmv3d.loadMap();\r\n\t\t}\r\n\t}\r\n\tmv3d.updateBlenders(true);\r\n};\r\n\r\n// onMapLoaded > performTransfer > map setup\r\n// hook into map setup before Qmovement's setup.\r\nconst _map_battleback_Setup = Game_Map.prototype.setupBattleback;\r\nGame_Map.prototype.setupBattleback=function(){\r\n\t_map_battleback_Setup.apply(this,arguments);\r\n\tmv3d.loadTilesetSettings();\r\n\ttilesetLoaded = true;\r\n};\r\n\r\nconst _onLoadSuccess = Scene_Load.prototype.onLoadSuccess;\r\nScene_Load.prototype.onLoadSuccess = function() {\r\n\t_onLoadSuccess.apply(this,arguments);\r\n\tmv3d.needClearMap=true;\r\n};\r\n\r\nconst _map_isReady = Scene_Map.prototype.isReady;\r\nScene_Map.prototype.isReady = function() {\r\n\tlet ready = _map_isReady.apply(this,arguments);\r\n\treturn ready && mv3d.mapReady;\r\n};\r\n\r\n// Title\r\n\r\nconst _title_start=Scene_Title.prototype.start;\r\nScene_Title.prototype.start = function() {\r\n\t_title_start.apply(this,arguments);\r\n\tmv3d.clearMap();\r\n\tmv3d.clearCameraTarget();\r\n};\r\n\r\nconst _initGraphics = SceneManager.initGraphics;\r\nSceneManager.initGraphics = function() {\r\n\t_initGraphics.apply(this,arguments);\r\n\tif(!Graphics.isWebGL()){\r\n\t\tthrow new Error(\"MV3D requires WebGL\");\r\n\t}\r\n};\r\n\r\n// force webgl\r\nSceneManager.preferableRendererType = function() {\r\n    if (Utils.isOptionValid('canvas')) {\r\n        return 'canvas';\r\n    } else if (Utils.isOptionValid('webgl')) {\r\n        return 'webgl';\r\n    } else {\r\n\t\tif(Graphics.hasWebGL()){ return 'webgl'; }\r\n        return 'auto';\r\n    }\r\n};","import mv3d from './mv3d.js';\r\n\r\nmv3d.attributes={};\r\n\r\nexport class Attribute{\r\n\tconstructor(name,dfault,reader){\r\n\t\tthis.name=name.toLowerCase();\r\n\t\tthis.reader = reader?reader:v=>v;\r\n\t\tthis.default=this.reader(dfault);\r\n\t\tthis.descriptor={\r\n\t\t\tget:()=>this.get(),\r\n\t\t\tset:v=>this.set(this.reader(v)),\r\n\t\t};\r\n\t\tObject.defineProperty(mv3d.attributes,this.name,this.descriptor);\r\n\t}\r\n\tget(){\r\n\t\tconst storage = Attribute.getStorageLocation();\r\n\t\tif(!storage || !(this.name in storage)){ return this.default; }\r\n\t\treturn storage[this.name];\r\n\t}\r\n\tset(v){\r\n\t\tconst storage = Attribute.getStorageLocation();\r\n\t\tif (!storage){console.warn(`MV3D: Couldn't get Attribute storage location.`); return;}\r\n\t\tstorage[this.name]=v;\r\n\t}\r\n\tstatic getStorageLocation(){\r\n\t\tif(!$gameVariables){ return null; }\r\n\t\tif(!$gameVariables.mv3d_attributes){ $gameVariables.mv3d_attributes = {}; }\r\n\t\treturn $gameVariables.mv3d_attributes;\r\n\t}\r\n}\r\nmv3d.Attribute = Attribute;","import mv3d from './mv3d.js';\r\nimport { booleanString,falseString, makeColor, degtorad, tileSize, assign } from './util.js';\r\nimport { ORTHOGRAPHIC_CAMERA } from './mod_babylon.js';\r\nimport { Attribute } from './attributes.js';\r\n\r\nlet pluginName = 'mv3d';\r\nif(!PluginManager._scripts.includes(\"mv3d\")){\r\n\tif(PluginManager._scripts.includes(\"mv3d-babylon\")){ pluginName='mv3d-babylon'; }\r\n}\r\n\r\nconst parameters = PluginManager.parameters(pluginName);\r\nexport default parameters;\r\n\r\nfunction parameter(name,dfault,type){\r\n\treturn name in parameters ? (type?type(parameters[name]):parameters[name]) : dfault;\r\n}\r\n\r\nObject.assign(mv3d,{\r\n\tenumOptionModes:{\r\n\t\tDISABLE: 0,\r\n\t\tENABLE: 1,\r\n\t\tSUBMENU: 2,\r\n\t}\r\n});\r\n\r\nassign(mv3d,{\r\n\tCAMERA_MODE:\"PERSPECTIVE\",\r\n\tORTHOGRAPHIC_DIST:100,\r\n\tMV3D_FOLDER:\"img/MV3D\",\r\n\r\n\tANIM_DELAY:Number(parameters.animDelay),\r\n\tALPHA_CUTOFF:Math.max(0.01,parameters.alphatest),\r\n\r\n\tEDGE_FIX: Number(parameters.edgefix)*tileSize()/48,\r\n\tANTIALIASING: booleanString(parameters.antialiasing),\r\n\tFOV:Number(parameters.fov),\r\n\tRES_SCALE: parameter('resScale',1,Number)||1,\r\n\r\n\tWALL_HEIGHT:Number(parameters.wallHeight),\r\n\tTABLE_HEIGHT:Number(parameters.tableHeight),\r\n\tFRINGE_HEIGHT:Number(parameters.fringeHeight),\r\n\tCEILING_HEIGHT:Number(parameters.ceilingHeight),\r\n\tLAYER_DIST:Number(parameters.layerDist),\r\n\r\n\tENABLED_DEFAULT: booleanString(parameters.enabledDefault),\r\n\tEVENTS_UPDATE_NEAR: booleanString(parameters.eventsUpdateNear),\r\n\r\n\tUNLOAD_CELLS: booleanString(parameters.unloadCells),\r\n\tCELL_SIZE: Number(parameters.cellSize),\r\n\tRENDER_DIST: Number(parameters.renderDist),\r\n\tMIPMAP:booleanString(parameters.mipmap),\r\n\r\n\tget renderDist(){ return Math.min(this.RENDER_DIST, mv3d.blendFogFar.currentValue()+7.5); },\r\n\r\n\tOPTION_MIPMAP:booleanString(parameters.mipmapOption),\r\n\tOPTION_NAME_MIPMAP: parameter('mipmapOptionName',\"Mipmapping\",String),\r\n\tOPTION_RENDER_DIST: parameter('renderDistOption',true,booleanString),\r\n\tOPTION_NAME_RENDER_DIST: parameter('renderDistOptionName',\"Render Distance\",String),\r\n\tOPTION_RENDER_DIST_MIN: parameter('renderDistMin',10,Number),\r\n\tOPTION_RENDER_DIST_MAX: parameter('renderDistMax',100,Number),\r\n\tOPTION_FOV: parameter('fovOption',false,booleanString),\r\n\tOPTION_NAME_FOV: parameter('fovOptionName',\"FOV\",String),\r\n\tOPTION_FOV_MIN: parameter('fovMin',50,Number),\r\n\tOPTION_FOV_MAX: parameter('fovMax',100,Number),\r\n\r\n\tSTAIR_THRESH: Number(parameters.stairThresh),\r\n\tWALK_OFF_EDGE:booleanString(parameters.walkOffEdge),\r\n\tWALK_ON_EVENTS:booleanString(parameters.walkOnEvents),\r\n\tGRAVITY:Number(parameters.gravity),\r\n\r\n\tFOG_COLOR: makeColor(parameters.fogColor).toNumber(),\r\n\tFOG_NEAR: Number(parameters.fogNear),\r\n\tFOG_FAR: Number(parameters.fogFar), \r\n\t//AMBIENT_COLOR: makeColor(parameters.ambientColor).toNumber(),\r\n\tget AMBIENT_COLOR(){ return mv3d.featureEnabled('dynamicShadows')?0x888888:0xffffff; },\r\n\r\n\tLIGHT_LIMIT: Number(parameters.lightLimit),\r\n\tLIGHT_HEIGHT: 0.5,\r\n\tLAMP_HEIGHT: 0.5,\r\n\tFLASHLIGHT_HEIGHT: 0.25,\r\n\tLIGHT_DECAY: 1,\r\n\tLIGHT_DIST: 3,\r\n\tLIGHT_ANGLE: 60,\r\n\tFLASHLIGHT_EXTRA_ANGLE: 10,\r\n\tFLASHLIGHT_INTENSITY_MULTIPLIER: 2,\r\n\r\n\tREGION_DATA:{},\r\n\t_REGION_DATA:{},\r\n\t_REGION_DATA_MAP:{},\r\n\tTTAG_DATA:{},\r\n\r\n\tEVENT_HEIGHT:Number(parameters.eventHeight),\r\n\t//VEHICLE_BUSH:booleanString(parameters.vehicleBush),\r\n\tBOAT_SETTINGS:JSON.parse(parameters.boatSettings),\r\n\tSHIP_SETTINGS:JSON.parse(parameters.shipSettings),\r\n\tAIRSHIP_SETTINGS:JSON.parse(parameters.airshipSettings),\r\n\r\n\tALLOW_GLIDE: booleanString(parameters.allowGlide),\r\n\r\n\tSPRITE_OFFSET:Number(parameters.spriteOffset)/2,\r\n\r\n\tENABLE_3D_OPTIONS:mv3d.enumOptionModes[parameters['3dMenu'].toUpperCase()],\r\n\r\n\tTEXTURE_SHADOW: parameters.shadowTexture||'shadow',\r\n\tTEXTURE_BUSHALPHA: parameters.alphaMask||'bushAlpha',\r\n\tTEXTURE_ERROR: parameters.errorTexture||'errorTexture',\r\n\r\n\tdiagonalMovement: new Attribute('diagonalMovement',String(parameters.dir8Movement),function(v){\r\n\t\tv=String(v).toUpperCase();\r\n\t\treturn {\r\n\t\t\tenabled:booleanString(v),\r\n\t\t\tsmart:v.includes('SMART'),\r\n\t\t\t'2D':!v.includes('3D'),\r\n\t\t}\r\n\t}),\r\n\tget DIR8MOVE(){ return this.diagonalMovement.enabled; },\r\n\tget DIR8SMART(){ return this.diagonalMovement.smart; },\r\n\tget DIR8_2D(){ return this.diagonalMovement['2D']; },\r\n\r\n\tturnIncrement: new Attribute('turnIncrement',String(parameters.turnIncrement),v=>Number(v)),\r\n\tget TURN_INCREMENT(){ return mv3d.turnIncrement; },\r\n\tWASD: booleanString(parameters.WASD),\r\n\r\n\tKEYBOARD_PITCH: booleanString(parameters.keyboardPitch),\r\n\tKEYBOARD_TURN: falseString(parameters.keyboardTurn),\r\n\tKEYBOARD_STRAFE: falseString(parameters.keyboardStrafe),\r\n\r\n\tYAW_SPEED: Number(parameters.yawSpeed)||90,\r\n\tPITCH_SPEED: Number(parameters.pitchSpeed)||90,\r\n\r\n\tTRIGGER_INFINITE: !booleanString(parameters.heightTrigger),\r\n\r\n\tBACKFACE_CULLING: parameter('backfaceCulling',true,booleanString),\r\n\tcameraCollision: new Attribute('cameraCollision',String(parameters.cameraCollision),function(v){\r\n\t\tif(typeof v === 'string'){\r\n\t\t\tconst values=v.split(' '); v=values[0];\r\n\t\t\tconst ret = {type:!booleanString(v)?0:Number((v.match(/\\d+/)||'1')[0])};\r\n\t\t\tfor (let v of values)if(v.toUpperCase().includes(\"SMOOTH\")){ ret.smooth=true; }\r\n\t\t\treturn ret;\r\n\t\t}else if(typeof v == 'object'){\r\n\t\t\treturn Object.assign(this.get(),v);\r\n\t\t}\r\n\t\tconst ret = this.get(); ret.type=Number(v); return ret;\r\n\t}),\r\n\r\n\tDIAG_SYMBOL: parameter('diagSymbol','{d}',String),\r\n\r\n\tsetupParameters(){\r\n\t\tthis.REGION_DATA=new Proxy(this._REGION_DATA,{\r\n\t\t\tget:(target,key)=>{\r\n\t\t\t\tif(key in this._REGION_DATA_MAP){ return this._REGION_DATA_MAP[key]; }\r\n\t\t\t\tif(key in this._REGION_DATA){ return this._REGION_DATA[key]; }\r\n\t\t\t},\r\n\t\t\tset:(target,key,value)=>{\r\n\t\t\t\ttarget[key]=value;\r\n\t\t\t},\r\n\t\t\thas:(target,key)=>{\r\n\t\t\t\treturn key in this._REGION_DATA_MAP || key in this._REGION_DATA;\r\n\t\t\t},\r\n\t\t});\r\n\t\tfor (let entry of JSON.parse(parameters.regions)){\r\n\t\t\tentry=JSON.parse(entry);\r\n\t\t\tconst regionData = this.readConfigurationFunctions(entry.conf,this.tilesetConfigurationFunctions)\r\n\t\t\tthis._REGION_DATA[entry.regionId]=regionData;\r\n\t\t\t\r\n\t\t}\r\n\t\tfor (let entry of JSON.parse(parameters.ttags)){\r\n\t\t\tentry=JSON.parse(entry);\r\n\t\t\tthis.TTAG_DATA[entry.terrainTag]=this.readConfigurationFunctions(entry.conf,this.tilesetConfigurationFunctions);\r\n\t\t}\r\n\r\n\t\tthis.EVENT_CHAR_SETTINGS = this.readConfigurationFunctions(\r\n\t\t\tparameters.eventCharDefaults,\r\n\t\t\tthis.eventConfigurationFunctions,\r\n\t\t);\r\n\t\tthis.EVENT_OBJ_SETTINGS = this.readConfigurationFunctions(\r\n\t\t\tparameters.eventObjDefaults,\r\n\t\t\tthis.eventConfigurationFunctions,\r\n\t\t);\r\n\t\tthis.EVENT_TILE_SETTINGS = this.readConfigurationFunctions(\r\n\t\t\tparameters.eventTileDefaults,\r\n\t\t\tthis.eventConfigurationFunctions,\r\n\t\t);\r\n\r\n\t\tthis.BOAT_SETTINGS.big=booleanString(this.BOAT_SETTINGS.big);\r\n\t\tthis.SHIP_SETTINGS.big=booleanString(this.SHIP_SETTINGS.big);\r\n\t\tthis.AIRSHIP_SETTINGS.height=Number(this.AIRSHIP_SETTINGS.height);\r\n\t\tthis.AIRSHIP_SETTINGS.big=booleanString(this.AIRSHIP_SETTINGS.big);\r\n\t\tthis.AIRSHIP_SETTINGS.bushLanding=booleanString(this.AIRSHIP_SETTINGS.bushLanding);\r\n\r\n\t\tthis.BOAT_SETTINGS.conf = this.readConfigurationFunctions(\r\n\t\t\tthis.BOAT_SETTINGS.conf,\r\n\t\t\tthis.eventConfigurationFunctions,\r\n\t\t);\r\n\t\tthis.SHIP_SETTINGS.conf = this.readConfigurationFunctions(\r\n\t\t\tthis.SHIP_SETTINGS.conf,\r\n\t\t\tthis.eventConfigurationFunctions,\r\n\t\t);\r\n\t\tthis.AIRSHIP_SETTINGS.conf = this.readConfigurationFunctions(\r\n\t\t\tthis.AIRSHIP_SETTINGS.conf,\r\n\t\t\tthis.eventConfigurationFunctions,\r\n\t\t);\r\n\r\n\t\t//Texture.DEFAULT_ANISOTROPIC_FILTERING_LEVEL=0;\r\n\t},\r\n\r\n\tupdateParameters(){\r\n\t\tthis.updateRenderDist();\r\n\t\tthis.updateFov();\r\n\t\tthis.callFeatures('updateParameters');\r\n\t},\r\n\tupdateRenderDist(){\r\n\t\tif(this.camera.mode===ORTHOGRAPHIC_CAMERA){\r\n\t\t\tthis.camera.maxZ=this.renderDist;\r\n\t\t\tthis.camera.minZ=-this.renderDist;\r\n\t\t}else{\r\n\t\t\tthis.camera.maxZ=this.renderDist;\r\n\t\t\tthis.camera.minZ=0.1;\r\n\t\t}\r\n\t},\r\n\tupdateFov(){\r\n\t\tconst dist = this.blendCameraDist.currentValue()||0.1;\r\n\t\tconst frustrumHeight = this.getFrustrumHeight(dist,degtorad(this.FOV));\r\n\t\tconst fov = this.getFovForDist(dist,frustrumHeight/this.blendCameraZoom.currentValue());\r\n\t\tthis.camera.fov=fov;\r\n\t},\r\n});\r\n","import mv3d from './mv3d.js';\r\nimport { ZAxis, XAxis } from \"./util.js\";\r\nimport { ORTHOGRAPHIC_CAMERA, LOCALSPACE, Ray, Vector3 } from './mod_babylon.js';\r\n\r\nconst raycastPredicate=mesh=>{\r\n\tif(!mesh.isEnabled() || !mesh.isVisible || !mesh.isPickable || mesh.character){ return false; }\r\n\treturn true;\r\n}\r\n\r\nObject.assign(mv3d,{\r\n\r\n\tcameraTargets:[],\r\n\tgetCameraTarget(){\r\n\t\treturn this.cameraTargets[0];\r\n\t},\r\n\tsetCameraTarget(char,time){\r\n\t\tif(!char){ this.cameraTargets.length=0; return; }\r\n\t\tthis.cameraTargets.unshift(char);\r\n\t\tif(this.cameraTargets.length>2){ this.cameraTargets.length=2; }\r\n\t\tthis.saveData('cameraTarget',this.getTargetString(char));\r\n\t\tthis.blendCameraTransition.value=1;\r\n\t\tthis.blendCameraTransition.setValue(0,time);\r\n\t},\r\n\tclearCameraTarget(){\r\n\t\tthis.cameraTargets.length=0;\r\n\t},\r\n\tresetCameraTarget(){\r\n\t\tthis.clearCameraTarget();\r\n\t\tthis.setCameraTarget($gamePlayer,0);\r\n\t},\r\n\trememberCameraTarget(){\r\n\t\tconst target = this.loadData('cameraTarget');\r\n\t\tif(target){\r\n\t\t\tthis.setCameraTarget(this.targetChar(target),0);\r\n\t\t}\r\n\t},\r\n\r\n\tsetupBlenders(){\r\n\t\tthis.blendFogColor = new ColorBlender('fogColor',this.FOG_COLOR);\r\n\t\tthis.blendFogNear = new Blender('fogNear',this.FOG_NEAR);\r\n\t\tthis.blendFogFar = new Blender('fogFar',this.FOG_FAR);\r\n\t\tthis.blendCameraRoll = new Blender('cameraRoll',0);\r\n\t\tthis.blendCameraRoll.cycle=360;\r\n\t\tthis.blendCameraYaw = new Blender('cameraYaw',0);\r\n\t\tthis.blendCameraYaw.cycle=360;\r\n\t\tthis.blendCameraPitch = new Blender('cameraPitch',60);\r\n\t\tthis.blendCameraPitch.min=0;\r\n\t\tthis.blendCameraPitch.max=180;\r\n\t\tthis.blendCameraDist = new Blender('cameraDist',10);\r\n\t\tthis.blendCameraZoom = new Blender('cameraZoom',1);\r\n\t\tthis.blendCameraDist.min=0;\r\n\t\tthis.blendCameraHeight = new Blender('cameraHeight',0.7);\r\n\t\tthis.blendAmbientColor = new ColorBlender('ambientColor',this.AMBIENT_COLOR);\r\n\t\tthis.blendPanX = new Blender('panX',0);\r\n\t\tthis.blendPanY = new Blender('panY',0);\r\n\t\tthis.blendCameraTransition = new Blender('cameraTransition',0);\r\n\t\tthis.blendResolutionScale = new Blender('resolutionScale',mv3d.RES_SCALE);\r\n\t},\r\n\r\n    updateBlenders(reorient){\r\n\t\tthis.updateCameraMode();\r\n\t\t// camera target & pan\r\n\t\tif(!this.cameraTargets.length){\r\n\t\t\tif($gamePlayer){\r\n\t\t\t\tthis.cameraTargets[0]=$gamePlayer;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this.blendCameraTransition.update() && this.cameraTargets.length>=2){\r\n\t\t\tconst t = this.blendCameraTransition.currentValue();\r\n\t\t\tlet char1=this.cameraTargets[0];\r\n\t\t\t//if(char1===$gamePlayer&&$gamePlayer.isInVehicle()){ char1=$gamePlayer.vehicle(); }\r\n\t\t\tlet char2=this.cameraTargets[1];\r\n\t\t\t//if(char2===$gamePlayer&&$gamePlayer.isInVehicle()){ char2=$gamePlayer.vehicle(); }\r\n\t\t\tthis.cameraStick.x = char1._realX*(1-t) + char2._realX*t;\r\n\t\t\tthis.cameraStick.y = char1._realY*(1-t) + char2._realY*t;\r\n\t\t\tif(char1.mv3d_sprite&&char2.mv3d_sprite){\r\n\t\t\t\tthis.cameraStick.z = char1.mv3d_sprite.z*(1-t) + char2.mv3d_sprite.z*t;\r\n\t\t\t}else if(char1.mv3d_sprite){\r\n\t\t\t\tthis.cameraStick.z=char1.mv3d_sprite.z;\r\n\t\t\t}\r\n\t\t}else if(this.cameraTargets.length){\r\n\t\t\tlet char = this.getCameraTarget();\r\n\t\t\t//if(char===$gamePlayer&&$gamePlayer.isInVehicle()){ char=$gamePlayer.vehicle(); }\r\n\t\t\tthis.cameraStick.x=char._realX;\r\n\t\t\tthis.cameraStick.y=char._realY;\r\n\t\t\tif(char.mv3d_sprite){\r\n\t\t\t\tthis.cameraStick.z=char.mv3d_sprite.z;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.blendPanX.update();\r\n\t\tthis.blendPanY.update();\r\n\t\tthis.cameraStick.x+=this.blendPanX.currentValue();\r\n\t\tthis.cameraStick.y+=this.blendPanY.currentValue();\r\n\r\n\t\t// camera yaw, pitch, dist & height\r\n\t\tif(reorient|this.blendCameraPitch.update()|this.blendCameraYaw.update()|this.blendCameraRoll.update()\r\n\t\t|this.blendCameraDist.update()|this.blendCameraHeight.update()|this.blendCameraZoom.update()\r\n\t\t|$gameScreen._shake!==0\r\n\t\t|(mv3d.cameraCollision.type&&$gamePlayer.mv3d_positionUpdated)){\r\n\t\t\tthis.cameraNode.pitch = this.blendCameraPitch.currentValue()-90;\r\n\t\t\tthis.cameraNode.yaw = this.blendCameraYaw.currentValue();\r\n\t\t\tthis.cameraNode.roll = this.blendCameraRoll.currentValue();\r\n\t\t\tthis.cameraNode.position.set(0,0,0);\r\n\t\t\tlet dist = this.blendCameraDist.currentValue();\r\n\t\t\tif(mv3d.cameraCollision.type){\r\n\t\t\t\tlet doCollide = true;\r\n\t\t\t\tif(mv3d.cameraCollision.type>1){\r\n\t\t\t\t\tthis.cameraNode.translate(ZAxis,-dist,LOCALSPACE);\r\n\t\t\t\t\tconst gpos = mv3d.globalPosition(this.cameraNode);\r\n\t\t\t\t\tthis.cameraNode.position.set(0,0,0);\r\n\t\t\t\t\tconst z = mv3d.getWalkHeight(gpos.x,-gpos.z);\r\n\t\t\t\t\tif(gpos.y>z){doCollide=false;}\r\n\t\t\t\t\t//if(Date.now()%10===0)console.log(gpos,z);\r\n\t\t\t\t}\r\n\t\t\t\tif(doCollide){\r\n\t\t\t\t\tconst raycastOrigin = new Vector3().copyFrom(this.cameraStick.position);\r\n\t\t\t\t\traycastOrigin.y+=this.blendCameraHeight.currentValue()+0.1;\r\n\t\t\t\t\tconst ray = new Ray(raycastOrigin, Vector3.TransformCoordinates(mv3d.camera.getTarget().negate(),mv3d.getRotationMatrix(mv3d.camera)),dist);\r\n\t\t\t\t\tconst intersections = mv3d.scene.multiPickWithRay(ray,raycastPredicate);\r\n\t\t\t\t\tfor (const intersection of intersections){\r\n\t\t\t\t\t\tif(!intersection.hit){ continue; }\r\n\t\t\t\t\t\tlet material = intersection.pickedMesh.material; if(!material){ continue; }\r\n\t\t\t\t\t\tif(material.subMaterials){\r\n\t\t\t\t\t\t\tmaterial = material.subMaterials[intersection.pickedMesh.subMeshes[intersection.subMeshId].materialIndex];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(material.mv3d_through){ continue; }\r\n\t\t\t\t\t\tdist=intersection.distance;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this.cameraCollision.smooth){\r\n\t\t\t\tif(this.camera.dist==null){this.camera.dist=dist;}\r\n\t\t\t\tthis.camera.dist=this.camera.dist+(dist-this.camera.dist)/2;\r\n\t\t\t\tdist=this.camera.dist;\r\n\t\t\t}\r\n\t\t\tthis.cameraNode.translate(ZAxis,-dist,LOCALSPACE);\r\n\t\t\tif(this.camera.mode===ORTHOGRAPHIC_CAMERA){\r\n\t\t\t\tconst fieldSize = this.getFieldSize();\r\n\t\t\t\tthis.camera.orthoLeft=-fieldSize.width/2;\r\n\t\t\t\tthis.camera.orthoRight=fieldSize.width/2;\r\n\t\t\t\tthis.camera.orthoTop=fieldSize.height/2;\r\n\t\t\t\tthis.camera.orthoBottom=-fieldSize.height/2;\r\n\t\t\t}else{\r\n\t\t\t\tif(this.cameraNode.z<0){ this.cameraNode.z=0; }\r\n\t\t\t}\r\n\t\t\tthis.cameraNode.z += this.blendCameraHeight.currentValue();\r\n\t\t\tthis.cameraNode.translate(XAxis,-$gameScreen._shake/48,LOCALSPACE);\r\n\t\t\tthis.updateDirection();\r\n\t\t\tthis.updateFov();\r\n\t\t}\r\n\r\n\t\t//fog\r\n\t\tif(reorient|this.blendFogColor.update()|this.blendFogNear.update()|this.blendFogFar.update()){\r\n\t\t\tif(mv3d.hasAlphaFog){\r\n\t\t\t\tthis.scene.fogStart=this.blendFogNear.currentValue();\r\n\t\t\t\tthis.scene.fogEnd=this.blendFogFar.currentValue();\r\n\t\t\t}else{\r\n\t\t\t\tthis.scene.fogStart=Math.min(mv3d.RENDER_DIST-1,this.blendFogNear.currentValue());\r\n\t\t\t\tthis.scene.fogEnd=Math.min(mv3d.RENDER_DIST,this.blendFogFar.currentValue());\r\n\t\t\t}\r\n\t\t\tthis.scene.fogColor.copyFromFloats(\r\n\t\t\t\tthis.blendFogColor.r.currentValue()/255,\r\n\t\t\t\tthis.blendFogColor.g.currentValue()/255,\r\n\t\t\t\tthis.blendFogColor.b.currentValue()/255,\r\n\t\t\t);\r\n\t\t\tmv3d.updateClearColor();\r\n\t\t\tmv3d.updateRenderDist();\r\n\t\t}\r\n\r\n\t\t//light\r\n\t\tif(reorient|this.blendAmbientColor.update()){\r\n\t\t\tthis.scene.ambientColor.copyFromFloats(\r\n\t\t\t\tthis.blendAmbientColor.r.currentValue()/255,\r\n\t\t\t\tthis.blendAmbientColor.g.currentValue()/255,\r\n\t\t\t\tthis.blendAmbientColor.b.currentValue()/255,\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// res scale\r\n\t\tif(reorient|this.blendResolutionScale.update()){\r\n\t\t\tconst resScale=this.blendResolutionScale.currentValue();\r\n\t\t\tmv3d.RES_SCALE=resScale;\r\n\t\t\tmv3d.pixiSprite.scale.set(1/resScale,1/resScale);\r\n\t\t\tmv3d.updateCanvas();\r\n\t\t}\r\n\r\n\t\tthis.callFeatures('blend',reorient);\r\n\t},\r\n\r\n\tupdateClearColor(){\r\n\t\tif($gameMap.parallaxName()||mv3d.hasSkybox){\r\n\t\t\tif(mv3d.hasAlphaFog){\r\n\t\t\t\tmv3d.scene.clearColor.set(...mv3d.blendFogColor.currentComponents(),0);\r\n\t\t\t}else{\r\n\t\t\t\tmv3d.scene.clearColor.set(0,0,0,0);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tmv3d.scene.clearColor.set(...mv3d.blendFogColor.currentComponents(),1);\r\n\t\t}\r\n\t},\r\n\r\n});\r\n\r\nconst _changeParallax = Game_Map.prototype.changeParallax;\r\nGame_Map.prototype.changeParallax = function() {\r\n\t_changeParallax.apply(this,arguments);\r\n\tmv3d.updateClearColor();\r\n};\r\n\r\n\r\nexport class Blender{\r\n\tconstructor(key,dfault,track=true){\r\n\t\tthis.key=key;\r\n\t\tthis.dfault=mv3d.loadData(key,dfault);\r\n\t\tthis.value=dfault;\r\n\t\tthis.speed=1;\r\n\t\tthis.max=Infinity;\r\n\t\tthis.min=-Infinity;\r\n\t\tthis.cycle=false;\r\n\t\tthis.changed=false;\r\n\t\tif(track){\r\n\t\t\tBlender.list.push(this);\r\n\t\t}\r\n\t}\r\n\tsetValue(target,time=0){\r\n\t\ttarget = Math.min(this.max,Math.max(this.min,target));\r\n\t\tlet diff = target - this.value;\r\n\t\tthis.saveValue(this.key,target);\r\n\t\tif(!time){ this.changed=true; this.value=target; }\r\n\t\tif(this.cycle){\r\n\t\t\twhile ( Math.abs(diff)>this.cycle/2 ){\r\n\t\t\t\tthis.value += Math.sign(diff)*this.cycle;\r\n\t\t\t\tdiff = target - this.value;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.speed = Math.abs(diff)/(60*time);\r\n\t}\r\n\tcurrentValue(){ return this.value; }\r\n\ttargetValue(){ return this.loadValue(this.key); }\r\n\tdefaultValue(){ return this.dfault; }\r\n\tupdate(){\r\n\t\tconst target = this.targetValue();\r\n\t\tif(this.value===target){ \r\n\t\t\tif(this.changed){\r\n\t\t\t\tthis.updated=true;\r\n\t\t\t\tthis.changed=false;\r\n\t\t\t\treturn true;\r\n\t\t\t}else{\r\n\t\t\t\tthis.updated=false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst diff = target - this.value;\r\n\t\tif(isNaN(this.speed)){ this.speed=Infinity; }\r\n\t\tif(this.speed > Math.abs(diff)){\r\n\t\t\tthis.value=target;\r\n\t\t}else{\r\n\t\t\tthis.value+=this.speed*Math.sign(diff);\r\n\t\t}\r\n\t\tthis.updated=true;\r\n\t\treturn true;\r\n\t}\r\n\tstorageLocation(){\r\n\t\tif(!$gameVariables){\r\n\t\t\tconsole.warn(`MV3D: Couldn't get Blend storage location.`);\r\n\t\t\treturn {};\r\n\t\t}\r\n\t\tif(!$gameVariables.mv3d){ $gameVariables.mv3d = {}; }\r\n\t\treturn $gameVariables.mv3d;\r\n\t}\r\n\tloadValue(key){\r\n\t\tconst storage = this.storageLocation();\r\n\t\tif(!(key in storage)){ return this.dfault; }\r\n\t\treturn storage[key];\r\n\t}\r\n\tsaveValue(key,value){\r\n\t\tconst storage = this.storageLocation();\r\n\t\tstorage[key]=value;\r\n\t}\r\n\tstatic reset(){\r\n\t\tfor (const blender of Blender.list){\r\n\t\t\tblender.speed=Infinity;\r\n\t\t}\r\n\t}\r\n}\r\nBlender.list = [];\r\n\r\nexport class ColorBlender{\r\n\tconstructor(key,dfault,track=true){\r\n\t\tthis.dfault=dfault;\r\n\t\tthis.r=new Blender(`${key}_r`,dfault>>16,track);\r\n\t\tthis.g=new Blender(`${key}_g`,dfault>>8&0xff,track);\r\n\t\tthis.b=new Blender(`${key}_b`,dfault&0xff,track);\r\n\t}\r\n\tsetValue(color,time){\r\n\t\tthis.r.setValue(color>>16,time);\r\n\t\tthis.g.setValue(color>>8&0xff,time);\r\n\t\tthis.b.setValue(color&0xff,time);\r\n\t}\r\n\tcurrentValue(){\r\n\t\treturn this.r.value<<16|this.g.value<<8|this.b.value;\r\n\t}\r\n\ttargetValue(){\r\n\t\treturn this.r.targetValue()<<16|this.g.targetValue()<<8|this.b.targetValue();\r\n\t}\r\n\tdefaultValue(){ return this.dfault; }\r\n\tupdate(){\r\n\t\tlet ret=0;\r\n\t\tret|=this.r.update();\r\n\t\tret|=this.g.update();\r\n\t\tret|=this.b.update();\r\n\t\treturn Boolean(ret);\r\n\t}\r\n\tget storageLocation(){ return this.r.storageLocation; }\r\n\tset storageLocation(v){\r\n\t\tthis.r.storageLocation=v;\r\n\t\tthis.g.storageLocation=v;\r\n\t\tthis.b.storageLocation=v;\r\n\t}\r\n\tcurrentComponents(){\r\n\t\treturn [this.r.currentValue()/255,this.g.currentValue()/255,this.b.currentValue()/255];\r\n\t}\r\n\ttargetComponents(){\r\n\t\treturn [this.r.targetValue()/255,this.g.targetValue()/255,this.b.targetValue()/255];\r\n\t}\r\n}\r\n\r\nmv3d.Blender=Blender;\r\nmv3d.ColorBlender=ColorBlender;","import mv3d from './mv3d.js';\r\n\r\nmv3d.blendModes={\r\n\t[PIXI.BLEND_MODES.NORMAL]: BABYLON.Engine.ALPHA_COMBINE,\r\n\t[PIXI.BLEND_MODES.ADD]: BABYLON.Engine.ALPHA_ADD,\r\n\t[PIXI.BLEND_MODES.MULTIPLY]: BABYLON.Engine.ALPHA_MULTIPLY,\r\n\t[PIXI.BLEND_MODES.SCREEN]: BABYLON.Engine.ALPHA_SCREENMODE,\r\n\t\r\n\tNORMAL:BABYLON.Engine.ALPHA_COMBINE,\r\n\tADD:BABYLON.Engine.ALPHA_ADD,\r\n\tMULTIPLY:BABYLON.Engine.ALPHA_MULTIPLY,\r\n\tSCREEN:BABYLON.Engine.ALPHA_SCREENMODE,\r\n};","import mv3d from './mv3d.js';\r\nimport { override } from './util.js';\r\nimport { Feature } from './features.js';\r\n\r\n\r\nObject.assign(mv3d,{\r\n\tupdateInput(){\r\n\t\tmv3d.updateInputCamera();\r\n\t},\r\n\r\n\tupdateInputCamera(){\r\n\t\tif(this.isDisabled()||this.loadData('cameraLocked')){ return; }\r\n\t\tconst is1stPerson = this.is1stPerson();\r\n\t\tif( this.loadData('allowRotation',mv3d.KEYBOARD_TURN) || is1stPerson ){\r\n\t\t\tconst leftKey=mv3d.getTurnKey('left'), rightKey=mv3d.getTurnKey('right');\r\n\t\t\tif(mv3d.TURN_INCREMENT>1){\r\n\t\t\t\tconst turning = this.blendCameraYaw.currentValue()!==this.blendCameraYaw.targetValue();\r\n\t\t\t\tconst yawSpeed = mv3d.TURN_INCREMENT / mv3d.YAW_SPEED;\r\n\t\t\t\tif(Input.isTriggered(leftKey)||Input.isPressed(leftKey)&&!turning){\r\n\t\t\t\t\tthis.blendCameraYaw.setValue(this.blendCameraYaw.targetValue()+mv3d.TURN_INCREMENT,yawSpeed);\r\n\t\t\t\t}else if(Input.isTriggered(rightKey)||Input.isPressed(rightKey)&&!turning){\r\n\t\t\t\t\tthis.blendCameraYaw.setValue(this.blendCameraYaw.targetValue()-mv3d.TURN_INCREMENT,yawSpeed);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tconst increment = mv3d.YAW_SPEED / 60;\r\n\t\t\t\tif(Input.isPressed(leftKey)&&Input.isPressed(rightKey)){\r\n\t\t\t\t\t// do nothing\r\n\t\t\t\t}else if(Input.isPressed(leftKey)){\r\n\t\t\t\t\tthis.blendCameraYaw.setValue(this.blendCameraYaw.targetValue()+increment,0.1);\r\n\t\t\t\t}else if(Input.isPressed(rightKey)){\r\n\t\t\t\t\tthis.blendCameraYaw.setValue(this.blendCameraYaw.targetValue()-increment,0.1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif( this.loadData('allowPitch',mv3d.KEYBOARD_PITCH) ){\r\n\t\t\tconst increment = mv3d.PITCH_SPEED / 60;\r\n\t\t\tif(Input.isPressed('pageup')&&Input.isPressed('pagedown')){\r\n\t\t\t\t// do nothing\r\n\t\t\t}else if(Input.isPressed('pageup')){\r\n\t\t\t\tthis.blendCameraPitch.setValue(Math.min(179,this.blendCameraPitch.targetValue()+increment),0.1);\r\n\t\t\t}else if(Input.isPressed('pagedown')){\r\n\t\t\t\tthis.blendCameraPitch.setValue(Math.max(1,this.blendCameraPitch.targetValue()-increment),0.1);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tgetStrafeKey(keyname){\r\n\t\tif(mv3d.is1stPerson()){\r\n\t\t\tswitch(mv3d.KEYBOARD_STRAFE){\r\n\t\t\t\tcase 'QE': return 'rot'+keyname;\r\n\t\t\t\tcase 'AD': return keyname;\r\n\t\t\t\tdefault: return false;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tswitch(mv3d.KEYBOARD_TURN){\r\n\t\t\t\tcase 'QE': return keyname;\r\n\t\t\t\tcase 'AD': return 'rot'+keyname;\r\n\t\t\t\tdefault: return keyname;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tgetTurnKey(keyname){\r\n\t\tif(mv3d.is1stPerson()){\r\n\t\t\tswitch(mv3d.KEYBOARD_STRAFE){\r\n\t\t\t\tcase 'QE': return keyname;\r\n\t\t\t\tcase 'AD': return 'rot'+keyname;\r\n\t\t\t\tdefault: return keyname;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tswitch(mv3d.KEYBOARD_TURN){\r\n\t\t\t\tcase 'QE': return 'rot'+keyname;\r\n\t\t\t\tcase 'AD': return keyname;\r\n\t\t\t\tdefault: return 'rot'+keyname;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n});\r\n\r\noverride(Input,'_signX',o=>function _signX(){\r\n\tif(!mv3d.KEYBOARD_STRAFE && mv3d.is1stPerson()){ return 0; }\r\n\tconst leftKey=mv3d.getStrafeKey('left'), rightKey=mv3d.getStrafeKey('right');\r\n\r\n\tlet x = 0;\r\n\tif (this.isPressed(leftKey)) { --x; }\r\n\tif (this.isPressed(rightKey)) { ++x; }\r\n\treturn x;\r\n});\r\n\r\nmv3d.setupInput=function(){\r\n\tif(!mv3d.WASD){ return; }\r\n\tObject.assign(Input.keyMapper,{\r\n\t\t81:'rotleft',  // Q\r\n\t\t69:'rotright', // E\r\n\t\t87:'up',       // W\r\n\t\t65:'left',     // A\r\n\t\t83:'down',     // S\r\n\t\t68:'right',    // D\r\n\t});\r\n\tconst descriptors={\r\n\t\trotleft:getInputDescriptor('pageup','rotleft', 'rotleft'),\r\n\t\trotright:getInputDescriptor('pagedown','rotright', 'rotright'),\r\n\t}\r\n\tObject.defineProperties(Input.keyMapper,{\r\n\t\t81:descriptors.rotleft, //Q\r\n\t\t69:descriptors.rotright,//E\r\n\t});\r\n}\r\n\r\nfunction getInputDescriptor(menumode,p3mode,p1mode){\r\n\tlet assignedValue=undefined;\r\n\treturn {\r\n\t\tconfigurable:true,\r\n\t\tget(){\r\n\t\t\tif(assignedValue!=undefined){ return assignedValue; }\r\n\t\t\tif(!(SceneManager._scene instanceof Scene_Map)){ return menumode; }\r\n\t\t\tif(mv3d.isDisabled()){ return p3mode; }\r\n\t\t\tif(mv3d.is1stPerson()){ return p1mode; }\r\n\t\t\treturn p3mode;\r\n\t\t},\r\n\t\tset(v){ assignedValue=v; },\r\n\t};\r\n}\r\n\r\nconst _getInputDirection = Game_Player.prototype.getInputDirection;\r\nGame_Player.prototype.getInputDirection = function() {\r\n\tif (mv3d.isDisabled()){ \r\n\t\tif(mv3d.DIR8MOVE && mv3d.DIR8_2D) { return Input.dir8; }\r\n\t\treturn _getInputDirection.apply(this,arguments);\r\n\t }\r\n\treturn mv3d.getInputDirection();\r\n};\r\n\r\nmv3d.getInputDirection=function(){\r\n\tlet dir = mv3d.DIR8MOVE ? Input.dir8 : Input.dir4;\r\n\treturn mv3d.transformDirection(dir,mv3d.blendCameraYaw.currentValue());\r\n}\r\n\r\nconst raycastPredicate=mesh=>{\r\n\tif(!mesh.isEnabled() || !mesh.isVisible || !mesh.isPickable){ return false; }\r\n\tif(mesh.character){\r\n\t\tif(mesh.character.isFollower||mesh.character.isPlayer){ return false; }\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nconst _process_map_touch = Scene_Map.prototype.processMapTouch;\r\nScene_Map.prototype.processMapTouch = function() {\r\n\tif (mv3d.isDisabled()){ return _process_map_touch.apply(this,arguments); }\r\n\tif (TouchInput.isTriggered() || this._touchCount > 0) {\r\n\t\tif (TouchInput.isPressed()) {\r\n\t\t\tif (this._touchCount === 0 || this._touchCount >= 15) {\r\n\t\t\t\t\r\n\t\t\t\tconst intersection = mv3d.scene.pick(TouchInput.x*mv3d.RES_SCALE,TouchInput.y*mv3d.RES_SCALE,raycastPredicate);\r\n\t\t\t\tif(intersection.hit){\r\n\t\t\t\t\tmv3d.processMapTouch(intersection);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tthis._touchCount++;\r\n\t\t} else {\r\n\t\t\tthis._touchCount = 0;\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmv3d.processMapTouch=function(intersection){\r\n\tconst point = {x:intersection.pickedPoint.x, y:-intersection.pickedPoint.z};\r\n\tconst mesh = intersection.pickedMesh;\r\n\tif(mesh.character){\r\n\t\tpoint.x=mesh.character.x;\r\n\t\tpoint.y=mesh.character.y;\r\n\t}\r\n\tmv3d.setDestination(point.x,point.y);\r\n};\r\n\r\nmv3d.setDestination=function(x,y){\r\n\t$gameTemp.setDestination(Math.round(x), Math.round(y));\r\n};\r\n\r\nconst _player_findDirectionTo=Game_Player.prototype.findDirectionTo;\r\nGame_Player.prototype.findDirectionTo=function(){\r\n\tconst dir = _player_findDirectionTo.apply(this,arguments);\r\n\tif(mv3d.isDisabled()){ return dir; }\r\n\tif(mv3d.is1stPerson() && dir){\r\n\t\tlet yaw = mv3d.dirToYaw(dir);\r\n\r\n\t\tmv3d.blendCameraYaw.setValue(yaw,0.25);\r\n\t}\r\n\treturn dir;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import mv3d from './mv3d.js';\r\nimport { override } from './util.js';\r\n\r\n\r\nObject.assign(mv3d,{\r\n\t\r\n\tplayerFaceYaw(){\r\n\t\tlet dir = this.yawToDir(mv3d.blendCameraYaw.targetValue(),true);\r\n\t\t$gamePlayer.mv3d_setDirection(dir);\r\n\t},\r\n\r\n\tyawToDir(yaw=mv3d.blendCameraYaw.targetValue(),dir8=false){\r\n\t\tconst divisor = dir8?45:90;\r\n\t\tyaw=Math.round(yaw/divisor)*divisor;\r\n\t\twhile(yaw<0){yaw+=360;} while(yaw>=360){yaw-=360;}\r\n\t\tswitch(yaw){\r\n\t\t\tcase 0: return 8;\r\n\t\t\tcase 45: return 7;\r\n\t\t\tcase 90: return 4;\r\n\t\t\tcase 135: return 1;\r\n\t\t\tcase 180: return 2;\r\n\t\t\tcase 225: return 3;\r\n\t\t\tcase 270: return 6;\r\n\t\t\tcase 315: return 9;\r\n\t\t\tdefault: return 0;\r\n\t\t}\r\n\t},\r\n\r\n\tdirToYaw(dir){\r\n\t\tswitch(dir){\r\n\t\t\tcase 3: return -135;\r\n\t\t\tcase 6: return -90;\r\n\t\t\tcase 9: return -45;\r\n\t\t\tcase 8: return 0;\r\n\t\t\tcase 7: return 45;\r\n\t\t\tcase 4: return 90;\r\n\t\t\tcase 1: return 135;\r\n\t\t\tcase 2: return 180;\r\n\t\t\tdefault: return NaN;\r\n\t\t}\r\n\t},\r\n\t\r\n\ttransformDirection(dir,yaw=this.blendCameraYaw.currentValue(),dir8=mv3d.DIR8MOVE){\r\n\t\treturn mv3d.yawToDir(mv3d.dirToYaw(dir)+yaw,dir8);\r\n\t},\r\n\r\n\ttransformFacing(dir,yaw=this.blendCameraYaw.currentValue(),dir8=false){\r\n\t\treturn mv3d.yawToDir(mv3d.dirToYaw(dir)-yaw,dir8);\r\n\t},\r\n\r\n\tupdateDirection(){\r\n\t\tif ( mv3d.is1stPerson() ) {\r\n\t\t\tmv3d.playerFaceYaw();\r\n\t\t}\r\n\t},\r\n});\r\n\r\nlet _oldDir=0;\r\noverride(Game_Player.prototype,'update',o=>function update(){\r\n\to.apply(this,arguments);\r\n\tif(this._direction!==_oldDir){\r\n\t\tmv3d.updateDirection();\r\n\t\t_oldDir=this._direction;\r\n\t}\r\n});\r\n\r\noverride(Game_Player.prototype,'moveStraight',o=>function moveStraight(){\r\n\to.apply(this,arguments);\r\n\tmv3d.updateDirection();\r\n});\r\n\r\noverride(Game_Player.prototype,'direction',o=>function direction(){\r\n\tif(mv3d.is1stPerson() && this.isMoving() && !this.isDirectionFixed()){\r\n\t\treturn mv3d.yawToDir(mv3d.blendCameraYaw.targetValue(),false);\r\n\t}else{\r\n\t\treturn o.apply(this,arguments);\r\n\t}\r\n});\r\n\r\n\r\nconst _setDirection=Game_CharacterBase.prototype.setDirection;\r\nGame_CharacterBase.prototype.setDirection=function(){\r\n\t_setDirection.apply(this,arguments);\r\n\tthis._mv3d_direction=this._direction;\r\n};\r\nGame_CharacterBase.prototype.mv3d_setDirection=function(d){\r\n\tif( this.isDirectionFixed() ){ return; }\r\n\tthis._direction=mv3d.yawToDir(mv3d.dirToYaw(d),false);\r\n\tif(mv3d.DIR8MOVE){\r\n\t\tthis._mv3d_direction=d;\r\n\t}else{\r\n\t\tthis._mv3d_direction=this._direction;\r\n\t}\r\n};\r\nGame_CharacterBase.prototype.mv3d_direction=function(){\r\n\treturn this._mv3d_direction||this.direction();\r\n};\r\n\r\noverride(Game_CharacterBase.prototype,'copyPosition',o=>function(character) {\r\n\to.apply(this,arguments);\r\n\tthis._mv3d_direction = character._mv3d_direction;\r\n});\r\n\r\noverride(Game_Player.prototype,'processMoveCommand',o=>function processMoveCommand(command){\r\n\to.apply(this,arguments);\r\n\tconst  gc = Game_Character;\r\n\tswitch(command.code){\r\n\t\tcase gc.ROUTE_TURN_DOWN:\r\n\t\tcase gc.ROUTE_TURN_LEFT:\r\n\t\tcase gc.ROUTE_TURN_RIGHT:\r\n\t\tcase gc.ROUTE_TURN_UP:\r\n\t\tcase gc.ROUTE_TURN_90D_R:\r\n\t\tcase gc.ROUTE_TURN_90D_L:\r\n\t\tcase gc.ROUTE_TURN_180D:\r\n\t\tcase gc.ROUTE_TURN_90D_R_L:\r\n\t\tcase gc.ROUTE_TURN_RANDOM:\r\n\t\tcase gc.ROUTE_TURN_TOWARD:\r\n\t\tcase gc.ROUTE_TURN_AWAY:\r\n\t\t\tlet yaw = mv3d.dirToYaw(this._direction);\r\n\t\t\tmv3d.blendCameraYaw.setValue(yaw,0.25);\r\n\t}\r\n},()=>!mv3d.isDisabled()&&mv3d.is1stPerson());\r\n\r\n","import mv3d from './mv3d.js';\r\nimport { FRONTSIDE, BACKSIDE, DOUBLESIDE, Vector2, Color3, Color4 } from './mod_babylon.js';\r\nimport { makeColor, relativeNumber, booleanString, falseString, booleanNumber, sleep, tileSize } from './util.js';\r\nimport { Blender } from './blenders.js';\r\n\r\nclass ConfigurationFunction{\r\n\tconstructor(parameters,func){\r\n\t\tthis.groups = parameters.match(/\\[?[^[\\]|]+\\]?/g);\r\n\t\tthis.labels={};\r\n\t\tfor(let i=0;i<this.groups.length;++i){\r\n\t\t\twhile(this.groups[i]&&this.groups[i][0]==='['){\r\n\t\t\t\tthis.labels[this.groups[i].slice(1,-1)]=i;\r\n\t\t\t\tthis.groups.splice(i,1);\r\n\t\t\t}\r\n\t\t\tif( i > this.groups.length ){ break; }\r\n\t\t\tthis.groups[i]=this.groups[i].split(',').map(s=>s.trim());\r\n\t\t}\r\n\t\tthis.func=func;\r\n\t}\r\n\trun(conf,rawparams){\r\n\t\tconst r=/([,|]+)? *(?:(\\w+) *: *)?([^,|\\r\\n]+)/g\r\n\t\tlet match;\r\n\t\tlet i=0;\r\n\t\tlet gi=0;\r\n\t\tconst params={};\r\n\t\tfor(let _gi=0;_gi<this.groups.length;++_gi){\r\n\t\t\tparams[`group${_gi+1}`]=[];\r\n\t\t}\r\n\t\twhile(match=r.exec(rawparams)){\r\n\t\t\tif(match[1])for(const delimiter of match[1]){\r\n\t\t\t\tif(delimiter===','){ ++i; }\r\n\t\t\t\tif(delimiter==='|'||i>=this.groups[gi].length){\r\n\t\t\t\t\ti=0; ++gi;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(match[2]){\r\n\t\t\t\tif(match[2] in this.labels){\r\n\t\t\t\t\tgi=this.labels[match[2]];\r\n\t\t\t\t}else{\r\n\t\t\t\t\tlet foundMatch=false;\r\n\t\t\t\t\tgrouploop:for(let _gi=0;_gi<this.groups.length;++_gi) for(let _i=0;_i<this.groups[_gi].length;++_i){\r\n\t\t\t\t\t\tif(this.groups[_gi][_i]===match[2]){\r\n\t\t\t\t\t\t\tfoundMatch=true;\r\n\t\t\t\t\t\t\tgi=_gi; i=_i;\r\n\t\t\t\t\t\t\tbreak grouploop;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!foundMatch){ break; }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(gi>this.groups.length){ break; }\r\n\t\t\tparams[this.groups[gi][i]]=params[`group${gi+1}`][i]=match[3].trim();\r\n\t\t}\r\n\t\tthis.func(conf,params);\r\n\t}\r\n}\r\nmv3d.ConfigurationFunction=ConfigurationFunction;\r\n\r\nfunction TextureConfigurator(name,extraParams='',apply){\r\n\tconst paramlist = `img,x,y,w,h|${extraParams}|alpha|glow[anim]animx,animy`;\r\n\treturn new ConfigurationFunction(paramlist,function(conf,params){\r\n\t\tif(params.group1.length===5){\r\n\t\t\tconst [img,x,y,w,h] = params.group1;\r\n\t\t\tconf[`${name}_id`] = mv3d.constructTileId(img,1,0);\r\n\t\t\tconf[`${name}_rect`] = new PIXI.Rectangle(x,y,w,h);\r\n\t\t}else if(params.group1.length===3){\r\n\t\t\tconst [img,x,y] = params.group1;\r\n\t\t\tconf[`${name}_id`] = mv3d.constructTileId(img,x,y);\r\n\t\t}else if(params.group1.length===2){\r\n\t\t\tconst [x,y] = params.group1;\r\n\t\t\tconf[`${name}_offset`] = new Vector2(Number(x),Number(y));\r\n\t\t}\r\n\t\tif(params.animx&&params.animy){\r\n\t\t\tconf[`${name}_animData`]={ animX:Number(params.animx), animY:Number(params.animy) };\r\n\t\t}\r\n\t\tif(params.alpha){\r\n\t\t\tconf[`${name}_alpha`]=Number(params.alpha);\r\n\t\t}\r\n\t\tif(params.glow){\r\n\t\t\tif(isNaN(params.glow)){\r\n\t\t\t\tconf[`${name}_glow`] = makeColor(params.glow);\r\n\t\t\t}else{\r\n\t\t\t\tconf[`${name}_glow`] = new Color4(Number(params.glow),Number(params.glow),Number(params.glow),1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(apply){\r\n\t\t\tapply.call(this,conf,params);\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction readTextureConfigurations(name,conf,img,xstr,ystr,wstr='1',hstr='1'){\r\n\t// TODO: get img from mv3d folder\r\n\tlet hasPixelValue=false;\r\n\tconst coords=[xstr,ystr,wstr,hstr].map(str=>{\r\n\t\tconst coord = interpretTextureCoodinate(str);\r\n\t\tif(coord.isPixelValue){ hasPixelValue=true; }\r\n\t\treturn coord;\r\n\t});\r\n\tcoords.forEach(coord=>{\r\n\t\tif(hasPixelValue){ coord.usePixelValue(); }\r\n\t});\r\n\tlet [xcoord,ycoord,wcoord,hcoord]=coords;\r\n\tlet [x,y,w,h] = coords.map(coord=>coord.collapseValue());\r\n\tif(hasPixelValue){\r\n\t\tif(!xcoord.isOffsetValue&&!ycoord.isOffsetValue){\r\n\t\t\tconf[`${name}_id`] = mv3d.constructTileId(img,1,0);\r\n\t\t\tconf[`${name}_rect`] = new PIXI.Rectangle(x,y,w,h);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}else if(w===1&&h===1){\r\n\t\tif(xcoord.isOffsetValue&&ycoord.isOffsetValue){\r\n\t\t\tconf[`${name}_offset`] = new Vector2(Number(x),Number(y));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(!xcoord.isOffsetValue&&!ycoord.isOffsetValue){\r\n\t\t\tconf[`${name}_id`] = mv3d.constructTileId(img,x,y);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tif(hasPixelValue&&xcoord.baseValue!=null&&ycoord.baseValue!=null)\r\n\t\r\n\tconf[`${name}_texture`] = {img:img,x:xcoord,y:ycoord,w:wcoord,h:hcoord};\r\n\t\r\n}\r\n\r\nfunction interpretTextureCoodinate(nstr){\r\n\tconst r = /(\\+?-?)(\\d*\\.?\\d+)(px|p|t)?/g;\r\n\tconst coord = new TextureCoordinate();\r\n\tlet match;\r\n\twhile(match=r.exec(nstr)){\r\n\t\tconst isRelative = Boolean(match[1]);\r\n\t\tconst isNegative = match[1].includes('-');\r\n\t\tlet unit = match[3]?match[3].startsWith('p')?'p':'t':'t';\r\n\t\tlet num = Number(match[2]);\r\n\t\tif(isNegative){ num*=-1; }\r\n\t\tif(unit==='t'&&num%1){ num=num*tileSize(); unit='p'; }\r\n\t\tif(unit==='t'){\r\n\t\t\tif(isRelative) coord.offsetTileValue(num);\r\n\t\t\telse coord.setTileValue(num);\r\n\t\t}else{\r\n\t\t\tif(isRelative) coord.offsetPixelValue(num);\r\n\t\t\telse coord.setPixelValue(num);\r\n\t\t}\r\n\t}\r\n\treturn coord;\r\n}\r\n\r\nclass TextureCoordinate{\r\n\tconstructor(){\r\n\t\tthis.isPixelValue=false;\r\n\t\tthis.baseValue=null;\r\n\t\tthis.offsetValue=0;\r\n\t}\r\n\tusePixelValue(){\r\n\t\tif(this.isPixelValue){ return; }\r\n\t\tthis.isPixelValue=true;\r\n\t\tif(this.baseValue!=null){ this.baseValue*=tileSize(); }\r\n\t\tthis.offsetValue*=tileSize();\r\n\t}\r\n\tsetTileValue(v){\r\n\t\tif(this.isPixelValue){\r\n\t\t\tthis.setPixelValue(v*tileSize());\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.baseValue=v;\r\n\t}\r\n\tsetPixelValue(v){\r\n\t\tthis.usePixelValue();\r\n\t\tthis.baseValue=v;\r\n\t}\r\n\toffsetTileValue(v){\r\n\t\tif(this.isPixelValue){\r\n\t\t\tthis.offsetPixelValue(v*tileSize());\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.offsetValue+=v;\r\n\t}\r\n\toffsetPixelValue(v){\r\n\t\tthis.usePixelValue();\r\n\t\tthis.offsetValue+=v;\r\n\t}\r\n\tcollapseValue(baseValue){\r\n\t\treturn (this.baseValue||baseValue||0)+this.offsetValue;\r\n\t}\r\n\tget isOffsetValue(){\r\n\t\treturn this.baseValue==null;\r\n\t}\r\n}\r\n\r\nObject.assign(mv3d,{\r\n\ttilesetConfigurations:{},\r\n\tloadTilesetSettings(){\r\n\t\t//tileset\r\n\t\tthis.tilesetConfigurations={};\r\n\t\tconst lines = this.readConfigurationBlocks($gameMap.tileset().note)\r\n\t\t+'\\n'+this.readConfigurationBlocks(this.getDataMap().note,'mv3d-tiles');\r\n\t\t//const readLines = /^\\s*([abcde]\\d?\\s*,\\s*\\d+\\s*,\\s*\\d+)\\s*:(.*)$/gmi;\r\n\t\tconst readLines = /^\\s*([abcde]\\d?)\\s*,\\s*(\\d+(?:-\\d+)?)\\s*,\\s*(\\d+(?:-\\d+)?)\\s*:(.*)$/gmi;\r\n\t\tlet match;\r\n\t\twhile(match = readLines.exec(lines)){\r\n\t\t\tconst conf = this.readConfigurationFunctions(match[4],this.tilesetConfigurationFunctions);\r\n\t\t\tconst range1 = match[2].split('-').map(s=>Number(s));\r\n\t\t\tconst range2 = match[3].split('-').map(s=>Number(s));\r\n\t\t\tfor(let kx=range1[0];kx<=range1[range1.length-1];++kx)\r\n\t\t\tfor(let ky=range2[0];ky<=range2[range2.length-1];++ky){\r\n\t\t\t\tconst key = `${match[1]},${kx},${ky}`;\r\n\t\t\t\tconst tileId=this.constructTileId(...key.split(','));\r\n\t\t\t\tif(!(tileId in this.tilesetConfigurations)){\r\n\t\t\t\t\tthis.tilesetConfigurations[tileId]={};\r\n\t\t\t\t}\r\n\t\t\t\tObject.assign(this.tilesetConfigurations[tileId],conf);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t},\r\n\tmapConfigurations:{},\r\n\tloadMapSettings(){\r\n\t\tconst dataMap = this.getDataMap();\r\n\t\t//map\r\n\t\tconst mapconf=this.mapConfigurations={};\r\n\t\tthis.readConfigurationFunctions(\r\n\t\t\tthis.readConfigurationBlocks(dataMap.note),\r\n\t\t\tthis.mapConfigurationFunctions,\r\n\t\t\tmapconf,\r\n\t\t);\r\n\t\tthis._REGION_DATA_MAP={};\r\n\t\tconst regionBlocks=this.readConfigurationBlocks(dataMap.note,'mv3d-regions');\r\n\t\tif(regionBlocks){\r\n\t\t\tconst readLines = /^\\s*(\\d+)\\s*:(.*)$/gm;\r\n\t\t\tlet match;\r\n\t\t\twhile(match = readLines.exec(regionBlocks)){\r\n\t\t\t\tif(!(match[1] in this._REGION_DATA_MAP)){\r\n\t\t\t\t\tif(match[1] in this._REGION_DATA){\r\n\t\t\t\t\t\tthis._REGION_DATA_MAP[match[1]]=JSON.parse(JSON.stringify(this._REGION_DATA[match[1]]));\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tthis._REGION_DATA_MAP[match[1]]={};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.readConfigurationFunctions(\r\n\t\t\t\t\tmatch[2],\r\n\t\t\t\t\tmv3d.tilesetConfigurationFunctions,\r\n\t\t\t\t\tthis._REGION_DATA_MAP[match[1]],\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tapplyMapSettings(){\r\n\t\tconst mapconf = this.mapConfigurations;\r\n\t\tif('fog' in mapconf){\r\n\t\t\tconst fog = mapconf.fog;\r\n\t\t\tif('color' in fog){ this.blendFogColor.setValue(fog.color,0); }\r\n\t\t\tif('near' in fog){ this.blendFogNear.setValue(fog.near,0); }\r\n\t\t\tif('far' in fog){ this.blendFogFar.setValue(fog.far,0); }\r\n\t\t\tthis.blendFogColor.update();\r\n\t\t}\r\n\t\tif('light' in mapconf){\r\n\t\t\tthis.blendAmbientColor.setValue(mapconf.light.color,0);\r\n\t\t\t//this.blendLightIntensity.setValue(mapconf.light.intensity,0);\r\n\t\t}\r\n\t\tif('cameraDist' in mapconf){\r\n\t\t\tthis.blendCameraDist.setValue(mapconf.cameraDist,0);\r\n\t\t}\r\n\t\tif ('cameraHeight' in mapconf){\r\n\t\t\tthis.blendCameraHeight.setValue(mapconf.cameraHeight,0);\r\n\t\t}\r\n\t\tif('cameraMode' in mapconf){\r\n\t\t\tthis.cameraMode=mapconf.cameraMode;\r\n\t\t}\r\n\t\tif('cameraPitch' in mapconf){\r\n\t\t\tthis.blendCameraPitch.setValue(mapconf.cameraPitch,0);\r\n\t\t}\r\n\t\tif('cameraYaw' in mapconf){\r\n\t\t\tthis.blendCameraYaw.setValue(mapconf.cameraYaw,0);\r\n\t\t}\r\n\r\n\t\tthis.callFeatures('applyMapSettings',mapconf);\r\n\t},\r\n\r\n\tbeforeMapLoad(newmap){\r\n\t\tif(newmap){\r\n\t\t\tif($gameVariables.mv3d){ delete $gameVariables.mv3d.disabled; }\r\n\t\t\tdelete $gamePlayer._mv3d_z;\r\n\t\t}\r\n\t\tthis.callFeatures('beforeMapLoad',newmap);\r\n\t},\r\n\r\n\tafterMapLoad(newmap){\r\n\t\tBlender.reset();\r\n\r\n\t\tmv3d.updateClearColor();\r\n\r\n\t\tthis.callFeatures('afterMapLoad',newmap);\r\n\t},\r\n    \r\n\r\n\tgetMapConfig(key,dfault){\r\n\t\tif(key in this.mapConfigurations){\r\n\t\t\treturn this.mapConfigurations[key];\r\n\t\t}\r\n\t\treturn dfault;\r\n\t},\r\n\r\n\tgetCeilingConfig(){\r\n\t\tlet conf={};\r\n\t\tfor (const key in this.mapConfigurations){\r\n\t\t\tif(key.startsWith('ceiling_')){\r\n\t\t\t\tconf[key.replace('ceiling_','bottom_')]=this.mapConfigurations[key];\r\n\t\t\t}\r\n\t\t}\r\n\t\tconf.bottom_id = this.getMapConfig('ceiling_id',0);\r\n\t\tconf.height = this.getMapConfig('ceiling_height',this.CEILING_HEIGHT);\r\n\t\tconf.skylight = this.getMapConfig('ceiling_skylight',true);\r\n\t\tconf.backfaceCulling = true;\r\n\t\tconf.isCeiling = true;\r\n\t\treturn conf;\r\n\t},\r\n\r\n\treadConfigurationBlocksAndTags(note,tag='mv3d'){\r\n\t\treturn this.readConfigurationBlocks(note,tag)+this.readConfigurationTags(note,tag);\r\n\t},\r\n\r\n\treadConfigurationBlocks(note,tag='mv3d'){\r\n\t\tconst findBlocks = new RegExp(`<${tag}>([\\\\s\\\\S]*?)</${tag}>`,'gi');\r\n\t\tlet contents = '';\r\n\t\tlet match;\r\n\t\twhile(match = findBlocks.exec(note)){\r\n\t\t\tcontents += match[1]+'\\n';\r\n\t\t}\r\n\t\treturn contents;\r\n\t},\r\n\r\n\treadConfigurationTags(note,tag='mv3d'){\r\n\t\tconst findTags = new RegExp(`<${tag}:([\\\\s\\\\S]*?)>`,'gi');\r\n\t\tlet contents='';\r\n\t\tlet match;\r\n\t\twhile(match = findTags.exec(note)){\r\n\t\t\tcontents+=match[1]+'\\n';\r\n\t\t}\r\n\t\treturn contents;\r\n\t},\r\n\r\n\treadConfigurationFunctions(line,functionset=mv3d.tilesetConfigurationFunctions,conf={}){\r\n\t\tconst readConfigurations = /(\\w+)\\((.*?)\\)/g\r\n\t\tlet match;\r\n\t\twhile(match = readConfigurations.exec(line)){\r\n\t\t\tconst key = match[1].toLowerCase();\r\n\t\t\tif(key in functionset){\r\n\t\t\t\t//functionset[key](conf, ...match[2].split('|').map(s=>s?s.split(','):[]) );\r\n\t\t\t\tif(functionset[key] instanceof ConfigurationFunction){\r\n\t\t\t\t\tfunctionset[key].run(conf,match[2]);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconst args = match[2].split(',');\r\n\t\t\t\t\tif(args.length===1 && args[0]===''){ args.length=0; }\r\n\t\t\t\t\tfunctionset[key](conf, ...args);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn conf;\r\n\t},\r\n\tget configurationSides(){ return this.enumSides; },\r\n\tget configurationShapes(){ return this.enumShapes; },\r\n\tget configurationPassage(){ return this.enumPassage; },\r\n\tenumSides:{\r\n\t\tfront:FRONTSIDE,\r\n\t\tback:BACKSIDE,\r\n\t\tdouble:DOUBLESIDE,\r\n\t},\r\n\tenumShapes:{\r\n\t\tFLAT:1,\r\n\t\tTREE:2,\r\n\t\tSPRITE:3,\r\n\t\tFENCE:4,\r\n\t\tWALL:4,\r\n\t\tCROSS:5,\r\n\t\tXCROSS:6,\r\n\t\tSLOPE:7,\r\n\t},\r\n\tenumPassage:{\r\n\t\tWALL:0,\r\n\t\tFLOOR:1,\r\n\t\tTHROUGH:2,\r\n\t},\r\n\tenumRenderGroups:{\r\n\t\tBACK:0,\r\n\t\tMAIN:1,\r\n\t\tFRONT:2,\r\n\t},\r\n    \r\n\r\n\ttilesetConfigurationFunctions:{\r\n\t\theight(conf,n){ conf.height=Number(n); },\r\n\t\tdepth(conf,n){ conf.depth=Number(n); },\r\n\t\tfringe(conf,n){ conf.fringe=Number(n); },\r\n\t\tfloat(conf,n){ conf.float=Number(n); },\r\n\t\tslope(conf,n=1,d=null){\r\n\t\t\tconf.shape=mv3d.enumShapes.SLOPE;\r\n\t\t\tconf.slopeHeight=Number(n);\r\n\t\t\tif(d){ conf.slopeDirection=({n:2, s:8, e:4, w:6})[d.toLowerCase()[0]]; }\r\n\t\t},\r\n\t\ttop:TextureConfigurator('top'),\r\n\t\tside:TextureConfigurator('side'),\r\n\t\tinside:TextureConfigurator('inside'),\r\n\t\tbottom:TextureConfigurator('bottom'),\r\n\t\ttexture:Object.assign(TextureConfigurator('hybrid'),{\r\n\t\t\tfunc(conf,params){\r\n\t\t\t\tmv3d.tilesetConfigurationFunctions.top.func(conf,params);\r\n\t\t\t\tmv3d.tilesetConfigurationFunctions.side.func(conf,params);\r\n\t\t\t}\r\n\t\t}),\r\n\t\tshape(conf,name,data){\r\n\t\t\tconf.shape=mv3d.enumShapes[name.toUpperCase()];\r\n\t\t\tif(conf.shape===mv3d.enumShapes.SLOPE && data||!('slopeHeight' in conf)){ conf.slopeHeight=Number(data)||1; }\r\n\t\t\tif(data){\r\n\t\t\t\tif(conf.shape===mv3d.enumShapes.FENCE){ conf.fencePosts=booleanString(data); }\r\n\t\t\t}\r\n\t\t},\r\n\t\talpha(conf,n){\r\n\t\t\tconf.transparent=true;\r\n\t\t\tconf.alpha=Number(n);\r\n\t\t},\r\n\t\tglow(conf,n,a=1){\r\n\t\t\tif(isNaN(n)){\r\n\t\t\t\tconf.glow = makeColor(n);\r\n\t\t\t}else{\r\n\t\t\t\tconf.glow = new Color4(Number(n),Number(n),Number(n),1);\r\n\t\t\t}\r\n\t\t\tconf.glow.a=booleanNumber(a);\r\n\t\t},\r\n\t\tpass(conf,s=''){\r\n\t\t\ts=falseString(s.toLowerCase());\r\n\t\t\tif(!s || s[0]==='x'){\r\n\t\t\t\tconf.pass=mv3d.enumPassage.WALL;\r\n\t\t\t}else if(s[0]==='o'){\r\n\t\t\t\tconf.pass=mv3d.enumPassage.FLOOR;\r\n\t\t\t}else{\r\n\t\t\t\tconf.pass=mv3d.enumPassage.THROUGH;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadow(conf,b=true){\r\n\t\t\tconf.shadow=booleanString(b);\r\n\t\t},\r\n\t},\r\n\teventConfigurationFunctions:{\r\n\t\theight(conf,n){\r\n\t\t\tconst height = Number(n);\r\n\t\t\tif(height<0){\r\n\t\t\t\tconf.zoff=height;\r\n\t\t\t}else{\r\n\t\t\t\tconf.height=height;\r\n\t\t\t}\r\n\t\t\tconsole.warn('event config height() is deprecated. Use elevation(), offset(), or zoff() instead.');\r\n\t\t},\r\n\t\televation(conf,n){ conf.height=Number(n); },\r\n\t\tz(conf,n){ conf.zlock=Number(n); },\r\n\t\tx(conf,n){ conf.xoff=Number(n); console.warn('event config x() is deprecated. Use offset() or xoff() instead.'); },\r\n\t\ty(conf,n){ conf.yoff=Number(n); console.warn('event config y() is deprecated. Use offset() or yoff() instead.'); },\r\n\t\txoff(conf,n){ conf.xoff=Number(n); },\r\n\t\tyoff(conf,n){ conf.yoff=Number(n); },\r\n\t\tzoff(conf,n){ conf.zoff=Number(n); },\r\n\t\toffset:new ConfigurationFunction('x,y,z',function(conf,params){\r\n\t\t\tif(params.x)conf.xoff=Number(params.x);\r\n\t\t\tif(params.y)conf.yoff=Number(params.y);\r\n\t\t\tif(params.z)conf.zoff=Number(params.z);\r\n\t\t}),\r\n\t\tpos:new ConfigurationFunction('x,y',function(conf,params){\r\n\t\t\tif(!conf.pos){conf.pos={};}\r\n\t\t\tif(params.x){ conf.pos.x=params.x; }\r\n\t\t\tif(params.y){ conf.pos.y=params.y; }\r\n\t\t}),\r\n\t\tscale(conf,x,y=x){ conf.scale = new Vector2(Number(x),Number(y)); },\r\n\t\trot(conf,n){ conf.rot=Number(n); },\r\n\t\tyaw(conf,n){ conf.yaw=Number(n); },\r\n\t\tpitch(conf,n){ conf.pitch=Number(n); },\r\n\t\tbush(conf,bool){ conf.bush = booleanString(bool); },\r\n\t\tshadow:new ConfigurationFunction('size,dist|3d',function(conf,params){\r\n\t\t\tlet {size,dist,'3d':dyn} = params;\r\n\t\t\tif(dyn==null){ dyn=size!=null?size:true; }\r\n\t\t\tconf.dynShadow = dyn = booleanString(dyn);\r\n\t\t\tif(size!=null){ conf.shadow = booleanNumber(size); }\r\n\t\t\tif(dist!=null){ conf.shadowDist=Number(dist); }\r\n\t\t}),\r\n\t\tshape(conf,name){\r\n\t\t\tconf.shape=mv3d.enumShapes[name.toUpperCase()];\r\n\t\t},\r\n\t\tlamp:new ConfigurationFunction('color,intensity,range',function(conf,params){\r\n\t\t\tconst {color='white',intensity=1,range=mv3d.LIGHT_DIST} = params;\r\n\t\t\tconf.lamp={color:makeColor(color).toNumber(),intensity:Number(intensity),distance:Number(range)};\r\n\t\t}),\r\n\t\tflashlight:new ConfigurationFunction('color,intensity,range,angle[dir]yaw,pitch',function(conf,params){\r\n\t\t\tconst {color='white',intensity=1,range=mv3d.LIGHT_DIST,angle=mv3d.LIGHT_ANGLE} = params;\r\n\t\t\tconf.flashlight={color:makeColor(color).toNumber(),intensity:Number(intensity),distance:Number(range),angle:Number(angle)};\r\n\t\t\tif(params.yaw){ conf.flashlightYaw=params.yaw; }\r\n\t\t\tif(params.pitch){ conf.flashlightPitch=Number(params.pitch); }\r\n\t\t}),\r\n\t\tflashlightpitch(conf,deg='90'){ conf.flashlightPitch=Number(deg); },\r\n\t\tflashlightyaw(conf,deg='+0'){ conf.flashlightYaw=deg; },\r\n\t\tlightheight(conf,n=1){ this.lampheight(conf,n); this.flashlightheight(conf,n); },\r\n\t\tlightoffset(conf,x=0,y=0){ this.lampoffset(conf,x,y); this.flashlightoffset(conf,x,y); },\r\n\t\tlampheight(conf,n=1){ conf.lampHeight = Number(n); },\r\n\t\tlampoffset(conf,x=0,y=0){ conf.lampOffset = {x:+x,y:+y}; },\r\n\t\tflashlightheight(conf,n=1){ conf.flashlightHeight = Number(n); },\r\n\t\tflashlightoffset(conf,x=0,y=0){ conf.flashlightOffset = {x:+x,y:+y}; },\r\n\t\talpha(conf,n){\r\n\t\t\tconf.alpha=Number(n);\r\n\t\t},\r\n\t\tglow(conf,n,a=1){\r\n\t\t\tif(isNaN(n)){\r\n\t\t\t\tconf.glow = makeColor(n);\r\n\t\t\t}else{\r\n\t\t\t\tconf.glow = new Color4(Number(n),Number(n),Number(n),1);\r\n\t\t\t}\r\n\t\t\tconf.glow.a=booleanNumber(a);\r\n\t\t},\r\n\t\tdirfix(conf,b){\r\n\t\t\tconf.dirfix=booleanString(b);\r\n\t\t},\r\n\t\tgravity(conf,b){\r\n\t\t\tconf.gravity=booleanNumber(b);\r\n\t\t},\r\n\t\tplatform(conf,b){\r\n\t\t\tconf.platform=booleanString(b);\r\n\t\t},\r\n\t\tcollide(conf,n){ conf.collide=booleanNumber(n); },\r\n\t\ttrigger(conf,up,down=0){\r\n\t\t\tconf.trigger={\r\n\t\t\t\tup:Number(up),\r\n\t\t\t\tdown:Number(down),\r\n\t\t\t}\r\n\t\t},\r\n\t\tpass(conf,s=''){\r\n\t\t\ts=falseString(s.toLowerCase());\r\n\t\t\tif(!s || s[0]==='x'){\r\n\t\t\t\tconf.platform=false;\r\n\t\t\t\tconf.collide=true;\r\n\t\t\t}else if(s[0]==='o'){\r\n\t\t\t\tconf.platform=true;\r\n\t\t\t}else{\r\n\t\t\t\tconf.platform=false;\r\n\t\t\t\tconf.collide=false;\r\n\t\t\t}\r\n\t\t},\r\n\t},\r\n\tmapConfigurationFunctions:{\r\n\t\tget ambient(){ return this.light; },\r\n\t\tlight(conf,color){\r\n\t\t\tif(color.toLowerCase()==='default'){ color=mv3d.AMBIENT_COLOR; }\r\n\t\t\telse{ color=makeColor(color).toNumber(); }\r\n\t\t\tconf.light={color:color};\r\n\t\t},\r\n\t\tfog:new ConfigurationFunction('color|near,far',function(conf,params){\r\n\t\t\tconst {color,near,far} = params;\r\n\t\t\tif(!conf.fog){ conf.fog={}; }\r\n\t\t\tif(color){ conf.fog.color=makeColor(color).toNumber(); }\r\n\t\t\tif(near){ conf.fog.near=Number(near); }\r\n\t\t\tif(far){ conf.fog.far=Number(far); }\r\n\t\t}),\r\n\t\tcamera:new ConfigurationFunction('yaw,pitch|dist|height|mode',function(conf,params){\r\n\t\t\tconst {yaw,pitch,dist,height,mode}=params;\r\n\t\t\tif(yaw){ conf.cameraYaw=Number(yaw); }\r\n\t\t\tif(pitch){ conf.cameraPitch=Number(pitch) }\r\n\t\t\tif(dist){ conf.cameraDist=Number(dist); }\r\n\t\t\tif(height){ conf.cameraHeight=Number(height); }\r\n\t\t\tif(mode){ conf.cameraMode=mode; }\r\n\t\t}),\r\n\t\tceiling:TextureConfigurator('ceiling','height,backface',function(conf,params){\r\n\t\t\tif(params.height){\r\n\t\t\t\tconf[`ceiling_height`]=Number(params.height);\r\n\t\t\t}\r\n\t\t\tif(params.backface){\r\n\t\t\t\tconf[`ceiling_skylight`]=!booleanString(params.backface);\r\n\t\t\t}\r\n\t\t}),\r\n\t\tedge(conf,b,data){\r\n\t\t\tb=b.toLowerCase();\r\n\t\t\tswitch(b){\r\n\t\t\t\tcase 'clamp':\r\n\t\t\t\t\tconf.edgeData=data==null?1:Number(data);\r\n\t\t\t\t\tconf.edge=b;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconf.edge=booleanString(b);\r\n\t\t\t}\r\n\t\t},\r\n\t\tdisable(conf,b=true){\r\n\t\t\tconf.disabled=booleanString(b);\r\n\t\t},\r\n\t\tenable(conf,b=true){\r\n\t\t\tconf.disabled=!booleanString(b);\r\n\t\t},\r\n\t},\r\n\r\n});\r\n\r\n// event config\r\nconst _event_setupPage = Game_Event.prototype.setupPage;\r\nGame_Event.prototype.setupPage = function() {\r\n\t_event_setupPage.apply(this,arguments);\r\n\tif(this.mv3d_sprite){\r\n\t\tthis.mv3d_needsConfigure=true;\r\n\t\tthis.mv3d_sprite.eventConfigure();\r\n\t}\r\n};\r\n\r\nconst _event_init = Game_Event.prototype.initialize;\r\nGame_Event.prototype.initialize = async function() {\r\n\t_event_init.apply(this,arguments);\r\n\tconst event = this.event();\r\n\tlet config = {};\r\n\tmv3d.readConfigurationFunctions(\r\n\t\tmv3d.readConfigurationTags(event.note),\r\n\t\tmv3d.eventConfigurationFunctions,\r\n\t\tconfig,\r\n\t);\r\n\tif('pos' in config){\r\n\t\tthis.locate(\r\n\t\t\trelativeNumber(event.x,config.pos.x),\r\n\t\t\trelativeNumber(event.y,config.pos.y),\r\n\t\t);\r\n\t}\r\n\tif(!this.mv3d_blenders){\r\n\t\tthis.mv3d_blenders={};\r\n\t}\r\n\tif('lamp' in config){\r\n\t\tthis.mv3d_blenders.lampColor_r=config.lamp.color>>16;\r\n\t\tthis.mv3d_blenders.lampColor_g=config.lamp.color>>8&0xff;\r\n\t\tthis.mv3d_blenders.lampColor_b=config.lamp.color&0xff;\r\n\t\tthis.mv3d_blenders.lampIntensity=config.lamp.intensity;\r\n\t\tthis.mv3d_blenders.lampDistance=config.lamp.distance\r\n\t}\r\n\tif('flashlight' in config){\r\n\t\tthis.mv3d_blenders.flashlightColor_r=config.flashlight.color>>16;\r\n\t\tthis.mv3d_blenders.flashlightColor_g=config.flashlight.color>>8&0xff;\r\n\t\tthis.mv3d_blenders.flashlightColor_b=config.flashlight.color&0xff;\r\n\t\tthis.mv3d_blenders.flashlightIntensity=config.flashlight.intensity;\r\n\t\tthis.mv3d_blenders.flashlightDistance=config.flashlight.distance;\r\n\t\tthis.mv3d_blenders.flashlightAngle=config.flashlight.angle;\r\n\t}\r\n\tif('flashlightPitch' in config){\r\n\t\tthis.mv3d_blenders.flashlightPitch=Number(config.flashlightPitch);\r\n\t}\r\n\tif('flashlightYaw' in config){\r\n\t\tthis.mv3d_blenders.flashlightYaw=config.flashlightYaw;\r\n\t}\r\n\tthis.mv3d_needsConfigure=true;\r\n\r\n\tawait sleep();\r\n\tif(mv3d.mapLoaded){\r\n\t\tmv3d.createCharacterFor(this);\r\n\t}\r\n};","import mv3d from './mv3d.js';\r\nimport { makeColor, relativeNumber, booleanString, sleep } from './util.js';\r\n\r\nconst _pluginCommand = Game_Interpreter.prototype.pluginCommand;\r\nGame_Interpreter.prototype.pluginCommand = function(command, args) {\r\n\tif(command.toLowerCase() !== 'mv3d'){\r\n\t\treturn _pluginCommand.apply(this,arguments);\r\n\t}\r\n\trunPluginCommand(this,args);\r\n};\r\n\r\nfunction runPluginCommand(interpreter,args){\r\n\tconst pc = new mv3d.PluginCommand();\r\n\tpc.INTERPRETER=interpreter;\r\n\tpc.FULL_COMMAND=['mv3d',...args].join(' ');\r\n\targs=args.filter(v=>v);\r\n\tpc.CHAR=$gameMap.event(interpreter._eventId)||$gamePlayer;\r\n\tif(args[0]){\r\n\t\tconst firstChar = args[0][0];\r\n\t\tif(firstChar==='@'||firstChar==='＠'){\r\n\t\t\tpc.CHAR = pc.TARGET_CHAR(args.shift());\r\n\t\t}\r\n\t}\r\n\r\n\tconst com = args.shift().toLowerCase();\r\n\tif(com in pc){\r\n\t\tpc[com](...args);\r\n\t}\r\n}\r\n\r\nmv3d.PluginCommand=class{\r\n\tasync animation(id,...a){\r\n\t\tconst char = (await this.AWAIT_CHAR(this.CHAR)).char;\r\n\t\tchar.requestAnimation(id);\r\n\t\tif(mv3d.isDisabled()){ return; }\r\n\t\tlet depth=true, scale=1;\r\n\t\tfor(let i=0;i<a.length;++i){\r\n\t\t\tswitch(a[i].toLowerCase()){\r\n\t\t\t\tcase 'depth': if(a[i+1]!=null)depth=booleanString(a[i+1]); break;\r\n\t\t\t\tcase 'scale': if(a[i+1]!=null)scale=Number(a[i+1]); break;\r\n\t\t\t}\r\n\t\t}\r\n\t\tchar._mv3d_animationSettings={depth,scale};\r\n\t}\r\n\tresolution(...a){\r\n\t\tlet i=0;\r\n\t\tif(a[i].toLowerCase()==='scale'){ ++i; }\r\n\t\tlet time=this._TIME(a[2]);\r\n\t\tthis._RELATIVE_BLEND(mv3d.blendResolutionScale,a[1],time);\r\n\t}\r\n\tcamera(...a){\r\n\t\tlet time=this._TIME(a[2]);\r\n\t\tswitch(a[0].toLowerCase()){\r\n\t\t\tcase 'pitch'    : this.pitch (a[1],time); return;\r\n\t\t\tcase 'yaw'      : this.yaw   (a[1],time); return;\r\n\t\t\tcase 'roll'     : this.roll  (a[1],time); return;\r\n\t\t\tcase 'dist'     :\r\n\t\t\tcase 'distance' : this.dist  (a[1],time); return;\r\n\t\t\tcase 'zoom'     : this.zoom  (a[1],time); return;\r\n\t\t\tcase 'height'   : this.height(a[1],time); return;\r\n\t\t\tcase 'mode'     : this.cameramode(a[1]); return;\r\n\t\t\tcase 'target'   : this._cameraTarget(a[1],time); return;\r\n\t\t\tcase 'pan'      : this.pan(a[1],a[2],a[3]); return;\r\n\t\t}\r\n\t}\r\n\tyaw(deg,time=1){\r\n\t\tthis._RELATIVE_BLEND(mv3d.blendCameraYaw,deg,time);\r\n\t\tif ( mv3d.is1stPerson() ) { mv3d.playerFaceYaw(); }\r\n\t}\r\n\tpitch(deg,time=1){ this._RELATIVE_BLEND(mv3d.blendCameraPitch,deg,time); }\r\n\troll(deg,time=1){ this._RELATIVE_BLEND(mv3d.blendCameraRoll,deg,time); }\r\n\tdist(n,time=1){ this._RELATIVE_BLEND(mv3d.blendCameraDist,n,time); }\r\n\tzoom(n,time=1){ this._RELATIVE_BLEND(mv3d.blendCameraZoom,n,time); }\r\n\theight(n,time=1){ this._RELATIVE_BLEND(mv3d.blendCameraHeight,n,time); }\r\n\t_cameraTarget(target,time){\r\n\t\tmv3d.setCameraTarget(this.TARGET_CHAR(target), time);\r\n\t}\r\n\tpan(x,y,time=1){\r\n\t\tconsole.log(x,y,time);\r\n\t\ttime=this._TIME(time);\r\n\t\tthis._RELATIVE_BLEND(mv3d.blendPanX,x,time);\r\n\t\tthis._RELATIVE_BLEND(mv3d.blendPanY,y,time);\r\n\t}\r\n\r\n\tget rotationmode(){ return this.allowrotation; }\r\n\tget pitchmode(){ return this.allowpitch; }\r\n\r\n\tallowrotation(b){ mv3d.saveData('allowRotation',booleanString(b)); }\r\n\tallowpitch(b){ mv3d.saveData('allowPitch',booleanString(b)); }\r\n\tlockcamera(b){ mv3d.saveData('cameraLocked',booleanString(b)); }\r\n\r\n\t_VEHICLE(vehicle,data,value){\r\n\t\tdata=data.toLowerCase();\r\n\t\tconst key = `${Vehicle}_${data}`;\r\n\t\tif(data==='big'){ value=booleanString(value); }\r\n\t\telse{ value=relativeNumber(mv3d.loadData(key,0),value); }\r\n\t\tmv3d.saveData(key,value);\r\n\t}\r\n\tboat(d,v){ this._VEHICLE('boat',d,v); }\r\n\tship(d,v){ this._VEHICLE('ship',d,v); }\r\n\tairship(d,v){ this._VEHICLE('airship',d,v); }\r\n\tcameramode(mode){ mv3d.cameraMode=mode; }\r\n\tfog(...a){\r\n\t\tvar time=this._TIME(a[2]);\r\n\t\tswitch(a[0].toLowerCase()){\r\n\t\t\tcase 'color': this._fogColor(a[1],time); return;\r\n\t\t\tcase 'near': this._fogNear(a[1],time); return;\r\n\t\t\tcase 'far': this._fogFar(a[1],time); return;\r\n\t\t\tcase 'dist': case 'distance':\r\n\t\t\t\ttime=this._TIME(a[3]);\r\n\t\t\t\tthis._fogNear(a[1],time);\r\n\t\t\t\tthis._fogFar(a[2],time);\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t\ttime=this._TIME(a[3]);\r\n\t\tthis._fogColor(a[0],time);\r\n\t\tthis._fogNear(a[1],time);\r\n\t\tthis._fogFar(a[2],time);\r\n\t}\r\n\t_fogColor(color,time){ mv3d.blendFogColor.setValue(makeColor(color).toNumber(),time); }\r\n\t_fogNear(n,time){ this._RELATIVE_BLEND(mv3d.blendFogNear,n,time); }\r\n\t_fogFar(n,time){ this._RELATIVE_BLEND(mv3d.blendFogFar,n,time); }\r\n\tget ambient(){ return this.light; }\r\n\tlight(...a){\r\n\t\tvar time=this._TIME(a[2]);\r\n\t\tswitch(a[0].toLowerCase()){\r\n\t\t\tcase 'color'    : this._lightColor    (a[1],time); return;\r\n\t\t\t//case 'intensity': this._lightIntensity(a[1],time); return;\r\n\t\t}\r\n\t\ttime=this._TIME(a[1]);\r\n\t\tthis._lightColor(a[0],time);\r\n\t\t//this._lightintensity(a[0],time);\r\n\t}\r\n\t_lightColor(color,time=1){ mv3d.blendAmbientColor.setValue(makeColor(color).toNumber(),time); }\r\n\t//_lightIntensity(n,time=1){ this._RELATIVE_BLEND(mv3d.blendLightIntensity,n,time); }\r\n\tasync lamp(...a){\r\n\t\tconst char = await this.AWAIT_CHAR(this.CHAR);\r\n\t\tchar.setupLamp();\r\n\t\tvar time=this._TIME(a[2]);\r\n\t\tswitch(a[0].toLowerCase()){\r\n\t\t\tcase 'color'    : this._lampColor    (char,a[1],time); return;\r\n\t\t\tcase 'intensity': this._lampIntensity(char,a[1],time); return;\r\n\t\t\tcase 'dist'     :\r\n\t\t\tcase 'distance' : this._lampDistance (char,a[1],time); return;\r\n\t\t}\r\n\t\ttime=this._TIME(a[3]);\r\n\t\tthis._lampColor(char,a[0],time);\r\n\t\tthis._lampIntensity(char,a[1],time);\r\n\t\tthis._lampDistance(char,a[2],time);\r\n\t}\r\n\t_lampColor(char,color,time=1){ char.blendLampColor.setValue(makeColor(color).toNumber(),time); }\r\n\t_lampIntensity(char,n,time=1){ this._RELATIVE_BLEND(char.blendLampIntensity,n,time); }\r\n\t_lampDistance(char,n,time=1){ this._RELATIVE_BLEND(char.blendLampDistance,n,time); }\r\n\tasync flashlight(...a){\r\n\t\tconst char = await this.AWAIT_CHAR(this.CHAR);\r\n\t\tchar.setupFlashlight();\r\n\t\tvar time=this._TIME(a[2]);\r\n\t\tswitch(a[0].toLowerCase()){\r\n\t\t\tcase 'color'    : this._flashlightColor    (char,a[1],time); return;\r\n\t\t\tcase 'intensity': this._flashlightIntensity(char,a[1],time); return;\r\n\t\t\tcase 'dist'     :\r\n\t\t\tcase 'distance' : this._flashlightDistance (char,a[1],time); return;\r\n\t\t\tcase 'angle'    : this._flashlightAngle    (char,a[1],time); return;\r\n\t\t\tcase 'yaw'      : this._flashlightYaw      (char,a[1]); return;\r\n\t\t\tcase 'pitch'    : this._flashlightPitch    (char,a[1],time); return;\r\n\t\t}\r\n\t\ttime=this._TIME(a[4]);\r\n\t\tthis._flashlightColor(char,a[0],time);\r\n\t\tthis._flashlightIntensity(char,a[1],time);\r\n\t\tthis._flashlightDistance(char,a[2],time);\r\n\t\tthis._flashlightAngle(char,a[3],time);\r\n\t}\r\n\t_flashlightColor(char,color,time){ char.blendFlashlightColor.setValue(makeColor(color).toNumber(),time); }\r\n\t_flashlightIntensity(char,n,time){ this._RELATIVE_BLEND(char.blendFlashlightIntensity,n,time); }\r\n\t_flashlightDistance(char,n,time){ this._RELATIVE_BLEND(char.blendFlashlightDistance,n,time); }\r\n\t_flashlightAngle(char,n,time){ this._RELATIVE_BLEND(char.blendFlashlightAngle,n,time); }\r\n\t_flashlightPitch(char,n,time){ this._RELATIVE_BLEND(char.blendFlashlightPitch,n,time); }\r\n\t_flashlightYaw(char,yaw){ this.configure(`flashlightYaw(${yaw})`); }\r\n\tasync elevation(...a){\r\n\t\tconst char = await this.AWAIT_CHAR(this.CHAR);\r\n\t\tlet time=this._TIME(a[1]);\r\n\t\tthis._RELATIVE_BLEND(char.blendElevation,a[0],time);\r\n\t}\r\n\tasync configure(...a){\r\n\t\tconst char = await this.AWAIT_CHAR(this.CHAR);\r\n\t\tmv3d.readConfigurationFunctions(\r\n\t\t\ta.join(' '),\r\n\t\t\tmv3d.eventConfigurationFunctions,\r\n\t\t\tchar.settings,\r\n\t\t);\r\n\t\tchar.pageConfigure(char.settings);\r\n\t}\r\n\tset(key,...a){\r\n\t\tkey=key.toLowerCase();\r\n\t\tconst value=a.join(' ');\r\n\t\tif(key in mv3d.attributes){\r\n\t\t\tmv3d.attributes[key]=value;\r\n\t\t}\r\n\t}\r\n\tdisable(fadeType){ mv3d.disable(fadeType); }\r\n\tenable(fadeType){ mv3d.enable(fadeType); }\r\n\t_RELATIVE_BLEND(blender,n,time){ blender.setValue(relativeNumber(blender.targetValue(),n),Number(time)); }\r\n\t_TIME(time){\r\n\t\tif(typeof time==='number'){ return time; }\r\n\t\ttime=Number(time);\r\n\t\tif(Number.isNaN(time)){ return 1; }\r\n\t\treturn time;\r\n\t}\r\n\tERROR_CHAR(){\r\n\t\tconsole.warn(`MV3D: Plugin command \\`${this.FULL_COMMAND}\\` failed because target character was invalid.`);\r\n\t\t//console.log(this.CHAR);\r\n\t}\r\n\tasync AWAIT_CHAR(char){\r\n\t\tif(!mv3d.characters.length){\r\n\t\t\tmv3d.createCharacters();\r\n\t\t}\r\n\t\tif(!char){ return this.ERROR_CHAR(); }\r\n\t\tlet w=0;\r\n\t\twhile(!char.mv3d_sprite){\r\n\t\t\tawait sleep(100);\r\n\t\t\tif(++w>10){ return this.ERROR_CHAR(); }\r\n\t\t}\r\n\t\treturn char.mv3d_sprite;\r\n\t}\r\n\tTARGET_CHAR(target){\r\n\t\treturn mv3d.targetChar(target,$gameMap.event(this.INTERPRETER._eventId),this.CHAR);\r\n\t}\r\n};\r\n\r\nmv3d.targetChar=function(target,self=null,dfault=null){\r\n\tif(!target){ return dfault; }\r\n\tlet m=target.toLowerCase().match(/[a-z]+/);\r\n\tconst mode=m?m[0]:'e';\r\n\tm=target.match(/\\d+/);\r\n\tconst id=m?Number(m[0]):0;\r\n\tswitch(mode[0]){\r\n\t\tcase 's': return self;\r\n\t\tcase 'p': return $gamePlayer;\r\n\t\tcase 'e':\r\n\t\t\tif(!id){ return self; }\r\n\t\t\treturn $gameMap.event(id);\r\n\t\tcase 'v':\r\n\t\t\treturn $gameMap.vehicle(id);\r\n\t\tcase 'f':\r\n\t\t\treturn $gamePlayer.followers()._data[id];\r\n\t}\r\n\treturn char;\r\n}\r\nmv3d.getTargetString=function(char){\r\n\tif( char instanceof Game_Player){\r\n\t\treturn `@p`;\r\n\t}\r\n\tif( char instanceof Game_Event ){\r\n\t\treturn `@e${char._eventId}`;\r\n\t}\r\n\tif( char instanceof Game_Follower){\r\n\t\treturn `@f${$gamePlayer._followers._data.indexOf(char)}`;\r\n\t}\r\n\tif( char instanceof Game_Vehicle){\r\n\t\treturn `@v${$gameMap._vehicles.indexOf(char)}`;\r\n\t}\r\n}\r\n\r\nGame_CharacterBase.prototype.mv3d_requestAnimation = function(id,opts={}) {\r\n\tthis.requestAnimation(id);\r\n\tthis._mv3d_animationSettings=opts;\r\n};\r\n\r\nGame_Character.prototype.mv3d_configure = function(data){\r\n\tmv3d.readConfigurationFunctions(\r\n\t\tdata,\r\n\t\tmv3d.eventConfigurationFunctions,\r\n\t\tthis.mv3d_settings,\r\n\t);\r\n\tif(this.mv3d_sprite){\r\n\t\tthis.mv3d_sprite.pageConfigure(this.mv3d_settings);\r\n\t}\r\n};\r\n\r\nmv3d.command=function(...s){\r\n\ts=s.join(' ').split(' ');\r\n\trunPluginCommand({\r\n\t\t_mapId: $gameMap.mapId(),\r\n\t\t_eventId: 0,\r\n\t},s);\r\n};","import mv3d from \"./mv3d.js\";\r\nimport { Mesh, VertexData } from \"./mod_babylon.js\";\r\nimport { cos, sin, tileWidth, tileHeight, unround, PI, PI2 } from \"./util.js\";\r\n\r\nexport class CellMeshBuilder{\r\n\tconstructor(){\r\n\t\tthis.submeshBuilders={};\r\n\t}\r\n\tbuild(){\r\n\t\tconst submeshBuildersArray=Object.values(this.submeshBuilders);\r\n\t\tif(!submeshBuildersArray.length){ return null; }\r\n\t\tconst submeshes = submeshBuildersArray.map(builder=>builder.build());\r\n\t\tconst totalVertices = submeshes.reduce((total,mesh)=>{\r\n\t\t\tif(typeof total!=='number'){ total=total.getTotalVertices(); }\r\n\t\t\treturn total+mesh.getTotalVertices();\r\n\t\t});\r\n\t\tconst mesh = Mesh.MergeMeshes(submeshes,true,totalVertices>65536,undefined,false,true);\r\n\t\treturn mesh;\r\n\t}\r\n\tgetBuilder(material){\r\n\t\tif(!(material.name in this.submeshBuilders)){\r\n\t\t\tthis.submeshBuilders[material.name] = new SubMeshBuilder(material);\r\n\t\t}\r\n\t\treturn this.submeshBuilders[material.name];\r\n\t}\r\n\taddWallFace(material,tx,ty,tw,th,x,y,z,w,h,rot,options={}){\r\n\t\tconst builder = this.getBuilder(material);\r\n\t\tconst uvRect = SubMeshBuilder.getUvRect(material.diffuseTexture,tx,ty,tw,th);\r\n\t\tbuilder.addWallFace(x,y,z,w,h,rot,uvRect,options);\r\n\t\tif(options.double){\r\n\t\t\toptions.flip=!options.flip;\r\n\t\t\tbuilder.addWallFace(x,y,z,w,h,rot,uvRect,options);\r\n\t\t}\r\n\t}\r\n\taddFloorFace(material,tx,ty,tw,th,x,y,z,w,h,options={}){\r\n\t\tconst builder = this.getBuilder(material);\r\n\t\tconst uvRect = SubMeshBuilder.getUvRect(material.diffuseTexture,tx,ty,tw,th);\r\n\t\tbuilder.addFloorFace(x,y,z,w,h,uvRect,options);\r\n\t\tif(options.double){\r\n\t\t\toptions.flip=!options.flip;\r\n\t\t\tbuilder.addFloorFace(x,y,z,w,h,uvRect,options);\r\n\t\t}\r\n\t}\r\n\taddSlopeFace(material,tx,ty,tw,th,x,y,z,w,h,rot,options={}){\r\n\t\tconst builder = this.getBuilder(material);\r\n\t\tconst uvRect = SubMeshBuilder.getUvRect(material.diffuseTexture,tx,ty,tw,th);\r\n\t\tbuilder.addSlopeFace(x,y,z,w,h,rot,uvRect,options);\r\n\t\tif(options.double){\r\n\t\t\toptions.flip=!options.flip;\r\n\t\t\tbuilder.addSlopeFace(x,y,z,w,h,rot,uvRect,options);\r\n\t\t}\r\n\t}\r\n\taddSlopeSide(material,tx,ty,tw,th,x,y,z,w,h,rot,options={}){\r\n\t\tconst builder = this.getBuilder(material);\r\n\t\tconst uvRect = SubMeshBuilder.getUvRect(material.diffuseTexture,tx,ty,tw,th);\r\n\t\tbuilder.addSlopeSide(x,y,z,w,h,rot,uvRect,options);\r\n\t\tif(options.double){\r\n\t\t\toptions.flip=!options.flip;\r\n\t\t\tbuilder.addSlopeSide(x,y,z,w,h,rot,uvRect,options);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass SubMeshBuilder{\r\n\tconstructor(material){\r\n\t\tthis.material=material;\r\n\t\tthis.positions=[];\r\n\t\tthis.indices=[];\r\n\t\tthis.normals=[];\r\n\t\tthis.uvs=[];\r\n\t}\r\n\tbuild(){\r\n\t\tconst mesh = new Mesh('cell mesh', mv3d.scene);\r\n\t\t//VertexData.ComputeNormals(this.positions,this.indices,this.normals);\r\n\t\tconst vdata = new VertexData();\r\n\t\tvdata.positions=this.positions;\r\n\t\tvdata.indices=this.indices;\r\n\t\tvdata.normals=this.normals;\r\n\t\tvdata.uvs=this.uvs;\r\n\t\tvdata.applyToMesh(mesh);\r\n\t\tmesh.material=this.material;\r\n\t\treturn mesh;\r\n\t}\r\n\taddWallFace(x,z,y,w,h,rot,uvr,options){\r\n\t\tz=-z;y=y;\r\n\t\tconst xf=cos(rot);\r\n\t\tconst zf=sin(rot);\r\n\t\tconst ww=w/2, hh=h/2;\r\n\t\tconst positions = [\r\n\t\t\tx-ww*xf, y+hh, z+ww*zf,\r\n\t\t\tx+ww*xf, y+hh, z-ww*zf,\r\n\t\t\tx-ww*xf, y-hh, z+ww*zf,\r\n\t\t\tx+ww*xf, y-hh, z-ww*zf,\r\n\t\t];\r\n\t\tlet normals = [ -zf,0,-xf, -zf,0,-xf, -zf,0,-xf, -zf,0,-xf ];\r\n\t\tconst uvs = SubMeshBuilder.getDefaultUvs(uvr);\r\n\t\tconst indices=SubMeshBuilder.getDefaultIndices();\r\n\t\tif(options.flip){ SubMeshBuilder.flipFace(indices,normals); }\r\n\t\tif(options.abnormal){ normals=[ 0,1,0, 0,1,0, 0,1,0, 0,1,0]; }\r\n\t\tthis.pushNewData(positions,indices,normals,uvs);\r\n\t}\r\n\taddFloorFace(x,z,y,w,h,uvr,options){\r\n\t\tz=-z;y=y;\r\n\t\t//const f=Boolean(options.flip)*-2+1;\r\n\t\t//const ww=f*w/2, hh=h/2;\r\n\t\tconst ww=w/2, hh=h/2;\r\n\t\tconst positions = [\r\n\t\t\tx-ww, y, z+hh,\r\n\t\t\tx+ww, y, z+hh,\r\n\t\t\tx-ww, y, z-hh,\r\n\t\t\tx+ww, y, z-hh,\r\n\t\t];\r\n\t\t//const normals=[ 0,f,0, 0,f,0, 0,f,0, 0,f,0 ];\r\n\t\tconst normals=[ 0,1,0, 0,1,0, 0,1,0, 0,1,0 ];\r\n\t\tconst uvs = SubMeshBuilder.getDefaultUvs(uvr);\r\n\t\tconst indices=SubMeshBuilder.getDefaultIndices();\r\n\t\tif(options.flip){ SubMeshBuilder.flipFace(indices,normals); }\r\n\t\tthis.pushNewData(positions,indices,normals,uvs);\r\n\t}\r\n\taddSlopeFace(x,z,y,w,h,rot,uvr,options){\r\n\t\tz=-z;y=y;\r\n\t\tconst xf=cos(rot);\r\n\t\tconst zf=sin(rot);\r\n\t\tconst ww=w/2, hh=h/2;\r\n\t\tconst positions = options.autotile ? [\r\n\t\t\tx-ww, y+hh+hh*Math.round(sin(-rot+PI*1/4)), z+ww,\r\n\t\t\tx+ww, y+hh+hh*Math.round(sin(-rot+PI*3/4)), z+ww,\r\n\t\t\tx-ww, y+hh+hh*Math.round(sin(-rot+PI*7/4)), z-ww,\r\n\t\t\tx+ww, y+hh+hh*Math.round(sin(-rot+PI*5/4)), z-ww,\r\n\t\t] : [\r\n\t\t\tx-ww*xf+ww*zf, y+h, z+ww*zf+ww*xf,\r\n\t\t\tx+ww*xf+ww*zf, y+h, z-ww*zf+ww*xf,\r\n\t\t\tx-ww*xf-ww*zf, y, z+ww*zf-ww*xf,\r\n\t\t\tx+ww*xf-ww*zf, y, z-ww*zf-ww*xf,\r\n\t\t];\r\n\t\tconst hn=Math.pow(2,-h);\r\n\t\tconst ihn=1-hn;\r\n\t\tconst normals=[ -zf*ihn,hn,-xf*ihn, -zf*ihn,hn,-xf*ihn, -zf*ihn,hn,-xf*ihn, -zf*ihn,hn,-xf*ihn ];\r\n\t\tlet uvs = SubMeshBuilder.getDefaultUvs(uvr);\r\n\t\tconst indices=SubMeshBuilder.getDefaultIndices();\r\n\t\tif(options.flip){ SubMeshBuilder.flipFace(indices,normals); }\r\n\t\tthis.pushNewData(positions,indices,normals,uvs);\r\n\t}\r\n\taddSlopeSide(x,z,y,w,h,rot,uvr,options){\r\n\t\tz=-z;y=y;\r\n\t\tconst xf=cos(rot);\r\n\t\tconst zf=sin(rot);\r\n\t\tconst ww=w/2, hh=h/2;\r\n\t\tconst positions = [\r\n\t\t\tx-ww*xf, y+h, z+ww*zf,\r\n\t\t\tx-ww*xf, y, z+ww*zf,\r\n\t\t\tx+ww*xf, y, z-ww*zf,\r\n\t\t];\r\n\t\tconst normals=[ -zf,0,-xf, -zf,0,-xf, -zf,0,-xf ];\r\n\t\tconst uvs = [\r\n\t\t\tuvr.x1,uvr.y1,\r\n\t\t\tuvr.x1,uvr.y2,\r\n\t\t\tuvr.x2,uvr.y2,\r\n\t\t];\r\n\t\tconst indices=[0,1,2];\r\n\t\tif(options.flip){ SubMeshBuilder.flipFace(indices,normals); }\r\n\t\tthis.pushNewData(positions,indices,normals,uvs);\r\n\t}\r\n\tpushNewData(positions,indices,normals,uvs){\r\n\t\tthis.indices.push(...indices.map(i=>i+this.positions.length/3));\r\n\t\tthis.positions.push(...positions);\r\n\t\tthis.normals.push(...normals);\r\n\t\tthis.uvs.push(...uvs);\r\n\t}\r\n\tstatic getUvRect(tsTexture,x,y,w,h){\r\n\t\tconst { width, height } = tsTexture.getBaseSize();\r\n\t\tif(mv3d.EDGE_FIX){ x+=mv3d.EDGE_FIX;y+=mv3d.EDGE_FIX;w-=mv3d.EDGE_FIX*2;h-=mv3d.EDGE_FIX*2; }\r\n\t\treturn {\r\n\t\t\tx1:x/width,\r\n\t\t\ty1:(height-y)/height,\r\n\t\t\tx2:(x+w)/width,\r\n\t\t\ty2:(height-y-h)/height,\r\n\t\t};\r\n\t}\r\n\tstatic getDefaultUvs(uvr){\r\n\t\treturn [\r\n\t\t\tuvr.x1,uvr.y1,\r\n\t\t\tuvr.x2,uvr.y1,\r\n\t\t\tuvr.x1,uvr.y2,\r\n\t\t\tuvr.x2,uvr.y2,\r\n\t\t];\r\n\t}\r\n\tstatic getDefaultIndices(){ return [1,0,2,1,2,3]; }\r\n\tstatic flipFace(indices,normals){\r\n\t\tindices.reverse();\r\n\t\tfor(let i=0;i<normals.length;++i){ normals[i]*=-1; }\r\n\t}\r\n}","import mv3d from './mv3d.js';\r\nimport { TransformNode, Mesh, MeshBuilder, Vector3, Vector2, FRONTSIDE, BACKSIDE, WORLDSPACE, LOCALSPACE, DOUBLESIDE, Plane } from \"./mod_babylon.js\";\r\nimport { tileSize, XAxis, YAxis, tileWidth, tileHeight, sleep, snooze, sin, cos } from './util.js';\r\nimport { CellMeshBuilder } from './MapCellBuilder.js';\r\n\r\nconst SOURCEPLANE_GROUND = new Plane(0, 1, -Math.pow(0.1,100), 0);\r\nconst SOURCEPLANE_WALL = new Plane(0,0,-1,0);\r\n\r\nexport class MapCell extends TransformNode{\r\n\tconstructor(cx,cy){\r\n\t\tconst key = [cx,cy].toString();\r\n\t\tsuper(`MapCell[${key}]`,mv3d.scene);\r\n\t\tthis.parent=mv3d.map;\r\n\t\t//mv3d.cells[key]=this;\r\n\t\tthis.cx=cx; this.cy=cy;\r\n\t\tthis.ox=cx*mv3d.CELL_SIZE; this.oy=cy*mv3d.CELL_SIZE;\r\n\t\tthis.x=this.ox; this.y=this.oy;\r\n\t\tthis.key=key;\r\n\t\tthis.characters=[];\r\n\r\n\t\t//this.load();\r\n\t}\r\n\tupdate(){\r\n\t\tconst loopPos = mv3d.loopCoords((this.cx+0.5)*mv3d.CELL_SIZE,(this.cy+0.5)*mv3d.CELL_SIZE);\r\n\t\tthis.x=loopPos.x-mv3d.CELL_SIZE/2;\r\n\t\tthis.y=loopPos.y-mv3d.CELL_SIZE/2;\r\n\t}\r\n\tasync load(){\r\n\t\tconst shapes = mv3d.enumShapes;\r\n\t\tthis.builder = new CellMeshBuilder();\r\n\t\t// load all tiles in mesh\r\n\t\tlet cellWidth=mv3d.CELL_SIZE,cellHeight=mv3d.CELL_SIZE;\r\n\t\tif(mv3d.getMapConfig('edge')!=='clamp'){\r\n\t\t\tcellWidth = Math.min(mv3d.CELL_SIZE,mv3d.mapWidth()-this.cx*mv3d.CELL_SIZE);\r\n\t\t\tcellHeight = Math.min(mv3d.CELL_SIZE,mv3d.mapHeight()-this.cy*mv3d.CELL_SIZE);\r\n\t\t}\r\n\t\tconst ceiling = mv3d.getCeilingConfig();\r\n\t\tfor (let y=0; y<cellHeight; ++y)\r\n\t\tfor (let x=0; x<cellWidth; ++x){\r\n\t\t\tceiling.cull=false;\r\n\t\t\tconst tileData = mv3d.getTileData(this.ox+x,this.oy+y);\r\n\t\t\tlet lastZ=Infinity;\r\n\t\t\tconst cullHeight = mv3d.getCullingHeight(this.ox+x,this.oy+y);\r\n\t\t\tfor (let l=3; l>=0; --l){\r\n\t\t\t\tif(mv3d.isTileEmpty(tileData[l])){ continue; }\r\n\t\t\t\tlet z = mv3d.getStackHeight(this.ox+x,this.oy+y,l);\r\n\t\t\t\tconst tileConf = mv3d.getTileTextureOffsets(tileData[l],this.ox+x,this.oy+y,l);\r\n\t\t\t\tconst shape = tileConf.shape;\r\n\t\t\t\ttileConf.realId = tileData[l];\r\n\t\t\t\t//tileConf.isAutotile = Tilemap.isAutotile(tileData[l]);\r\n\t\t\t\t//tileConf.isFringe = mv3d.isStarTile(tileData[l]);\r\n\t\t\t\t//tileConf.isTable = mv3d.isTableTile(tileData[l]);\r\n\t\t\t\tlet wallHeight = mv3d.getTileHeight(this.ox+x,this.oy+y,l)||tileConf.height||0;\r\n\t\t\t\tlet pitCull = false;\r\n\t\t\t\tif(lastZ<z){ pitCull=true; }\r\n\t\t\t\tif(!mv3d.getTileFringe(this.ox+x,this.oy+y,l)){\r\n\t\t\t\t\tlastZ=z;\r\n\t\t\t\t}\r\n\t\t\t\t//z+=tileConf.fringe;\r\n\t\t\t\t//if(mv3d.isStarTile(tileData[l])){ z+=tileConf.fringeHeight; }\r\n\t\t\t\tif(!shape||shape===shapes.FLAT||shape===shapes.SLOPE){\r\n\t\t\t\t\tconst hasWall=wallHeight||l===0;\r\n\t\t\t\t\tconst hasBottom=wallHeight>0&&z-wallHeight>cullHeight||tileConf.fringe>0;\r\n\t\t\t\t\tif(!shape||shape===shapes.FLAT){\r\n\t\t\t\t\t\tif(!pitCull){\r\n\t\t\t\t\t\t\tawait this.loadTile(tileConf,x,y,z+l*mv3d.LAYER_DIST*!hasWall,l);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(hasWall){\r\n\t\t\t\t\t\t\tawait this.loadWalls(tileConf,x,y,z,l,wallHeight);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(hasBottom){\r\n\t\t\t\t\t\t\tawait this.loadTile(tileConf,x,y,z-wallHeight,l,true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else if(shape===shapes.SLOPE){\r\n\t\t\t\t\t\tconst slopeHeight = tileConf.slopeHeight||1;\r\n\t\t\t\t\t\twallHeight -= slopeHeight;\r\n\t\t\t\t\t\tawait this.loadSlope(tileConf,x,y,z,l,slopeHeight);\r\n\t\t\t\t\t\tif(hasWall){\r\n\t\t\t\t\t\t\tawait this.loadWalls(tileConf,x,y,z-slopeHeight,l,wallHeight);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(hasBottom){\r\n\t\t\t\t\t\t\tawait this.loadTile(tileConf,x,y,z-slopeHeight-Math.max(0,wallHeight),l,true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(z>=ceiling.height){ ceiling.cull=true; }\r\n\t\t\t\t}\r\n\t\t\t\tif(shape===shapes.FENCE){\r\n\t\t\t\t\tawait this.loadFence(tileConf,x,y,z,l,wallHeight);\r\n\t\t\t\t}else if(shape===shapes.CROSS||shape===shapes.XCROSS){\r\n\t\t\t\t\tawait this.loadCross(tileConf,x,y,z,l,wallHeight);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!mv3d.isTileEmpty(ceiling.bottom_id) && !ceiling.cull){\r\n\t\t\t\tawait this.loadTile(ceiling,x,y,ceiling.height,0,true,!ceiling.skylight);\r\n\t\t\t}\r\n\r\n\t\t\t//if(mv3d.mapReady){ await sleep(); }\r\n\t\t\t//if(!mv3d.mapLoaded){ this.earlyExit(); return; }\r\n\t\t}\r\n\t\t\r\n\t\tthis.mesh=this.builder.build();\r\n\t\tif(this.mesh){\r\n\t\t\tthis.mesh.isPickable=false;\r\n\t\t\tsleep(10).then(()=>this.mesh.isPickable=true);\r\n\t\t\tthis.mesh.parent=this;\r\n\t\t\tthis.mesh.alphaIndex=0;\r\n\t\t\tthis.mesh.renderingGroupId=mv3d.enumRenderGroups.MAIN;\r\n\t\t\tmv3d.callFeatures('createCellMesh',this.mesh);\r\n\t\t}\r\n\t\tdelete this.builder\r\n\t}\r\n\tdispose(){\r\n\t\tsuper.dispose(...arguments);\r\n\t\tif(this.mesh){\r\n\t\t\tmv3d.callFeatures('destroyCellMesh',this.mesh);\r\n\t\t}\r\n\t}\r\n\tasync loadTile(tileConf,x,y,z,l,ceiling=false,double=false){\r\n\t\tconst tileId = ceiling?tileConf.bottom_id:tileConf.top_id;\r\n\t\tif(mv3d.isTileEmpty(tileId)){ return; }\r\n\t\tconst configRect = ceiling?tileConf.bottom_rect:tileConf.top_rect;\r\n\t\tconst isAutotile = Tilemap.isAutotile(tileId)&&!configRect;\r\n\t\tlet rects;\r\n\t\tif(configRect){\r\n\t\t\trects=[configRect];\r\n\t\t}else{\r\n\t\t\trects = mv3d.getTileRects(tileId);\r\n\t\t}\r\n\t\tconst tsMaterial = await mv3d.getCachedTilesetMaterialForTile(tileConf,ceiling?'bottom':'top');\r\n\t\tfor (const rect of rects){\r\n\t\t\tthis.builder.addFloorFace(tsMaterial,rect.x,rect.y,rect.width,rect.height,\r\n\t\t\t\tx + (rect.ox|0)/tileSize() - 0.25*isAutotile,\r\n\t\t\t\ty + (rect.oy|0)/tileSize() - 0.25*isAutotile,\r\n\t\t\t\tz,\r\n\t\t\t\t1-isAutotile/2, 1-isAutotile/2, {flip:ceiling,double:double}\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\tasync loadWalls(tileConf,x,y,z,l,wallHeight){\r\n\t\tfor (const np of MapCell.neighborPositions){\r\n\t\t\tawait this.loadWall(tileConf,x,y,z,l,wallHeight,np);\r\n\t\t}\r\n\t}\r\n\tasync loadWall(tileConf,x,y,z,l,wallHeight,np){\r\n\t\tconst isFringe = mv3d.isStarTile(tileConf.realId)||tileConf.fringe>0;\r\n\t\t// don't render walls on edge of map (unless it loops)\r\n\t\tif( !mv3d.getMapConfig('edge',true) )\r\n\t\tif((this.ox+x+np.x>=mv3d.mapWidth()||this.ox+x+np.x<0)&&!mv3d.loopHorizontal()\r\n\t\t||(this.oy+y+np.y>=mv3d.mapHeight()||this.oy+y+np.y<0)&&!mv3d.loopVertical()){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet neededHeight=wallHeight;\r\n\t\tlet tileId=tileConf.side_id,configRect,texture_side='side';\r\n\t\tif(mv3d.isTileEmpty(tileId)){ return; }\r\n\t\t\r\n\t\tconst neighborHeight = mv3d.getCullingHeight(this.ox+x+np.x,this.oy+y+np.y,tileConf.depth>0?3:l,{\r\n\t\t\tignorePits:!(tileConf.depth>0),\r\n\t\t\tdir:Input._makeNumpadDirection(np.x,np.y),\r\n\t\t});\r\n\t\tneededHeight = z-neighborHeight;\r\n\t\tif(neededHeight>0&&(l>0||isFringe)){ neededHeight=Math.min(wallHeight,neededHeight); }\r\n\r\n\t\tif(tileConf.depth>0&&neededHeight<0){\r\n\t\t\tif(mv3d.tileHasPit(this.ox+x+np.x,this.oy+y+np.y,l)){ return; }\r\n\t\t\t//if(mv3d.isTilePit(this.ox+x+np.x,this.oy+y+np.y,l)){ return; }\r\n\t\t\tneededHeight = Math.max(neededHeight,-tileConf.depth);\r\n\t\t\tif(tileConf.hasInsideConf){\r\n\t\t\t\ttexture_side='inside';\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(neededHeight<=0){ return; }\r\n\r\n\t\tif(texture_side==='inside'){\r\n\t\t\ttileId=tileConf.inside_id;\r\n\t\t\tif(tileConf.inside_rect){ configRect = tileConf.inside_rect; }\r\n\t\t}else{\r\n\t\t\tif(tileConf.side_rect){ configRect = tileConf.side_rect; }\r\n\t\t}\r\n\r\n\t\tconst tsMaterial = await mv3d.getCachedTilesetMaterialForTile(tileConf,texture_side);\r\n\r\n\t\tconst wallPos = new Vector3( x+np.x/2, y+np.y/2, z );\r\n\t\tconst rot = -Math.atan2(np.x, np.y);\r\n\t\tif(configRect || !Tilemap.isAutotile(tileId)){\r\n\t\t\tconst rect = configRect ? configRect : mv3d.getTileRects(tileId)[0];\r\n\t\t\tconst builderOptions={};\r\n\t\t\tif(neededHeight<0){ builderOptions.flip=true; }\r\n\t\t\tthis.builder.addWallFace(tsMaterial,rect.x,rect.y,rect.width,rect.height,\r\n\t\t\t\twallPos.x,\r\n\t\t\t\twallPos.y,\r\n\t\t\t\tz - neededHeight/2,\r\n\t\t\t\t1,Math.abs(neededHeight), rot, builderOptions\r\n\t\t\t);\r\n\t\t}else{ // Autotile\r\n\t\t\t//const npl=MapCell.neighborPositions[(+ni-1).mod(4)];\r\n\t\t\t//const npr=MapCell.neighborPositions[(+ni+1).mod(4)];\r\n\t\t\tconst npl=new Vector2(-np.y,np.x);\r\n\t\t\tconst npr=new Vector2(np.y,-np.x);\r\n\t\t\tconst leftHeight = mv3d.getCullingHeight(this.ox+x+npl.x,this.oy+y+npl.y,l,{dir:Input._makeNumpadDirection(npl.x,npl.y)});\r\n\t\t\tconst rightHeight = mv3d.getCullingHeight(this.ox+x+npr.x,this.oy+y+npr.y,l,{dir:Input._makeNumpadDirection(npr.x,npr.y)});\r\n\t\t\tconst {x:bx,y:by} = this.getAutotileCorner(tileId,tileConf.realId,true);\r\n\t\t\tlet wallParts=Math.max(1,Math.abs(Math.round(neededHeight*2)));\r\n\t\t\tlet partHeight=Math.abs(neededHeight/wallParts);\r\n\t\t\tlet sw = tileSize()/2;\r\n\t\t\tlet sh = tileSize()/2;\r\n\t\t\tif(mv3d.isTableTile(tileConf.realId)){\r\n\t\t\t\tsh=tileSize()/3;\r\n\t\t\t\twallParts=1;\r\n\t\t\t\tpartHeight=wallHeight;\r\n\t\t\t\t//partHeight=neededHeight;\r\n\t\t\t}\r\n\t\t\tfor (let ax=-1; ax<=1; ax+=2){\r\n\t\t\t\tfor(let az=0;az<wallParts;++az){\r\n\t\t\t\t\tlet hasLeftEdge,hasRightEdge;\r\n\t\t\t\t\tif(mv3d.isTableTile(tileConf.realId)){\r\n\t\t\t\t\t\thasLeftEdge = leftHeight!=z;\r\n\t\t\t\t\t\thasRightEdge = rightHeight!=z;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\thasLeftEdge = leftHeight<z-az*partHeight;\r\n\t\t\t\t\t\thasRightEdge = rightHeight<z-az*partHeight;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet sx,sy;\r\n\t\t\t\t\tsx=bx*tileSize();\r\n\t\t\t\t\tsy=by*tileSize();\r\n\t\t\t\t\tsx=(bx+(ax>0?0.5+hasRightEdge:1-hasLeftEdge))*tileSize();\r\n\t\t\t\t\tif(mv3d.isWaterfallTile(tileId)){\r\n\t\t\t\t\t\tsy=(by+az%2/2)*tileSize();\r\n\t\t\t\t\t}else if(mv3d.isTableTile(tileId)){\r\n\t\t\t\t\t\tsy=(by+5/3)*tileSize();\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tsy=(by+(az===0?0:az===wallParts-1?1.5:1-az%2*0.5))*tileSize();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst builderOptions={};\r\n\t\t\t\t\tif(neededHeight<0){ builderOptions.flip=true; }\r\n\t\t\t\t\tthis.builder.addWallFace(tsMaterial,sx,sy,sw,sh,\r\n\t\t\t\t\t\twallPos.x+0.25*ax*Math.cos(rot),\r\n\t\t\t\t\t\twallPos.y+0.25*ax*Math.sin(rot),\r\n\t\t\t\t\t\tz - neededHeight*(neededHeight<0) - partHeight/2 - partHeight*az,\r\n\t\t\t\t\t\t0.5,partHeight, rot, builderOptions\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tasync loadFence(tileConf,x,y,z,l,wallHeight){\r\n\t\tconst tileId = tileConf.side_id;\r\n\t\tif(mv3d.isTileEmpty(tileId)){ return; }\r\n\t\tconst configRect = tileConf.side_rect;\r\n\t\tconst tsMaterial = await mv3d.getCachedTilesetMaterialForTile(tileConf,'side');\r\n\t\tconst isAutotile = Tilemap.isAutotile(tileId);\r\n\t\tconst edges = [];\r\n\t\tconst fenceposts = tileConf.fencePosts==null?true:tileConf.fencePosts;\r\n\t\tfor (let ni=0; ni<MapCell.neighborPositions.length; ++ni){\r\n\t\t\tconst np = MapCell.neighborPositions[ni];\r\n\t\t\tconst neighborHeight = mv3d.getTileHeight(this.ox+x+np.x,this.oy+y+np.y,l);\r\n\t\t\tif(neighborHeight!==wallHeight){ edges.push(ni); }\r\n\t\t}\r\n\t\tfor (let ni=0; ni<MapCell.neighborPositions.length; ++ni){\r\n\t\t\tconst np = MapCell.neighborPositions[ni];\r\n\r\n\t\t\tlet edge = edges.includes(ni);\r\n\t\t\tif(!isAutotile||!fenceposts){\r\n\t\t\t\tlet connect = !(edge&&edges.length<4);\r\n\t\t\t\tif(edges.length===3 && !edges.includes((ni+2)%4)){ connect=true; }\r\n\t\t\t\tif(!connect){ continue; }\r\n\t\t\t}\r\n\r\n\t\t\tconst rightSide = np.x>0||np.y<0;\r\n\t\t\tlet rot = Math.atan2(np.x, np.y)+Math.PI/2;\r\n\t\t\tif(rightSide){\r\n\t\t\t\trot-=Math.PI;\r\n\t\t\t}\r\n\r\n\t\t\tif(isAutotile&&!configRect){\r\n\t\t\t\tconst {x:bx,y:by} = this.getAutotileCorner(tileId,tileConf.realId,true);\r\n\t\t\t\tfor (let az=0;az<=1;++az){\r\n\t\t\t\t\tthis.builder.addWallFace(tsMaterial,\r\n\t\t\t\t\t\t(edge ? (bx+rightSide*1.5) : (bx+1-rightSide*0.5) )*tileWidth(),\r\n\t\t\t\t\t\t(by+az*1.5)*tileHeight(),\r\n\t\t\t\t\t\ttileWidth()/2, tileHeight()/2,\r\n\t\t\t\t\t\tx+np.x/4,\r\n\t\t\t\t\t\ty+np.y/4,\r\n\t\t\t\t\t\tz-wallHeight/4-az*wallHeight/2,\r\n\t\t\t\t\t\t0.5,wallHeight/2, -rot, {double:true, abnormal:mv3d.ABNORMAL}\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tconst rect = configRect ? configRect : mv3d.getTileRects(tileId)[0];\r\n\t\t\t\tthis.builder.addWallFace(tsMaterial,\r\n\t\t\t\t\trect.x+rect.width/2*(np.x>0||np.y>0),\r\n\t\t\t\t\trect.y,\r\n\t\t\t\t\trect.width/2, rect.height,\r\n\t\t\t\t\tx+np.x/4,\r\n\t\t\t\t\ty+np.y/4,\r\n\t\t\t\t\tz-wallHeight/2,\r\n\t\t\t\t\t0.5,wallHeight, rot, {double:true}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tasync loadCross(tileConf,x,y,z,l,wallHeight){\r\n\t\tconst tileId = tileConf.side_id;\r\n\t\tif(mv3d.isTileEmpty(tileId)){ return; }\r\n\t\tconst configRect = tileConf.side_rect;\r\n\t\tconst tsMaterial = await mv3d.getCachedTilesetMaterialForTile(tileConf,'side');\r\n\t\tconst isAutotile = Tilemap.isAutotile(tileId);\r\n\t\tlet rects;\r\n\t\tif(configRect){\r\n\t\t\trects=[configRect];\r\n\t\t}else{\r\n\t\t\trects = mv3d.getTileRects(tileId);\r\n\t\t}\r\n\t\tconst rot = tileConf.shape===mv3d.enumShapes.XCROSS ? Math.PI/4 : 0;\r\n\t\tconst partHeight = isAutotile ? wallHeight/2 : wallHeight;\r\n\t\tfor (let i=0; i<=1; ++i){\r\n\t\t\tfor (const rect of rects){\r\n\t\t\t\tconst irot = -Math.PI/2*i+rot;\r\n\t\t\t\tconst trans= -0.25*isAutotile+(rect.ox|0)/tileWidth();\r\n\t\t\t\tthis.builder.addWallFace(tsMaterial,\r\n\t\t\t\t\trect.x,rect.y,rect.width,rect.height,\r\n\t\t\t\t\tx+trans*Math.cos(irot),\r\n\t\t\t\t\ty+trans*Math.sin(irot),\r\n\t\t\t\t\tz - (rect.oy|0)/tileHeight()*wallHeight - partHeight/2,\r\n\t\t\t\t\t1-isAutotile/2,partHeight, irot, {double:true, abnormal:mv3d.ABNORMAL}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tasync loadSlope(tileConf,x,y,z,l,slopeHeight){\r\n\t\t//const rot = Math.random()*Math.PI*2;\r\n\t\t//const rot = Math.round((Math.random()*Math.PI*2)/(Math.PI/2))*Math.PI/2;\r\n\t\tconst {dir,rot} = mv3d.getSlopeDirection(this.ox+x,this.oy+y,l,true);\r\n\t\tconst n1=new Vector2(-sin(rot+Math.PI),cos(rot+Math.PI));\r\n\t\tif(mv3d.getCullingHeight(this.ox+x+n1.x,this.oy+y+n1.y,l)<z){\r\n\t\t\tawait this.loadWall(tileConf,x,y,z,l+1,slopeHeight,n1);\r\n\t\t}\r\n\t\tconst n2=new Vector2(n1.y,-n1.x);\r\n\t\tconst n2x=this.ox+x+n2.x, n2y=this.oy+y+n2.y;\r\n\t\tif(mv3d.getCullingHeight(n2x,n2y,l)<z){\r\n\t\t\tlet otherslope = mv3d.isRampAt(n2x,n2y,z);\r\n\t\t\tif(!otherslope||otherslope.z2!==z||otherslope.z1!==z-slopeHeight\r\n\t\t\t||dir!=mv3d.getSlopeDirection(n2x,n2y,otherslope.l,true).dir){\r\n\t\t\t\tawait this.loadSlopeSide(tileConf,x+n2.x/2,y+n2.y/2,z,l,slopeHeight,rot+Math.PI/2);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst n3=new Vector2(-n1.y,n1.x);\r\n\t\tconst n3x=this.ox+x+n3.x, n3y=this.oy+y+n3.y;\r\n\t\tif(mv3d.getCullingHeight(n3x,n3y,l)<z){\r\n\t\t\tlet otherslope = mv3d.isRampAt(n3x,n3y,z);\r\n\t\t\tif(!otherslope||otherslope.z2!==z||otherslope.z1!==z-slopeHeight\r\n\t\t\t||dir!=mv3d.getSlopeDirection(n3x,n3y,otherslope.l,true).dir){\r\n\t\t\t\tawait this.loadSlopeSide(tileConf,x+n3.x/2,y+n3.y/2,z,l,slopeHeight,rot+Math.PI/2,{flip:true});\r\n\t\t\t}\r\n\t\t}\r\n\t\tawait this.loadSlopeTop(tileConf,x,y,z,l,slopeHeight,rot);\r\n\t}\r\n\tasync loadSlopeTop(tileConf,x,y,z,l,slopeHeight,rot){\r\n\t\tconst tileId=tileConf.top_id;\r\n\t\tconst tsMaterial = await mv3d.getCachedTilesetMaterialForTile(tileConf,'top');\r\n\t\tconst isAutotile = Tilemap.isAutotile(tileId)&&!tileConf.top_rect;\r\n\t\tif(isAutotile){\r\n\t\t\tconst rects = mv3d.getTileRects(tileId);\r\n\t\t\tfor (let i=0;i<rects.length;++i){\r\n\t\t\t\tconst rect = rects[i];\r\n\t\t\t\tconst ix=(i+1)%2*-2+1, iy=(Math.floor(i/2)+1)%2*2-1;\r\n\t\t\t\tconst hx=Math.max(0,sin(rot)*ix)*slopeHeight/2;\r\n\t\t\t\tconst hy=Math.max(0,cos(rot)*iy)*slopeHeight/2;\r\n\t\t\t\tthis.builder.addSlopeFace(tsMaterial,rect.x,rect.y,rect.width,rect.height,\r\n\t\t\t\t\tx + rect.ox/tileSize() - 0.25,\r\n\t\t\t\t\ty + rect.oy/tileSize() - 0.25,\r\n\t\t\t\t\tz - slopeHeight + hx + hy,\r\n\t\t\t\t\t0.5, slopeHeight/2, rot, {autotile:true}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tconst rect = tileConf.top_rect?tileConf.top_rect:mv3d.getTileRects(tileId)[0];\r\n\t\t\tthis.builder.addSlopeFace(tsMaterial,rect.x,rect.y,rect.width,rect.height,\r\n\t\t\t\tx, y, z - slopeHeight,\r\n\t\t\t\t1, slopeHeight, rot, {}\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\tasync loadSlopeSide(tileConf,x,y,z,l,slopeHeight,rot,options={}){\r\n\t\tconst tileId=tileConf.side_id;\r\n\t\tconst tsMaterial = await mv3d.getCachedTilesetMaterialForTile(tileConf,'side');\r\n\t\tconst isAutotile = Tilemap.isAutotile(tileId)&&!tileConf.side_rect;\r\n\t\tlet rect;\r\n\t\tif(isAutotile){\r\n\t\t\tconst {x:bx,y:by} = this.getAutotileCorner(tileId,tileConf.realId,true);\r\n\t\t\trect={x:(bx+0.5)*tileWidth(),y:(by+0.5)*tileHeight(),width:tileWidth(),height:tileHeight()};\r\n\t\t}else{\r\n\t\t\trect = tileConf.side_rect?tileConf.side_rect:mv3d.getTileRects(tileId)[0];\r\n\t\t}\r\n\t\tthis.builder.addSlopeSide(tsMaterial,rect.x,rect.y,rect.width,rect.height,\r\n\t\t\tx, y, z - slopeHeight,\r\n\t\t\t1, slopeHeight, rot, options\r\n\t\t);\r\n\t}\r\n\tgetAutotileCorner(tileId,realId=tileId,excludeTop=true){\r\n\t\tconst kind = Tilemap.getAutotileKind(tileId);\r\n\t\tlet tx = kind%8;\r\n\t\tlet ty = Math.floor(kind / 8);\r\n\t\tif(tileId===realId && mv3d.isWallTile(tileId)==1){ ++ty; }\r\n\t\tvar bx,by;\r\n\t\tbx=tx*2;\r\n\t\tby=ty;\r\n\t\tif(Tilemap.isTileA1(tileId)){\r\n\t\t\tif(kind<4){\r\n\t\t\t\tbx=6*Math.floor(kind/2);\r\n\t\t\t\tby=3*(kind%2) + excludeTop;\r\n\t\t\t}else{\r\n\t\t\t\tbx=8*Math.floor(tx/4) + (kind%2)*6;\r\n\t\t\t\tby=ty*6 + Math.floor(tx%4/2)*3 + excludeTop*!(tx%2);\r\n\t\t\t\t//if(excludeTop&&!(kind%2)){ by+=1; }\r\n\t\t\t}\r\n\t\t\tif(excludeTop&&kind>=4&&!(kind%2)){ by+=1; }\r\n\t\t}else if(Tilemap.isTileA2(tileId)){\r\n\t\t\tby=(ty-2)*3 + excludeTop;\r\n\t\t}else if (Tilemap.isTileA3(tileId)){\r\n\t\t\tby=(ty-6)*2;\r\n\t\t}else if (Tilemap.isTileA4(tileId)){\r\n\t\t\tif(excludeTop){\r\n\t\t\t\tby=Math.ceil((ty-10)*2.5+0.5);\r\n\t\t\t}else{\r\n\t\t\t\tby=(ty-10)*2.5+(ty%2?0.5:0);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {x:bx,y:by};\r\n\t}\r\n}\r\nMapCell.neighborPositions = [\r\n\tnew Vector2( 0, 1),\r\n\tnew Vector2( 1, 0),\r\n\tnew Vector2( 0,-1),\r\n\tnew Vector2(-1, 0),\r\n];\r\nMapCell.meshCache={};\r\n\r\nclass MapCellFinalized {\r\n\t\r\n}\r\n\r\nclass MapCellBuilder {\r\n\r\n}\r\n\r\n\r\n","import mv3d from './mv3d.js';\r\nimport { v2origin, tileSize, degtorad, sin, tileWidth, cos, tileHeight, overload, minmax } from './util.js';\r\nimport { MapCell } from './mapCell.js';\r\n\r\nObject.assign(mv3d,{\r\n\r\n\t_tilemap:null,\r\n\tgetTilemap(){\r\n\t\tif(SceneManager._scene&&SceneManager._scene._spriteset){\r\n\t\t\tthis._tilemap = SceneManager._scene._spriteset._tilemap;\r\n\t\t}\r\n\t\treturn this._tilemap;\r\n\t},\r\n\tgetDataMap(){\r\n\t\tif($dataMap){ this._dataMap=$dataMap }\r\n\t\treturn this._dataMap;\r\n\t},\r\n\tmapWidth(){ return this.getDataMap().width; },\r\n\tmapHeight(){ return this.getDataMap().height; },\r\n\tloopHorizontal(){ return this.getDataMap().scrollType&2; },\r\n\tloopVertical(){ return this.getDataMap().scrollType&1; },\r\n\r\n\tgetRegion(x,y){\r\n\t\treturn this.getTileId(x,y,5);\r\n\t},\r\n\r\n\tgetSetNumber(id){\r\n\t\tif(Tilemap.isAutotile(id)){\r\n\t\t\treturn Tilemap.isTileA1(id)?0\r\n\t\t\t\t: Tilemap.isTileA2(id)?1 : Tilemap.isTileA3(id)?2 : 3;\r\n\t\t}else{\r\n\t\t\treturn Tilemap.isTileA5(id)?4:5+Math.floor(id/256);\r\n\t\t}\r\n\t},\r\n\r\n\tgetShadowBits(x,y){\r\n\t\treturn this.getTileId(x,y,4);\r\n\t},\r\n\r\n\tgetTerrainTag(tileId){\r\n\t\treturn $gameMap.tilesetFlags()[tileId]>>12;\r\n\t},\r\n\r\n\tgetTilePassage:overload({\r\n\t\t1(tileId){ return this.getTilePassage(tileId,this.getTileConfig(tileId)); },\r\n\t\t2(tileId,conf){\r\n\t\t\tif('pass' in conf){\r\n\t\t\t\treturn conf.pass;\r\n\t\t\t}\r\n\t\t\tconst flag = $gameMap.tilesetFlags()[tileId];\r\n\t\t\tif( (flag&0x10) ){ return this.enumPassage.THROUGH; }\r\n\t\t\tif( (flag&0x0f)===0x0f ){ return this.enumPassage.WALL; }\r\n\t\t\telse{ return this.enumPassage.FLOOR; }\r\n\t\t},\r\n\t\t3(x,y,l){\r\n\t\t\tconst tileId=this.getTileId(x,y,l);\r\n\t\t\treturn this.getTilePassage(tileId,this.getTileConfig(tileId,x,y,l));\r\n\t\t},\r\n\t\tdefault(tileId,x,y,l){\r\n\t\t\treturn this.getTilePassage(tileId,this.getTileConfig(tileId,x,y,l));\r\n\t\t}\r\n\t}),\r\n\r\n\tgetMaterialOptions(conf,side){\r\n\t\tconst options={};\r\n\t\tif ('pass' in conf){ options.through=conf.pass===this.enumPassage.THROUGH; }\r\n\t\tif ('alpha' in conf){ options.alpha=conf.alpha; }\r\n\t\tif ('glow' in conf){ options.glow=conf.glow; }\r\n\t\tif ('shadow' in conf){ options.shadow=conf.shadow; }\r\n\t\tif(side){\r\n\t\t\tif(`${side}_alpha` in conf){ options.alpha=conf[`${side}_alpha`]; }\r\n\t\t\tif(`${side}_glow` in conf){ options.glow=conf[`${side}_glow`]; }\r\n\t\t\tif(`${side}_shadow` in conf){ options.shadow=conf[`${side}_shadow`]; }\r\n\t\t}\r\n\t\tif(conf.isCeiling){\r\n\t\t\toptions.backfaceCulling=conf.backfaceCulling;\r\n\t\t\toptions.through = conf.skylight;\r\n\t\t}\r\n\t\tif('alpha' in options){ options.transparent=true; }\r\n\t\treturn options;\r\n\t},\r\n\r\n\tgetTileAnimationData(tileConf,side){\r\n\t\tconst tileId=tileConf[`${side}_id`];\r\n\t\tif(`${side}_animData` in tileConf){\r\n\t\t\treturn tileConf[`${side}_animData`];\r\n\t\t}\r\n\t\tconst animData={animX:0,animY:0};\r\n\t\tif(Tilemap.isTileA1(tileId)){\r\n\t\t\tconst kind = Tilemap.getAutotileKind(tileId);\r\n\t\t\tanimData.animX=kind<=1?2:kind<=3?0:kind%2?0:2;\r\n\t\t\tanimData.animY=kind<=3?0:kind%2?1:0; \r\n\t\t}\r\n\t\treturn animData;\r\n\t},\r\n\r\n\tgetTileConfig:overload({\r\n\t\t3(x,y,l){ return this.getTileConfig(this.getTileData(x,y)[l],x,y,l); },\r\n\t\tdefault(tileId,x,y,l){\r\n\t\t\tconst conf = {};\r\n\t\t\tif(!this.isTileEmpty(tileId)){\r\n\t\t\t\tconst ttag = this.getTerrainTag(tileId);\r\n\t\t\t\tif(ttag && ttag in this.TTAG_DATA){\r\n\t\t\t\t\tObject.assign(conf,this.TTAG_DATA[ttag]);\r\n\t\t\t\t}\r\n\t\t\t\tconst ts_conf = this.tilesetConfigurations[this.normalizeAutotileId(tileId)];\r\n\t\t\t\tif(ts_conf){\r\n\t\t\t\t\tObject.assign(conf,ts_conf);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(l===0){\r\n\t\t\t\tconst region = this.getRegion(x,y);\r\n\t\t\t\tif(region && region in mv3d.REGION_DATA){\r\n\t\t\t\t\tObject.assign(conf,this.REGION_DATA[region]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn conf;\r\n\t\t},\r\n\t}),\r\n\r\n\tgetTileTextureOffsets(tileId,x,y,l){\r\n\t\tconst conf = this.getTileConfig(tileId,x,y,l);\r\n\t\tconst tileRange = Tilemap.isAutotile(tileId)?48:1;\r\n\t\tconf.hasInsideConf=Boolean(conf.inside_offset||conf.rectInside||('inside_id' in conf));\r\n\t\tconf.hasBottomConf=Boolean(conf.bottom_offset||conf.rectBottom||('bottom_id' in conf));\r\n\t\tif(conf.top_id==null){ \r\n\t\t\tconf.top_id=tileId;\r\n\t\t\tif(conf.top_offset){\r\n\t\t\t\tconf.top_id = tileId+conf.top_offset.x*tileRange+conf.top_offset.y*tileRange*8;\r\n\t\t\t}\r\n\t\t }\r\n\t\tif(conf.side_id==null){\r\n\t\t\tconf.side_id=tileId;\r\n\t\t\tif(conf.side_offset){\r\n\t\t\t\tconf.side_id = tileId+conf.side_offset.x*tileRange+conf.side_offset.y*tileRange*8;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(conf.inside_id==null){ \r\n\t\t\tconf.inside_id=conf.side_id;\r\n\t\t\tif(conf.inside_offset){\r\n\t\t\t\tconf.inside_id=tileId+conf.inside_offset.x*tileRange+conf.inside_offset.y*tileRange*8;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(conf.bottom_id==null){\r\n\t\t\tconf.bottom_id=conf.top_id;\r\n\t\t\tif(conf.bottom_offset){\r\n\t\t\t\tconf.bottom_id=tileId+conf.bottom_offset.x*tileRange+conf.bottom_offset.y*tileRange*8;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!('pass' in conf)){\r\n\t\t\tconf.pass = this.getTilePassage(tileId,conf);\r\n\t\t}\r\n\t\treturn conf;\r\n\t},\r\n\r\n\tgetTileId(x,y,l=0){\r\n\t\tconst dataMap = this.getDataMap(); if(!dataMap){ return 0; }\r\n\t\tconst {data,width,height} = dataMap;\r\n\t\tif(this.loopHorizontal()){ x=x.mod(width); }\r\n\t\tif(this.loopVertical()){ y=y.mod(height); }\r\n\t\tif(x<0||x>=width||y<0||y>=height){\r\n\t\t\tif(this.getMapConfig('edge')==='clamp'){\r\n\t\t\t\tconst clamp = this.getMapConfig('edgeData',1);\r\n\t\t\t\tif(x>=width){ x=width+(x-width).mod(clamp)-clamp; }\r\n\t\t\t\telse if(x<0){x=x.mod(clamp);}\r\n\t\t\t\tif(y>=height){ y=height+(y-height).mod(clamp)-clamp; }\r\n\t\t\t\telse if(y<0){y=y.mod(clamp);}\r\n\t\t\t}else{\r\n\t\t\t\treturn 0; \r\n\t\t\t}\r\n\t\t}\r\n\t\treturn data[(l * height + y) * width + x] || 0\r\n\t},\r\n\r\n\tgetTileData(x,y){\r\n\t\tconst dataMap = this.getDataMap(); if(!dataMap){ return [0,0,0,0]; }\r\n\t\tconst {data,width,height} = dataMap;\r\n\t\tif(this.loopHorizontal()){\r\n\t\t\tx=x.mod(width);\r\n\t\t}\r\n\t\tif(this.loopVertical()){\r\n\t\t\ty=y.mod(height);\r\n\t\t}\r\n\t\tif(x<0||x>=width||y<0||y>=height){\r\n\t\t\tif(this.getMapConfig('edge')==='clamp'){\r\n\t\t\t\tconst clamp = this.getMapConfig('edgeData',1);\r\n\t\t\t\tif(x>=width){ x=width+(x-width).mod(clamp)-clamp; }\r\n\t\t\t\telse if(x<0){x=x.mod(clamp);}\r\n\t\t\t\tif(y>=height){ y=height+(y-height).mod(clamp)-clamp; }\r\n\t\t\t\telse if(y<0){y=y.mod(clamp);}\r\n\t\t\t}else{\r\n\t\t\t\treturn [0,0,0,0]; \r\n\t\t\t}\r\n\t\t}\r\n\t\tif(x<0||x>=width||y<0||y>=height){ return [0,0,0,0]; }\r\n\t\tconst tileData=[];\r\n\t\tfor (let z=0;z<4;++z){//4 tile layers. Ignore shadow bits.\r\n\t\t\ttileData[z] = data[(z * height + y) * width + x] || 0;\r\n\t\t}\r\n\t\treturn tileData;\r\n\t},\r\n\r\n\r\n\tgetTileHeight(x,y,l=0){\r\n\r\n\t\tif(this.loopHorizontal()){ x=x.mod(this.mapWidth()); }\r\n\t\tif(this.loopVertical()){ y=y.mod(this.mapHeight()); }\r\n\r\n\t\tconst tileId=this.getTileData(x,y)[l];\r\n\t\tif(this.isTileEmpty(tileId)&&l>0){ return 0; }\r\n\t\t// finge tiles don't stack normally. fringeHeight property should be used when drawing them.\r\n\t\t//if(this.isStarTile(tileId)){ return 0; }\r\n\r\n\t\tconst shapes=this.enumShapes;\r\n\t\tconst conf =this.getTileConfig(tileId,x,y,l);\r\n\t\tlet height = 0;\r\n\t\tif('height' in conf){\r\n\t\t\theight = conf.height;\r\n\t\t}else if(this.isWallTile(tileId)){\r\n\t\t\theight = this.WALL_HEIGHT;\r\n\t\t}else if(this.isTableTile(tileId)){\r\n\t\t\theight = this.TABLE_HEIGHT;\r\n\t\t}else if(this.isSpecialShape(conf.shape)){\r\n\t\t\tswitch(conf.shape){\r\n\t\t\t\tcase shapes.SLOPE: height=0; break;\r\n\t\t\t\tdefault: height=1; break;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif('depth' in conf){\r\n\t\t\theight -= conf.depth;\r\n\t\t}\r\n\t\tif(conf.shape===shapes.SLOPE){\r\n\t\t\theight += conf.slopeHeight||1;\r\n\t\t}\r\n\t\treturn height;\r\n\t},\r\n\r\n\tgetStackHeight(x,y,layerId=3){\r\n\t\tlet height=0;\r\n\t\tfor(let l=0; l<=layerId; ++l){\r\n\t\t\theight += this.getTileFringe(x,y,l);\r\n\t\t\theight += this.getTileHeight(x,y,l);\r\n\t\t}\r\n\t\treturn height;\r\n\t},\r\n\r\n\tgetSlopeDirection(x,y,l,fullData=false){\r\n\t\tconst stackHeight = this.getStackHeight(x,y,l);\r\n\t\tconst tileId = this.getTileData(x,y)[l];\r\n\t\tconst conf = this.getTileConfig(tileId,x,y,l);\r\n\t\tconst slopeHeight = conf.slopeHeight||1;\r\n\t\tconst neighborPositions = MapCell.neighborPositions;\r\n\t\tconst flag = $gameMap.tilesetFlags()[tileId];\r\n\t\tconst shadowBits = this.getShadowBits(x,y);\r\n\t\tconst shadowBitDirections=[0,0b0011,0b1010,0b0101,0b1100];\r\n\t\t//const shadowBitDirections=[0,0b1100,0b0101,0b1010,0b0011];\r\n\t\tlet direction;\r\n\t\tfor(let i=0;i<neighborPositions.length;++i){\r\n\t\t\tconst n=neighborPositions[i];\r\n\t\t\tconst d={neighbor: n,favor:0};\r\n\t\t\td.dir = 5-3*n.y+n.x;\r\n\t\t\tconst nHeights = this.getCollisionHeights(x+n.x,y+n.y,{slopeMax:true});\r\n\t\t\tconst oHeights = this.getCollisionHeights(x-n.x,y-n.y,{slopeMin:true});\r\n\t\t\tif(nHeights.some(c=>Math.abs(stackHeight-slopeHeight-c.z2)<=mv3d.STAIR_THRESH)){ d.favor+=1; }\r\n\t\t\tif(oHeights.some(c=>Math.abs(stackHeight-c.z2)<=mv3d.STAIR_THRESH)){ d.favor+=1; }\r\n\t\t\tif(flag&(1<<(d.dir/2-1))){ d.favor=-2; }\r\n\t\t\tif(flag&(1<<((10-d.dir)/2-1))){ d.favor=-1; }\r\n\t\t\tif((shadowBits&shadowBitDirections[d.dir/2])===shadowBitDirections[d.dir/2]){ d.favor=30; }\r\n\t\t\tif(conf.slopeDirection===d.dir){ d.favor=100; }\r\n\t\t\tif(!direction||d.favor>direction.favor){ direction=d; }\r\n\t\t}\r\n\t\tdirection.rot=degtorad(180-this.dirToYaw(direction.dir));\r\n\t\tif(fullData){ return direction; }\r\n\t\treturn direction.rot;\r\n\t},\r\n\r\n\tgetWalkHeight(x,y){\r\n\t\t// get top height at x,y. Used for jumping and initializing z.\r\n\t\tconst heights = this.getCollisionHeights(x,y);\r\n\t\treturn heights[heights.length-1].z2;\r\n\t},\r\n\r\n\tgetSlopeHeight(x,y,l,data=null){\r\n\t\tconst rx=Math.round(x), ry=Math.round(y);\r\n\t\tif(data==null){ data = this.getTileConfig(this.getTileData(rx,ry)[l],rx,ry,l); }\r\n\t\tconst rot=this.getSlopeDirection(rx,ry,l);\r\n\t\tconst xf=sin(rot), yf=-cos(rot);\r\n\t\tlet px=(x+0.5)%1, py=(y+0.5)%1;\r\n\t\tif(Math.sign(xf<0)){ px=1-px; }\r\n\t\tif(Math.sign(yf<0)){ py=1-py; }\r\n\t\tconst sf=Math.abs(xf)*px + Math.abs(yf)*py;\r\n\t\treturn (data.slopeHeight||1)*sf;\r\n\t},\r\n\r\n\tgetCollisionHeights(x,y,opts={}){\r\n\t\tconst rx=Math.round(x),ry=Math.round(y);\r\n\t\tlet z = 0;\r\n\t\tconst collisions=[{z1:-Infinity,z2:0}];\r\n\t\tif(opts.layers){ collisions.layers=[]; }\r\n\t\tconst tileData=this.getTileData(rx,ry);\r\n\t\tfor(let l=0; l<=3; ++l){\r\n\t\t\tlet h = this.getTileHeight(rx,ry,l);\r\n\t\t\tconst tileId=tileData[l];\r\n\t\t\tconst conf = this.getTileConfig(tileId,rx,ry,l);\r\n\t\t\tconst shape = conf.shape;\r\n\t\t\tconst passage = this.getTilePassage(tileId,conf);\r\n\t\t\tlet skip = false;\r\n\t\t\tif(passage===this.enumPassage.THROUGH){\r\n\t\t\t\th=0; skip=true;\r\n\t\t\t}else if(shape===this.enumShapes.SLOPE){\r\n\t\t\t\tif(opts.slopeMax){\r\n\t\t\t\t\th = h;\r\n\t\t\t\t}else if(opts.slopeMin){\r\n\t\t\t\t\th = h-(conf.slopeHeight||1);\r\n\t\t\t\t}else{\r\n\t\t\t\t\th = h-(conf.slopeHeight||1)+this.getSlopeHeight(x,y,l,conf);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconst fringe = this.getTileFringe(rx,ry,l);\r\n\t\t\tz+=fringe;\r\n\t\t\tif(skip){ continue; }\r\n\t\t\tif(h<0){\r\n\t\t\t\tif(fringe+h<0){\r\n\t\t\t\t\tcollisions[collisions.length-1].z2+=fringe+h;\r\n\t\t\t\t}\r\n\t\t\t}else if(l===0){\r\n\t\t\t\tcollisions[0].z2=z+h;\r\n\t\t\t}else{\r\n\t\t\t\tcollisions.push({z1:z,z2:z+h});\r\n\t\t\t}\r\n\t\t\tz+=h;\r\n\t\t\tif(opts.layers){ collisions.layers[l]=collisions[collisions.length-1]; }\r\n\t\t\tif(shape===this.enumShapes.SLOPE){ collisions[collisions.length-1].isSlope=true; }\r\n\t\t}\r\n\t\treturn collisions;\r\n\t},\r\n\r\n\tgetTileLayers(x,y,z,gte=true){\r\n\t\tlet closest_diff = Infinity;\r\n\t\tlet layers = [0];\r\n\t\tlet h=0;\r\n\t\t//const tileData = this.getTileData(x,y);\r\n\t\tfor (let l=0; l<=3; ++l){\r\n\t\t\t//if($gameMap.tilesetFlags()[tileData[l]]&0x10){ continue; }\r\n\t\t\tif(this.getTilePassage(x,y,l)===this.enumPassage.THROUGH){ continue; }\r\n\t\t\tconst fringe=this.getTileFringe(x,y,l);\r\n\t\t\tconst height=this.getTileHeight(x,y,l);\r\n\t\t\tconst conf = this.getTileConfig(x,y,l);\r\n\t\t\th+=fringe+height;\r\n\t\t\tconst isSlope=conf.shape===this.enumShapes.SLOPE;\r\n\t\t\tif(isSlope){\r\n\t\t\t\th-=conf.slopeHeight||1;\r\n\t\t\t}\r\n\t\t\tconst diff = z-h;\r\n\t\t\tif( gte ? z>=h : z>h ){\r\n\t\t\t\tif(diff<closest_diff||isSlope&&diff<=closest_diff){\r\n\t\t\t\t\tlayers=[l];\r\n\t\t\t\t\tclosest_diff=diff;\r\n\t\t\t\t}else if(diff===closest_diff){\r\n\t\t\t\t\tlayers.push(l);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn layers;\r\n\t},\r\n\r\n\tgetFloatHeight(x,y,z=null,gte=true){\r\n\t\tconst tileData=this.getTileData(x,y);\r\n\t\tconst layers = z==null?[0,1,2,3]:this.getTileLayers(x,y,z,gte);\r\n\t\tlet float=0;\r\n\t\tfor(const l of layers){\r\n\t\t\tconst tileId=tileData[l];\r\n\t\t\tif(this.isTileEmpty(tileId)){ continue; }\r\n\t\t\tconst conf = this.getTileConfig(tileId,x,y,l);\r\n\t\t\tif(conf && 'float' in conf){\r\n\t\t\t\tfloat += conf.float;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn float;\r\n\t},\r\n\r\n\tgetStackFringeHeight(x,y,l=3){\r\n\t\treturn this.getStackHeight(x,y,l);\r\n\t},\r\n\r\n\tgetTileFringe(x,y,l){\r\n\t\tconst tileId=this.getTileData(x,y)[l];\r\n\t\tif(this.isTileEmpty(tileId)){ return 0; }\r\n\t\tconst conf = this.getTileConfig(tileId,x,y,l);\r\n\t\tif(conf && 'fringe' in conf){ return conf.fringe; }\r\n\t\tif(this.isStarTile(tileId)){\r\n\t\t\treturn this.FRINGE_HEIGHT;\r\n\t\t}\r\n\t\treturn 0;\r\n\t},\r\n\r\n\tgetCullingHeight(x,y,layerId=3,opts={}){\r\n\t\tconst dataMap=this.getDataMap();\r\n\t\tif( !this.getMapConfig('edge',true) &&\r\n\t\t\t(!this.loopHorizontal()&&(x<0||x>=dataMap.width)\r\n\t\t\t||!this.loopVertical()&&(y<0||y>=dataMap.height))\r\n\t\t\t){ return Infinity; }\r\n\t\tconst tileData=this.getTileData(x,y);\r\n\t\tlet height=0;\r\n\t\tfor(let l=0; l<=layerId; ++l){\r\n\t\t\tif(this.getTileFringe(x,y,l)){ return height; }\r\n\t\t\tconst tileId=tileData[l];\r\n\t\t\tconst data = this.getTileConfig(tileId,x,y,l);\r\n\t\t\tconst shape = data.shape;\r\n\t\t\tif(this.isSpecialShape(shape)){\r\n\t\t\t\tif(shape===this.enumShapes.SLOPE){\r\n\t\t\t\t\theight+=this.getTileHeight(x,y,l);\r\n\t\t\t\t\tif(!opts.dir||opts.dir!==this.getSlopeDirection(x,y,l,true).dir){\r\n\t\t\t\t\t\theight-=data.slopeHeight||1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn height;\r\n\t\t\t}\r\n\t\t\tif(opts.ignorePits&&data.depth>0){\r\n\t\t\t\theight+=data.depth;\r\n\t\t\t}\r\n\t\t\theight+=this.getTileHeight(x,y,l);\r\n\t\t}\r\n\t\treturn height;\r\n\t},\r\n\r\n\ttileHasPit(x,y,layerId=3){\r\n\t\tconst tileData=this.getTileData(x,y);\r\n\t\tfor(let l=0; l<=layerId; ++l){\r\n\t\t\tconst tileId=tileData[l];\r\n\t\t\tconst conf = this.getTileConfig(tileId,x,y,l);\r\n\t\t\tif(conf.depth>0){ return true; }\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\r\n\tisTilePit(x,y,l){\r\n\t\tconst tileId=this.getTileData(x,y)[l];\r\n\t\tconst conf = this.getTileConfig(tileId,x,y,l);\r\n\t\treturn conf.depth>0;\r\n\t},\r\n\r\n\tgetTileRects(tileId){\r\n\t\tconst rects = [];\r\n\t\tconst tilemap=this.getTilemap();\r\n\t\tconst isTable=tilemap._isTableTile(tileId);\r\n\t\ttilemap._drawTile({addRect:(sheetId,sx,sy,dx,dy,width,height,animX,animY)=>{\r\n\t\t\trects.push({setN:sheetId,x:sx,y:sy,width:width,height:height,ox:dx,oy:dy});\r\n\t\t}}, tileId, 0,0);\r\n\t\tif (isTable) for (let i=rects.length-1;i>=0;--i){\r\n\t\t\tif(rects[i].oy>tileSize()/2){\r\n\t\t\t\trects[i-1].y+=tileSize()*2/3;\r\n\t\t\t\trects.splice(i,1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn rects;\r\n\t},\r\n\r\n\tisTileEmpty(tileId){\r\n\t\treturn !tileId||tileId===1544;\r\n\t},\r\n\r\n\tisWallTile(tileId){\r\n\t\tconst kind = Tilemap.getAutotileKind(tileId);\r\n\t\tconst ty = Math.floor(kind / 8);\r\n\t\tconst isWall = Tilemap.isTileA3(tileId) || Tilemap.isTileA4(tileId);\r\n\t\tif (isWall && ty%2){ return 2; }\r\n\t\treturn isWall;\r\n\t},\r\n\r\n\tisTableTile(tileId){\r\n\t\treturn Boolean(Tilemap.isTileA2(tileId) && ($gameMap.tilesetFlags()[tileId] & 0x80));\r\n\t},\r\n\r\n\tisStarTile(tileId){\r\n\t\treturn Boolean($gameMap.tilesetFlags()[tileId] & 0x10);\r\n\t},\r\n\r\n\tisWaterfallTile(tileId){\r\n\t\tconst kind = Tilemap.getAutotileKind(tileId);\r\n\t\treturn Tilemap.isTileA1(tileId)&&kind>=4&&kind%2;\r\n\t},\r\n\r\n\tisSpecialShape(shape){\r\n\t\tconst shapes = mv3d.enumShapes;\r\n\t\treturn shape===shapes.FENCE||shape===shapes.CROSS||shape===shapes.XCROSS||shape===shapes.SLOPE;\r\n\t},\r\n\tisPlatformShape(shape){\r\n\t\tconst shapes = mv3d.enumShapes;\r\n\t\treturn shape==null||shape===shapes.FLAT||shape===shapes.SLOPE;\r\n\t},\r\n\r\n\tconstructTileId(img,x,y){\r\n\t\tconst key = `TILE_ID_${img.toUpperCase()}`\r\n\t\tlet tileId = key in Tilemap ? Tilemap[key] : 0;\r\n\t\tconst tileRange = Tilemap.isAutotile(tileId) ? 48 : 1;\r\n\t\ttileId += Number(x)*tileRange + Number(y)*tileRange*8;\r\n\t\treturn tileId;\r\n\t},\r\n\tnormalizeAutotileId(tileId){\r\n\t\tif(!Tilemap.isAutotile(tileId)){ return tileId; }\r\n\t\tconst kind = Tilemap.getAutotileKind(tileId);\r\n\t\treturn Tilemap.TILE_ID_A1 + kind*48;\r\n\t},\r\n\r\n});","import mv3d from './mv3d.js';\r\nimport { MapCell } from './mapCell.js';\r\nimport { sleep, snooze } from './util.js';\r\nimport { Vector2, Vector3 } from './mod_babylon.js';\r\n\r\nObject.assign(mv3d,{\r\n\r\n\tmapLoaded: false,\r\n\tmapReady: false,\r\n\tclearMap(){\r\n\t\tthis.mapLoaded=false;\r\n\t\tthis.clearMapCells();\r\n\t\tfor (let i=this.characters.length-1; i>=0; --i){\r\n\t\t\tthis.characters[i].dispose(false,true);\r\n\t\t}\r\n\t\tthis.characters.length=0;\r\n\t\tthis.resetCameraTarget();\r\n\r\n\t\tthis.callFeatures('clearMap');\r\n\t},\r\n\tclearMapCells(){\r\n\t\t// clear materials and textures\r\n\t\tfor (const key in this.textureCache){\r\n\t\t\tthis.textureCache[key].dispose();\r\n\t\t}\r\n\t\tfor (const key in this.materialCache){\r\n\t\t\tthis.materialCache[key].dispose();\r\n\t\t}\r\n\t\tthis.animatedTextures.length=0;\r\n\t\tthis.textureCache={};\r\n\t\tthis.materialCache={};\r\n\t\t// clear map cells\r\n\t\tfor (const key in this.cells){\r\n\t\t\tthis.cells[key].dispose(false,true);\r\n\t\t}\r\n\t\tthis.cells={};\r\n\t},\r\n\treloadMap(){\r\n\t\tthis.clearMapCells();\r\n\t\tif(mv3d.mapReady) { this.updateMap(); }\r\n\t\tthis.callFeatures('reloadMap');\r\n\t},\r\n\r\n\tloadMap(){\r\n\t\t//this.cameraStick.x=$gamePlayer._realX;\r\n\t\t//this.cameraStick.y=$gamePlayer._realY;\r\n\t\tthis.updateBlenders();\r\n\t\tthis.updateMap();\r\n\t\tthis.createCharacters();\r\n\t\tthis.rememberCameraTarget();\r\n\r\n\t\tthis.callFeatures('loadMap');\r\n\t},\r\n\r\n\tasync updateMap(){\r\n\t\tif(this.mapUpdating){ return; }\r\n\t\tthis.mapLoaded=true;\r\n\t\tthis.mapUpdating=true;\r\n\t\t// unload Far cells\r\n\t\tfor (const key in this.cells){\r\n\t\t\tthis.cells[key].unload=true;\r\n\t\t}\r\n\t\t// get range of cells based on render distance\r\n\t\tconst bounds = {\r\n\t\t\tleft:Math.floor((this.cameraStick.x-this.renderDist)/this.CELL_SIZE),\r\n\t\t\tright:Math.floor((this.cameraStick.x+this.renderDist)/this.CELL_SIZE),\r\n\t\t\ttop:Math.floor((this.cameraStick.y-this.renderDist)/this.CELL_SIZE),\r\n\t\t\tbottom:Math.floor((this.cameraStick.y+this.renderDist)/this.CELL_SIZE),\r\n\t\t}\r\n\t\t//clamp cell range to map\r\n\t\tif(this.getMapConfig('edge')!=='clamp'){\r\n\t\t\tif(!this.loopHorizontal()){\r\n\t\t\t\tbounds.left=Math.max(0,bounds.left);\r\n\t\t\t\tbounds.right=Math.min(bounds.right,Math.ceil(this.mapWidth()/this.CELL_SIZE)-1);\r\n\t\t\t}\r\n\t\t\tif(!this.loopVertical()){\r\n\t\t\t\tbounds.top=Math.max(0,bounds.top);\r\n\t\t\t\tbounds.bottom=Math.min(bounds.bottom,Math.ceil(this.mapHeight()/this.CELL_SIZE)-1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst cellsToLoad=[];\r\n\t\tfor (let ix=bounds.left;ix<=bounds.right;++ix)\r\n\t\tfor (let iy=bounds.top;iy<=bounds.bottom;++iy){\r\n\t\t\tlet cx=ix, cy=iy;\r\n\t\t\tif(this.loopHorizontal()){ cx = cx.mod(Math.ceil(this.mapWidth()/this.CELL_SIZE)); }\r\n\t\t\tif(this.loopVertical()){ cy = cy.mod(Math.ceil(this.mapHeight()/this.CELL_SIZE)); }\r\n\t\t\tconst key = [cx,cy].toString();\r\n\t\t\tif(key in this.cells){\r\n\t\t\t\tthis.cells[key].unload=false;\r\n\t\t\t}else{\r\n\t\t\t\tcellsToLoad.push(new Vector2(cx,cy));\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (const key in this.cells){\r\n\t\t\tif(mv3d.UNLOAD_CELLS && this.cells[key].unload){\r\n\t\t\t\tthis.cells[key].dispose();\r\n\t\t\t\tdelete this.cells[key];\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst cameraCellPos = new Vector2(Math.round(this.cameraStick.x/this.CELL_SIZE-0.5),Math.round(this.cameraStick.y/this.CELL_SIZE-0.5));\r\n\t\tcellsToLoad.sort((a,b)=>Vector2.DistanceSquared(a,cameraCellPos)-Vector2.DistanceSquared(b,cameraCellPos));\r\n\t\tif(this.mapReady){\r\n\t\t\tcellsToLoad.length=Math.min(25,cellsToLoad.length);\r\n\t\t}\r\n\t\tfor (const cellpos of cellsToLoad){\r\n\t\t\tlet {x:cx,y:cy} = cellpos;\r\n\t\t\tawait this.loadMapCell(cx,cy);\r\n\t\t\tif(this.mapReady){ await sleep(10); }\r\n\t\t\tif(!this.mapLoaded){ this.endMapUpdate(); return; }\r\n\t\t}\r\n\t\tthis.endMapUpdate();\r\n\t},\r\n\r\n\tendMapUpdate(){\r\n\t\tthis.mapUpdating=false;\r\n\t\tthis.mapReady=true;\r\n\t},\r\n\r\n\tasync loadMapCell(cx,cy){\r\n\t\tconst key = [cx,cy].toString();\r\n\t\tif(key in this.cells){ return; }\r\n\t\tconst cell = new MapCell(cx,cy);\r\n\t\tthis.cells[key]=cell;\r\n\t\tawait cell.load();\r\n\t},\r\n\r\n\t_cellsNeedingIntensiveUpdate:[],\r\n\tintensiveUpdate(){\r\n\t\tif(this._cellsNeedingIntensiveUpdate.length===0){ return; }\r\n\t\tconst now = performance.now();\r\n\t\tlet cell,index=null;\r\n\t\tfor (cell of this._cellsNeedingIntensiveUpdate){\r\n\t\t\tif(now-cell._lastIntensiveUpdate<=300){ continue; }\r\n\t\t\tindex=this._cellsNeedingIntensiveUpdate.indexOf(cell);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tif(index==null||index<0){ return; }\r\n\t\tthis._cellsNeedingIntensiveUpdate.splice(index,1);\r\n\t\tcell._lastIntensiveUpdate=now;\r\n\t\tcell._needsIntensiveUpdate=false;\r\n\t\tfor(let character of cell.characters){\r\n\t\t\tcharacter.intensiveUpdate();\r\n\t\t}\r\n\t\tmv3d.scene.sortLightsByPriority();\r\n\t}\r\n\r\n});","import mv3d from './mv3d.js';\r\nimport { Texture, StandardMaterial, Color3, Color4 } from './mod_babylon.js';\r\nimport { tileWidth, tileHeight, unround } from './util.js';\r\n\r\nObject.assign(mv3d,{\r\n\r\n\tanimatedTextures:[],\r\n\ttextureCache:{},\r\n\tmaterialCache:{},\r\n\r\n\tasync createTexture(url){\r\n\t\tconst textureUrl = await this.getTextureUrl(url);\r\n\t\tconst texture = new BABYLON.Texture(textureUrl,mv3d.scene,!mv3d.MIPMAP,true,BABYLON.Texture.NEAREST_SAMPLINGMODE);\r\n\t\treturn texture;\r\n\t},\r\n\r\n\tasync getTextureUrl(url){\r\n\t\tconst bitmap = ImageManager.loadNormalBitmap(encodeURI(url));\r\n\t\tif(Decrypter.hasEncryptedImages){\r\n\t\t\tawait mv3d.waitBitmapLoaded(bitmap);\r\n\t\t\treturn bitmap.canvas.toDataURL();\r\n\t\t}else{\r\n\t\t\treturn bitmap._image.src;\r\n\t\t}\r\n\t},\r\n\r\n\twaitTextureLoaded(texture){return new Promise((resolve,reject)=>{\r\n\t\tif(texture.isReady()){ resolve(); }\r\n\t\ttexture.onLoadObservable.addOnce(()=>{\r\n\t\t\tresolve();\r\n\t\t});\r\n\t})},\r\n\r\n\twaitBitmapLoaded(bitmap){\r\n\t\treturn new Promise(resolve=>bitmap.addLoadListener(resolve));\r\n\t},\r\n\r\n\tasync getCachedTilesetTexture(setN,animX=0,animY=0){\r\n\t\tconst key = `TS:${setN}|${animX},${animY}`;\r\n\t\tif(key in this.textureCache){\r\n\t\t\treturn this.textureCache[key];\r\n\t\t}\r\n\t\tconst tsName = $gameMap.tileset().tilesetNames[setN];\r\n\t\tif(!tsName){\r\n\t\t\treturn await this.getErrorTexture();\r\n\t\t}\r\n\t\t//const textureSrc=`img/tilesets/${tsName}.png`;\r\n\t\tconst textureSrc=ImageManager.loadTileset(tsName)._url;\r\n\t\tconst texture = await this.createTexture(textureSrc);\r\n\t\ttexture.hasAlpha=true;\r\n\t\tthis.textureCache[key]=texture;\r\n\r\n\t\tawait this.waitTextureLoaded(texture);\r\n\r\n\t\tif(this.textureCache[key]!==texture){ return await this.getErrorTexture(); }\r\n\t\ttexture.updateSamplingMode(1);\r\n\t\tif(animX||animY){\r\n\t\t\tconst { width, height } = texture.getBaseSize();\r\n\t\t\ttexture.frameData={x:0,y:0,w:width,h:height};\r\n\t\t\ttexture.animX = animX;\r\n\t\t\ttexture.animY = animY;\r\n\t\t\tthis.animatedTextures.push(texture);\r\n\t\t}\r\n\t\treturn texture;\r\n\t\t\r\n\t},\r\n\r\n\tasync getErrorTexture(){\r\n\t\tif(this.errorTexture){ return this.errorTexture; }\r\n\t\tthis.errorTexture = await this.createTexture(`${mv3d.MV3D_FOLDER}/errorTexture.png`);\r\n\t\tthis.errorTexture.isError=true;\r\n\t\tthis.errorTexture.dispose=()=>{};\r\n\t\treturn this.errorTexture;\r\n\t},\r\n\r\n\tasync getBushAlphaTexture(){\r\n\t\tif(this.bushAlphaTexture){ return this.bushAlphaTexture; }\r\n\t\tthis.getBushAlphaTexture.getting=true;\r\n\t\tthis.bushAlphaTexture = await this.createTexture(`${mv3d.MV3D_FOLDER}/bushAlpha.png`);\r\n\t\tthis.bushAlphaTexture.getAlphaFromRGB=true;\r\n\t\tthis.bushAlphaTexture.dispose=()=>{};\r\n\t\tthis.getBushAlphaTexture.getting=false;\r\n\t\treturn this.bushAlphaTexture;\r\n\t},\r\n\tgetBushAlphaTextureSync(){\r\n\t\tif(this.bushAlphaTexture){ return this.bushAlphaTexture; }\r\n\t\tif(!this.getBushAlphaTexture.getting){\r\n\t\t\tthis.getBushAlphaTexture();\r\n\t\t}\r\n\t\treturn null;\r\n\t},\r\n\r\n\tasync getCachedTilesetMaterial(setN,animX=0,animY=0,options={}){\r\n\t\tthis.processMaterialOptions(options);\r\n\t\tconst key = `TS:${setN}|${animX},${animY}|${this.getExtraBit(options)}`;\r\n\t\tif(key in this.materialCache){\r\n\t\t\treturn this.materialCache[key];\r\n\t\t}\r\n\t\tconst texture = await this.getCachedTilesetTexture(setN,animX,animY);\r\n\t\tconst material = new StandardMaterial(key, this.scene);\r\n\t\tmaterial.diffuseTexture=texture;\r\n\t\tif(options.transparent){\r\n\t\t\tmaterial.opacityTexture=texture;\r\n\t\t\tmaterial.alpha=options.alpha;\r\n\t\t}\r\n\t\tif(options.through){\r\n\t\t\tmaterial.mv3d_through=true;\r\n\t\t}\r\n\t\tmaterial.mv3d_noShadow=!options.shadow;\r\n\t\tmaterial.alphaCutOff = mv3d.ALPHA_CUTOFF;\r\n\t\tmaterial.ambientColor.set(1,1,1);\r\n\t\tmaterial.mv3d_glowColor=options.glow;\r\n\t\tmaterial.emissiveColor.copyFrom(options.glow);\r\n\t\tmaterial.specularColor.set(0,0,0);\r\n\t\tmaterial.backFaceCulling=options.backfaceCulling;\r\n\t\tif(!isNaN(this.LIGHT_LIMIT)){ material.maxSimultaneousLights=this.LIGHT_LIMIT; }\r\n\t\tthis.materialCache[key]=material;\r\n\t\treturn material;\r\n\t},\r\n\r\n\tasync getCachedTilesetMaterialForTile(tileConf,side){\r\n\t\tconst setN = mv3d.getSetNumber(tileConf[`${side}_id`]);\r\n\t\tconst options = mv3d.getMaterialOptions(tileConf,side);\r\n\t\tconst animData = mv3d.getTileAnimationData(tileConf,side);\r\n\t\t//console.log(options);\r\n\t\treturn await mv3d.getCachedTilesetMaterial(setN,animData.animX,animData.animY,options);\r\n\t},\r\n\r\n\tprocessMaterialOptions(options){\r\n\t\tif('alpha' in options){\r\n\t\t\toptions.alpha = Math.round(options.alpha*7)/7;\r\n\t\t\tif(options.alph<1){\r\n\t\t\t\toptions.transparent=true;\r\n\t\t\t}\r\n\t\t}else{ options.alpha=1; }\r\n\t\tif('glow' in options){\r\n\t\t\toptions.glow.r = unround(options.glow.r,255);\r\n\t\t\toptions.glow.g = unround(options.glow.g,255);\r\n\t\t\toptions.glow.b = unround(options.glow.b,255);\r\n\t\t\toptions.glow.a = unround(options.glow.a,7);\r\n\t\t}else{ options.glow=new Color4(0,0,0,0); }\r\n\t\tif(!('shadow' in options)){options.shadow=true;}\r\n\t\tif(!('backfaceCulling' in options)){ options.backfaceCulling = mv3d.BACKFACE_CULLING; }\r\n\t},\r\n\r\n\tgetExtraBit(options){\r\n\t\tlet extra = 0;\r\n\t\textra|=Boolean(options.transparent)<<0;\r\n\t\textra|=7-options.alpha*7<<1;\r\n\t\textra|=(!options.shadow)<<4;\r\n\t\textra|=options.glow.a*7<<5;\r\n\t\textra|=options.glow.toNumber()<<8;\r\n\t\t//out of bits.\r\n\t\tlet string = extra.toString(36);\r\n\t\textra = 0;\r\n\t\textra|=Boolean(options.through)<<0;\r\n\t\textra|=(!options.backfaceCulling)<<1;\r\n\t\tstring += ','+extra.toString(36);\r\n\t\treturn string;\r\n\t},\r\n\r\n\t// animations\r\n\r\n\tlastAnimUpdate:0,\r\n\tanimXFrame:0,\r\n\tanimYFrame:0,\r\n\tanimDirection:1,\r\n\tupdateAnimations(){\r\n\t\tif( performance.now()-this.lastAnimUpdate <= this.ANIM_DELAY){ return; }\r\n\t\tthis.lastAnimUpdate=performance.now();\r\n\r\n\t\tif(this.animXFrame<=0){\r\n\t\t\tthis.animDirection=1;\r\n\t\t}else if(this.animXFrame>=2){\r\n\t\t\tthis.animDirection=-1;\r\n\t\t}\r\n\t\tthis.animXFrame += this.animDirection;\r\n\t\tthis.animYFrame=(this.animYFrame+1)%3;\r\n\t\tfor (const texture of this.animatedTextures){\r\n\t\t\ttexture.crop(\r\n\t\t\t\ttexture.frameData.x+texture.animX*this.animXFrame*tileWidth(),\r\n\t\t\t\ttexture.frameData.y+texture.animY*this.animYFrame*tileHeight(),\r\n\t\t\t\ttexture.frameData.w,\r\n\t\t\t\ttexture.frameData.h,\r\n\t\t\t\ttrue\r\n\t\t\t);\r\n\t\t}\r\n\t},\r\n\r\n});","import mv3d from './mv3d.js';\r\nimport { TransformNode, MeshBuilder, FRONTSIDE, Texture, StandardMaterial, Color3, Mesh, WORLDSPACE, Vector2, SpotLight, Vector3, PointLight, LOCALSPACE, DOUBLESIDE, Plane, Color4 } from \"./mod_babylon.js\";\r\nimport { relativeNumber, ZAxis, YAxis, tileSize, degtorad, XAxis, sleep, minmax, override } from './util.js';\r\nimport { ColorBlender, Blender } from './blenders.js';\r\n\r\nObject.assign(mv3d,{\r\n\tcreateCharacters(){\r\n\t\tconst events = $gameMap.events();\r\n\t\tfor (const event of events){\r\n\t\t\tthis.createCharacterFor(event,0);\r\n\t\t}\r\n\t\tconst vehicles = $gameMap.vehicles();\r\n\t\tfor (const vehicle of vehicles){\r\n\t\t\tthis.createCharacterFor(vehicle,1);\r\n\t\t}\r\n\t\tconst followers = $gamePlayer.followers()._data;\r\n\t\tfor (let f=followers.length-1; f>=0; --f){\r\n\t\t\tthis.createCharacterFor(followers[f],29-f);\r\n\t\t}\r\n\t\tthis.createCharacterFor($gamePlayer,30);\r\n\t},\r\n\r\n\tcreateCharacterFor(char,order){\r\n\t\tif(!char.mv3d_sprite){\r\n\t\t\tconst sprite = new Character(char,order);\r\n\t\t\tObject.defineProperty(char,'mv3d_sprite',{\r\n\t\t\t\tvalue:sprite,\r\n\t\t\t\tenumerable:false,\r\n\t\t\t\tconfigurable:true,\r\n\t\t\t});\r\n\t\t\tthis.characters.push(sprite);\r\n\t\t\treturn sprite;\r\n\t\t}\r\n\t\treturn char.mv3d_sprite;\r\n\t},\r\n\r\n\tupdateCharacters(){\r\n\t\tfor (let i=this.characters.length-1; i>=0; --i){\r\n\t\t\tthis.characters[i].update();\r\n\t\t}\r\n\t},\r\n\r\n\tsetupSpriteMeshes(){\r\n\t\tthis.Meshes = Sprite.Meshes = {};\r\n\t\tSprite.Meshes.BASIC=MeshBuilder.CreatePlane('sprite mesh',{ sideOrientation: DOUBLESIDE},mv3d.scene);\r\n\t\tSprite.Meshes.FLAT=Mesh.MergeMeshes([Sprite.Meshes.BASIC.clone().rotate(XAxis,Math.PI/2,WORLDSPACE)]);\r\n\t\tSprite.Meshes.SPRITE=Mesh.MergeMeshes([Sprite.Meshes.BASIC.clone().translate(YAxis,0.5,WORLDSPACE)]);\r\n\t\tSprite.Meshes.CROSS=Mesh.MergeMeshes([\r\n\t\t\tSprite.Meshes.SPRITE.clone(),\r\n\t\t\tSprite.Meshes.SPRITE.clone().rotate(YAxis,Math.PI/2,WORLDSPACE),\r\n\t\t]);\r\n\t\tfor (const key in Sprite.Meshes){\r\n\t\t\tSprite.Meshes[key].renderingGroupId=mv3d.enumRenderGroups.MAIN;\r\n\t\t\tmv3d.scene.removeMesh(Sprite.Meshes[key]);\r\n\t\t}\r\n\t},\r\n\r\n\tasync getShadowMaterial(){\r\n\t\tif(this._shadowMaterial){ return this._shadowMaterial; }\r\n\t\tconst shadowTexture = await mv3d.createTexture(`${mv3d.MV3D_FOLDER}/shadow.png`);\r\n\t\tconst shadowMaterial = new StandardMaterial('shadow material', mv3d.scene);\r\n\t\tthis._shadowMaterial=shadowMaterial;\r\n\t\tshadowMaterial.diffuseTexture=shadowTexture;\r\n\t\tshadowMaterial.opacityTexture=shadowTexture;\r\n\t\tshadowMaterial.specularColor.set(0,0,0);\r\n\t\tshadowMaterial.dispose=()=>{};\r\n\t\treturn shadowMaterial;\r\n\t},\r\n\tasync getShadowMesh(){\r\n\t\tlet shadowMesh;\r\n\t\twhile(this.getShadowMesh.getting){ await sleep(100); }\r\n\t\tif(this._shadowMesh){ shadowMesh=this._shadowMesh}\r\n\t\telse{\r\n\t\t\tthis.getShadowMesh.getting=true;\r\n\t\t\tshadowMesh=Sprite.Meshes.FLAT.clone('shadow mesh');\r\n\t\t\tshadowMesh.material=await this.getShadowMaterial();\r\n\t\t\tthis._shadowMesh=shadowMesh;\r\n\t\t\tmv3d.scene.removeMesh(shadowMesh);\r\n\t\t\tthis.getShadowMesh.getting=false;\r\n\t\t}\r\n\t\treturn shadowMesh.clone();\r\n\t},\r\n\r\n\tACTOR_SETTINGS: [],\r\n});\r\n\r\nclass Sprite extends TransformNode{\r\n\tconstructor(){\r\n\t\tsuper('sprite',mv3d.scene);\r\n\t\tthis.spriteOrigin = new TransformNode('sprite origin',mv3d.scene);\r\n\t\tthis.spriteOrigin.parent=this;\r\n\t\tthis.mesh = Sprite.Meshes.FLAT.clone();\r\n\t\tthis.mesh.parent = this.spriteOrigin;\r\n\t\tthis.textureLoaded=false;\r\n\t}\r\n\tasync setMaterial(src){\r\n\t\tlet newTexture;\r\n\t\tif(src==='error'){\r\n\t\t\tnewTexture = await mv3d.getErrorTexture();\r\n\t\t}else{\r\n\t\t\tnewTexture = await mv3d.createTexture(src);\r\n\t\t}\r\n\t\tawait this.waitTextureLoaded(newTexture);\r\n\t\tthis.disposeMaterial();\r\n\t\tthis.texture = newTexture;\r\n\t\tthis.texture.hasAlpha=true;\r\n\t\tthis.onTextureLoaded();\r\n\t\tthis.material = new StandardMaterial('sprite material',mv3d.scene);\r\n\t\tthis.material.diffuseTexture=this.texture;\r\n\t\tthis.material.alphaCutOff = mv3d.ALPHA_CUTOFF;\r\n\t\tthis.material.ambientColor.set(1,1,1);\r\n\t\tthis.material.specularColor.set(0,0,0);\r\n\t\tif(!isNaN(this.LIGHT_LIMIT)){ this.material.maxSimultaneousLights=this.LIGHT_LIMIT; }\r\n\t\tthis.mesh.material=this.material;\r\n\t}\r\n\tasync waitTextureLoaded(texture=this.texture){\r\n\t\tawait mv3d.waitTextureLoaded(texture);\r\n\t}\r\n\tonTextureLoaded(){\r\n\t\tthis.texture.updateSamplingMode(1);\r\n\t\tthis.textureLoaded=true;\r\n\t}\r\n\tdisposeMaterial(){\r\n\t\tif(this.material){\r\n\t\t\tthis.material.dispose();\r\n\t\t\tthis.texture.dispose();\r\n\t\t\tthis.material=null;\r\n\t\t\tthis.texture=null;\r\n\t\t}\r\n\t}\r\n\tdispose(...args){\r\n\t\tthis.disposeMaterial();\r\n\t\tsuper.dispose(...args);\r\n\t}\r\n}\r\n\r\nconst z_descriptor = {\r\n\tconfigurable: true,\r\n\tenumerable:false,\r\n\tget(){ return this._mv3d_z; },\r\n\tset(v){\r\n\t\tthis._mv3d_z=v;\r\n\t\tif(this.mv3d_sprite){ this.mv3d_sprite.position.y=v; }\r\n\t}\r\n}\r\nconst z_descriptor2 = {\r\n\tconfigurable: true,\r\n\tenumerable:false,\r\n\tget(){ return this.char._mv3d_z; },\r\n\tset(v){\r\n\t\tthis.char._mv3d_z=v;\r\n\t\tthis.position.y=v;\r\n\t}\r\n}\r\n\r\nclass Character extends Sprite{\r\n\tconstructor(char,order){\r\n\t\tsuper();\r\n\t\tthis.order=order;\r\n\t\tthis.mesh.order=this.order;\r\n\t\tthis.mesh.character=this;\r\n\t\tthis._character=this.char=char;\r\n\t\tthis.charName='';\r\n\t\tthis.charIndex=0;\r\n\t\t\r\n\t\tif(this.char.mv_sprite){\r\n\t\t\tthis.char.mv_sprite.updateBitmap();\r\n\t\t}\r\n\r\n\t\tif(!this.char.mv3d_settings){ this.char.mv3d_settings={}; }\r\n\t\tif(!this.char.mv3d_blenders){ this.char.mv3d_blenders={}; }\r\n\r\n\t\tthis.isVehicle = this.char instanceof Game_Vehicle;\r\n\t\tthis.isBoat = this.isVehicle && this.char.isBoat();\r\n\t\tthis.isShip = this.isVehicle && this.char.isShip();\r\n\t\tthis.isAirship = this.isVehicle && this.char.isAirship();\r\n\t\tthis.isEvent = this.char instanceof Game_Event;\r\n\t\tthis.isPlayer = this.char instanceof Game_Player;\r\n\t\tthis.isFollower = this.char instanceof Game_Follower;\r\n\r\n\t\tthis.updateCharacter();\r\n\t\tthis.updateShape();\r\n\r\n\t\tif(!('_mv3d_z' in this.char)){\r\n\t\t\tthis.char._mv3d_z = mv3d.getWalkHeight(this.char.x,this.char.y);\r\n\t\t}\r\n\t\tObject.defineProperty(this.char,'z',z_descriptor);\r\n\t\tObject.defineProperty(this,'z',z_descriptor2);\r\n\t\tthis.z=this.z;\r\n\t\tthis.platformHeight = this.z;\r\n\t\tthis.targetElevation = this.z;\r\n\t\tthis.prevZ = this.z;\r\n\t\tthis.needsPositionUpdate=true;\r\n\t\tthis.needsMaterialUpdate=true;\r\n\t\t//this.elevation = 0;\r\n\r\n\t\tmv3d.getShadowMesh().then(shadow=>{\r\n\t\t\tthis.shadow = shadow;\r\n\t\t\tthis.shadow.parent = this;\r\n\t\t});\r\n\r\n\t\tthis.blendElevation = this.makeBlender('elevation',0);\r\n\r\n\t\tthis.lightOrigin = new TransformNode('light origin',mv3d.scene);\r\n\t\tthis.lightOrigin.parent=this;\r\n\t\tthis.setupLights();\r\n\t\t\r\n\t\tif(this.isEvent){\r\n\t\t\tthis.eventConfigure();\r\n\t\t}else{\r\n\t\t\tthis.initialConfigure();\r\n\t\t\tthis.needsMaterialUpdate=true;\r\n\t\t}\r\n\r\n\t\tthis.intensiveUpdate();\r\n\t}\r\n\r\n\tget settings(){ return this.char.mv3d_settings; }\r\n\r\n\tisBitmapReady(){\r\n\t\treturn Boolean(this.bitmap && this.bitmap.isReady() && !this._waitingForBitmap);\r\n\t}\r\n\r\n\tisTextureReady(){\r\n\t\treturn Boolean(\r\n\t\t\tthis.texture && this.texture.isReady() && this.isBitmapReady()\r\n\t\t);\r\n\t}\r\n\r\n\tget mv_sprite(){\r\n\t\treturn this.char.mv_sprite||{};\r\n\t}\r\n\tget bitmap(){\r\n\t\treturn this.mv_sprite.bitmap;\r\n\t}\r\n\r\n\tsetTileMaterial(){\r\n\t\tconst setN = mv3d.getSetNumber(this._tileId);\r\n\t\tconst tsName = $gameMap.tileset().tilesetNames[setN];\r\n\t\tif(tsName){\r\n\t\t\t//const textureSrc=`img/tilesets/${tsName}.png`;\r\n\t\t\tconst textureSrc=ImageManager.loadTileset(tsName)._url;\r\n\t\t\tthis.setMaterial(textureSrc);\r\n\t\t}else{\r\n\t\t\tthis.setMaterial(\"error\");\r\n\t\t}\r\n\t}\r\n\r\n\tasync waitBitmapLoaded(){\r\n\t\tif(!this.char.mv_sprite){\r\n\t\t\tawait sleep();\r\n\t\t\tif(!this.char.mv_sprite){\r\n\t\t\t\tconsole.warn('mv_sprite is undefined');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._waitingForBitmap=true;\r\n\t\tthis.char.mv_sprite.updateBitmap();\r\n\t\tawait mv3d.waitBitmapLoaded(this.char.mv_sprite.bitmap);\r\n\t\tthis._waitingForBitmap=false;\r\n\t}\r\n\r\n\tasync waitTextureLoaded(texture=this.texture){\r\n\t\tawait this.waitBitmapLoaded();\r\n\t\tawait super.waitTextureLoaded(texture);\r\n\t}\r\n\r\n\tonTextureLoaded(){\r\n\t\tsuper.onTextureLoaded();\r\n\t\t//this.updateFrame();\r\n\t\tthis.updateScale();\r\n\t\tthis.needsMaterialUpdate=true;\r\n\t}\r\n\r\n\tisImageChanged(){\r\n\t\treturn (this._tilesetId !== $gameMap.tilesetId()\r\n\t\t||this._tileId !== this._character.tileId()\r\n\t\t||this._characterName !== this._character.characterName()\r\n\t\t//||this._characterIndex !== this._character.characterIndex()\r\n\t\t);\r\n\t}\r\n\tupdateCharacter(){\r\n\t\tthis.needsPositionUpdate=true;\r\n\t\tthis._tilesetId = $gameMap.tilesetId();\r\n\t\tthis._tileId = this._character.tileId();\r\n\t\tthis._characterName = this._character.characterName();\r\n\t\tthis._characterIndex = this._character.characterIndex();\r\n\t\tthis._isBigCharacter = ImageManager.isBigCharacter(this._characterName);\r\n\t\tthis.isEmpty=false;\r\n\t\tthis.mesh.setEnabled(true);\r\n\t\tif(this._tileId>0){\r\n\t\t\tthis.setTileMaterial(this._tileId);\r\n\t\t}else if(this._characterName){\r\n\t\t\tthis.setMaterial(`img/characters/${this._characterName}.png`);\r\n\t\t}else{\r\n\t\t\tthis.isEmpty=true;\r\n\t\t\tthis.textureLoaded=false;\r\n\t\t\tthis.disposeMaterial();\r\n\t\t\tthis.mesh.setEnabled(false);\r\n\t\t\tthis.spriteWidth=1;\r\n\t\t\tthis.spriteHeight=1;\r\n\t\t\tthis.updateScale();\r\n\t\t}\r\n\t}\r\n\tsetFrame(x,y,w,h){\r\n\t\tif(!this.isTextureReady()){ return; }\r\n\t\tthis.texture.crop(x,y,w,h,this._tileId>0);\r\n\t}\r\n\r\n\tasync updateScale(){\r\n\t\tif(this.isEmpty){\r\n\t\t\tthis.spriteWidth=1;\r\n\t\t\tthis.spriteHeight=1;\r\n\t\t\tthis.mesh.scaling.set(1,1,1);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(!this.isBitmapReady()){ await this.waitBitmapLoaded(); }\r\n\t\tthis.mv_sprite.updateBitmap();\r\n\t\tconst configScale = this.getConfig('scale',new Vector2(1,1));\r\n\t\tthis.spriteWidth=this.mv_sprite.patternWidth()/tileSize() * configScale.x;\r\n\t\tthis.spriteHeight=this.mv_sprite.patternHeight()/tileSize() * configScale.y;\r\n\t\tconst xscale = this.spriteWidth;\r\n\t\tconst yscale = this.spriteHeight;\r\n\r\n\t\tthis.mesh.scaling.set(xscale,yscale,yscale);\r\n\t}\r\n\r\n\tgetDefaultConfigObject(){\r\n\t\tif(this.isVehicle){\r\n\t\t\treturn mv3d[`${this.char._type.toUpperCase()}_SETTINGS`].conf;\r\n\t\t}\r\n\t\tif(this.char.isTile()){\r\n\t\t\treturn mv3d.EVENT_TILE_SETTINGS;\r\n\t\t}else if(this.isEvent && this.char.isObjectCharacter()){\r\n\t\t\treturn mv3d.EVENT_OBJ_SETTINGS;\r\n\t\t}else{\r\n\t\t\treturn mv3d.EVENT_CHAR_SETTINGS;\r\n\t\t}\r\n\t}\r\n\r\n\tgetActorConfigObject(){\r\n\t\tconst id = $gameParty._actors[ this.isFollower ? this.char._memberIndex : 0 ];\r\n\t\tif(!id){ return {}; }\r\n\t\tif(!(id in mv3d.ACTOR_SETTINGS)){\r\n\t\t\tconst data = $dataActors[id];\r\n\t\t\tmv3d.ACTOR_SETTINGS[id]=mv3d.readConfigurationFunctions(\r\n\t\t\t\tmv3d.readConfigurationBlocksAndTags(data.note),\r\n\t\t\t\tmv3d.eventConfigurationFunctions\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn mv3d.ACTOR_SETTINGS[id];\r\n\t}\r\n\r\n\tgetConfig(key,dfault=undefined){\r\n\t\tif(key in this.settings){ return this.settings[key]; }\r\n\t\tif(this.isEvent){\r\n\t\t\tif(this.settings_event_page && key in this.settings_event_page){\r\n\t\t\t\treturn this.settings_event_page[key];\r\n\t\t\t}else if(this.settings_event && key in this.settings_event){\r\n\t\t\t\treturn this.settings_event[key];\r\n\t\t\t}\r\n\t\t}else if(this.isPlayer||this.isFollower){\r\n\t\t\tconst ACTOR_SETTINGS = this.getActorConfigObject();\r\n\t\t\tif(key in ACTOR_SETTINGS){\r\n\t\t\t\treturn ACTOR_SETTINGS[key];\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst EVENT_SETTINGS = this.getDefaultConfigObject();\r\n\t\tif(key in EVENT_SETTINGS){\r\n\t\t\treturn EVENT_SETTINGS[key];\r\n\t\t}\r\n\t\treturn dfault;\r\n\t}\r\n\thasConfig(key){\r\n\t\treturn key in this.settings\r\n\t\t||this.isEvent &&\r\n\t\t\t(this.settings_event_page && key in this.settings_event_page\r\n\t\t\t|| this.settings_event && key in this.settings_event)\r\n\t\t|| (this.isPlayer||this.isFollower) && key in this.getActorConfigObject()\r\n\t\t|| key in this.getDefaultConfigObject();\r\n\t}\r\n\r\n\teventConfigure(){\r\n\t\tif(!this.settings_event){\r\n\t\t\tthis.settings_event={};\r\n\t\t\tconst note = this.char.event().note;\r\n\t\t\tmv3d.readConfigurationFunctions(\r\n\t\t\t\tmv3d.readConfigurationTags(note),\r\n\t\t\t\tmv3d.eventConfigurationFunctions,\r\n\t\t\t\tthis.settings_event,\r\n\t\t\t);\r\n\r\n\t\t\tthis.initialConfigure();\r\n\t\t}\r\n\t\tthis.settings_event_page={};\r\n\t\tconst page = this.char.page();\r\n\t\tif(!page){ return; }\r\n\t\tlet comments = '';\r\n\t\tfor (const command of page.list){\r\n\t\t\tif(command.code===108||command.code===408){\r\n\t\t\t\tcomments+=command.parameters[0];\r\n\t\t\t}\r\n\t\t}\r\n\t\tmv3d.readConfigurationFunctions(\r\n\t\t\tmv3d.readConfigurationTags(comments),\r\n\t\t\tmv3d.eventConfigurationFunctions,\r\n\t\t\tthis.settings_event_page,\r\n\t\t);\r\n\t\tthis.updateScale();\r\n\t\tthis.updateShape();\r\n\r\n\t\tif(this.char.mv3d_needsConfigure){\r\n\t\t\tthis.char.mv3d_needsConfigure=false;\r\n\t\t\tthis.needsPositionUpdate=true;\r\n\t\t}else{ return; }\r\n\r\n\t\tthis.pageConfigure();\r\n\r\n\t}\r\n\r\n\tinitialConfigure(){\r\n\t\tthis.configureHeight();\r\n\t}\r\n\r\n\tpageConfigure(settings=this.settings_event_page){\r\n\t\tconst transient = settings===this.settings;\r\n\t\tif('pos' in settings){\r\n\t\t\tconst event=this.char.event();\r\n\t\t\tconst pos = settings;\r\n\t\t\tthis.char.locate(\r\n\t\t\t\trelativeNumber(event.x,pos.x),\r\n\t\t\t\trelativeNumber(event.y,pos.y),\r\n\t\t\t);\r\n\t\t\tif(transient)delete settings.pos;\r\n\t\t}\r\n\t\tthis.setupEventLights();\r\n\r\n\t\tif(this.lamp){\r\n\t\t\tif('lamp' in settings){\r\n\t\t\t\tconst lampConfig = this.getConfig('lamp');\r\n\t\t\t\tthis.blendLampColor.setValue(lampConfig.color,0.5);\r\n\t\t\t\tthis.blendLampIntensity.setValue(lampConfig.intensity,0.5);\r\n\t\t\t\tthis.blendLampDistance.setValue(lampConfig.distance,0.5);\r\n\t\t\t}\r\n\t\t\tif(transient)delete settings.lamp;\r\n\t\t}\r\n\t\tif(this.flashlight){\r\n\t\t\tif('flashlight' in settings){\r\n\t\t\t\tconst flashlightConfig = this.getConfig('flashlight');\r\n\t\t\t\tthis.blendFlashlightColor.setValue(flashlightConfig.color,0.5);\r\n\t\t\t\tthis.blendFlashlightIntensity.setValue(flashlightConfig.intensity,0.5);\r\n\t\t\t\tthis.blendFlashlightDistance.setValue(flashlightConfig.distance,0.5);\r\n\t\t\t\tthis.blendFlashlightAngle.setValue(flashlightConfig.angle,0.5);\r\n\t\t\t\tif(transient)delete settings.flashlight;\r\n\t\t\t}\r\n\t\t\tif('flashlightPitch' in settings){\r\n\t\t\t\tthis.blendFlashlightPitch.setValue(this.getConfig('flashlightPitch',90),0.25);\r\n\t\t\t\tif(transient)delete settings.flashlightPitch;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif('height' in settings || this.isAbove!==(this.char._priorityType===2)){\r\n\t\t\tthis.configureHeight();\r\n\t\t\tif(transient)delete settings.height;\r\n\t\t}\r\n\r\n\t\tthis.updateScale();\r\n\t\tthis.updateShape();\r\n\t\tthis.needsMaterialUpdate=true;\r\n\t\tthis.updateLightOffsets();\r\n\t}\r\n\r\n\tupdateEmissive(){\r\n\t\tif(!this.material){ return; }\r\n\t\tconst emissiveColor = this.material.emissiveColor;\r\n\t\tconst glow = this.getConfig('glow', new Color4(0,0,0,0));\r\n\t\tthis.material.mv3d_glowColor=glow;\r\n\t\tif(this.lamp){\r\n\t\t\tconst lampColor=this.lamp.diffuse;\r\n\t\t\tconst intensity = Math.max(0,Math.min(1,this.lamp.intensity,this.lamp.range,this.lamp.intensity/4+this.lamp.range/4));\r\n\t\t\temissiveColor.set(\r\n\t\t\t\tMath.max(glow.r,lampColor.r*intensity),\r\n\t\t\t\tMath.max(glow.g,lampColor.g*intensity),\r\n\t\t\t\tMath.max(glow.b,lampColor.b*intensity)\r\n\t\t\t);\r\n\t\t}else{\r\n\t\t\temissiveColor.set(glow.r,glow.g,glow.b);\r\n\t\t}\r\n\t\tconst blendColor = this.mv_sprite._blendColor;\r\n\t\tconst blendAlpha=blendColor[3]/255;\r\n\t\temissiveColor.r+=(2-emissiveColor.r)*Math.pow(blendColor[0]/255*blendAlpha,0.5);\r\n\t\temissiveColor.g+=(2-emissiveColor.g)*Math.pow(blendColor[1]/255*blendAlpha,0.5);\r\n\t\temissiveColor.b+=(2-emissiveColor.b)*Math.pow(blendColor[2]/255*blendAlpha,0.5);\r\n\r\n\t\tthis.material.mv3d_noShadow=!this.getConfig('dynShadow',true);\r\n\t}\r\n\r\n\tconfigureHeight(){\r\n\t\tthis.isAbove = this.char._priorityType===2;\r\n\t\tlet height = Math.max(0, this.getConfig('height',this.isAbove&&!this.hasConfig('zlock')?mv3d.EVENT_HEIGHT:0) );\r\n\t\tthis.blendElevation.setValue(height,0);\r\n\t\tthis.z = this.platformHeight + height;\r\n\t}\r\n\r\n\tsetupMesh(){\r\n\t\tif(!this.mesh.mv3d_isSetup){\r\n\t\t\tmv3d.callFeatures('createCharMesh',this.mesh);\r\n\t\t\tthis.mesh.parent = this.spriteOrigin;\r\n\t\t\tthis.mesh.character=this;\r\n\t\t\tthis.mesh.order=this.order;\r\n\t\t\tif(this.material){\r\n\t\t\t\tthis.mesh.material=this.material;\r\n\t\t\t}\r\n\t\t\tif(this.isEmpty){\r\n\t\t\t\tthis.mesh.setEnabled(false);\r\n\t\t\t}else{\r\n\t\t\t\tthis.mesh.setEnabled(true);\r\n\t\t\t}\r\n\t\t\tthis.mesh.mv3d_isSetup=true;\r\n\t\t}\r\n\t\tif(this.flashlight){\r\n\t\t\tthis.flashlight.excludedMeshes.splice(0,Infinity);\r\n\t\t\tthis.flashlight.excludedMeshes.push(this.mesh);\r\n\t\t}\r\n\t}\r\n\r\n\tdirtyNearbyCells(){\r\n\t\tif(!this.cell){ return; }\r\n\t\tCharacter.dirtyNearbyCells(this.cell.cx,this.cell.cy);\r\n\t}\r\n\tstatic dirtyNearbyCells(cx,cy){\r\n\t\tfor(let ix=cx-1; ix<=cx+1; ++ix)\r\n\t\tfor(let iy=cy-1; iy<=cy+1; ++iy){\r\n\t\t\tlet x=ix, y=iy;\r\n\t\t\tif(mv3d.loopHorizontal()){ x=x.mod(Math.ceil(mv3d.mapWidth()/mv3d.CELL_SIZE)); }\r\n\t\t\tif(mv3d.loopVertical()){ y=y.mod(Math.ceil(mv3d.mapHeight()/mv3d.CELL_SIZE)); }\r\n\t\t\tconst cell = mv3d.cells[[x,y]];\r\n\t\t\tif(!cell){ continue; }\r\n\t\t\tif(!cell._needsIntensiveUpdate){\r\n\t\t\t\tcell._needsIntensiveUpdate=true;\r\n\t\t\t\tmv3d._cellsNeedingIntensiveUpdate.push(cell);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tintensiveUpdate(){\r\n\t\tthis.setupLightInclusionLists();\r\n\t}\r\n\r\n\tsetupLightInclusionLists(){\r\n\t\tif(this.flashlight){\r\n\t\t\tthis.flashlight.includedOnlyMeshes.splice(0,Infinity);\r\n\t\t\tthis.flashlight.includedOnlyMeshes.push(...this.getMeshesInRangeOfLight(this.flashlight));\r\n\t\t}\r\n\t\tif(this.lamp){\r\n\t\t\tthis.lamp.includedOnlyMeshes.splice(0,Infinity);\r\n\t\t\tthis.lamp.includedOnlyMeshes.push(...this.getMeshesInRangeOfLight(this.lamp));\r\n\t\t}\r\n\t}\r\n\r\n\tgetMeshesInRangeOfLight(light){\r\n\t\tif(!this.cell){ return []; }\r\n\t\tconst pos = Vector3.TransformCoordinates(light.position,light.getWorldMatrix());\r\n\t\tconst meshes=[];\r\n\t\tfor(let _cx=this.cell.cx-1; _cx<=this.cell.cx+1; ++_cx)\r\n\t\tfor(let _cy=this.cell.cy-1; _cy<=this.cell.cy+1; ++_cy){\r\n\t\t\tlet cx=_cx, cy=_cy;\r\n\t\t\tif(mv3d.loopHorizontal()){ cx=cx.mod(Math.ceil(mv3d.mapWidth()/mv3d.CELL_SIZE)); }\r\n\t\t\tif(mv3d.loopVertical()){ cy=cy.mod(Math.ceil(mv3d.mapHeight()/mv3d.CELL_SIZE)); }\r\n\t\t\tconst cell = mv3d.cells[[cx,cy]];\r\n\t\t\tif(!cell||!cell.mesh){ continue; }\r\n\t\t\tconst sphere = cell.mesh.getBoundingInfo().boundingSphere;\r\n\t\t\tconst dist = Vector3.Distance(pos,sphere.centerWorld);\r\n\t\t\tif(dist>=sphere.radiusWorld+light.range){ continue; }\r\n\t\t\tmeshes.push(cell.mesh);\r\n\t\t\tfor(let character of cell.characters){\r\n\t\t\t\tconst sphere = character.mesh.getBoundingInfo().boundingSphere;\r\n\t\t\t\tconst dist = Vector3.Distance(pos,sphere.centerWorld);\r\n\t\t\t\tif(dist>=sphere.radiusWorld+light.range){ continue; }\r\n\t\t\t\tmeshes.push(character.mesh);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn meshes;\r\n\t}\r\n\r\n\tsetupEventLights(){\r\n\t\tconst flashlightConfig = this.getConfig('flashlight');\r\n\t\tconst lampConfig = this.getConfig('lamp');\r\n\t\tif(flashlightConfig && !this.flashlight){\r\n\t\t\tthis.setupFlashlight();\r\n\t\t}\r\n\t\tif(lampConfig && !this.lamp){\r\n\t\t\tthis.setupLamp();\r\n\t\t}\r\n\t}\r\n\tsetupLights(){\r\n\t\tif('flashlightColor' in this.char.mv3d_blenders){\r\n\t\t\tthis.setupFlashlight();\r\n\t\t}\r\n\t\tif('lampColor' in this.char.mv3d_blenders){\r\n\t\t\tthis.setupLamp();\r\n\t\t}\r\n\t}\r\n\r\n\tsetupFlashlight(){\r\n\t\tif(this.flashlight){ return; }\r\n\t\tconst config = this.getConfig('flashlight',{\r\n\t\t\tcolor:0xffffff,\r\n\t\t\tintensity:1,\r\n\t\t\tdistance:mv3d.LIGHT_DIST,\r\n\t\t\tangle:mv3d.LIGHT_ANGLE,\r\n\t\t});\r\n\t\tthis.blendFlashlightColor = this.makeColorBlender('flashlightColor',config.color);\r\n\t\tthis.blendFlashlightIntensity = this.makeBlender('flashlightIntensity',config.intensity);\r\n\t\tthis.blendFlashlightDistance = this.makeBlender('flashlightDistance',config.distance);\r\n\t\tconst lightDist = this.blendFlashlightDistance.targetValue();\r\n\t\tthis.blendFlashlightDistance.setValue(0,0); this.blendFlashlightDistance.setValue(lightDist,0.25);\r\n\t\tthis.blendFlashlightAngle = this.makeBlender('flashlightAngle',config.angle);\r\n\t\tthis.flashlight = new SpotLight('flashlight',Vector3.Zero(),Vector3.Zero(),\r\n\t\t\tdegtorad(this.blendFlashlightAngle.targetValue()+mv3d.FLASHLIGHT_EXTRA_ANGLE),0,mv3d.scene);\r\n\t\tthis.flashlight.renderPriority=2;\r\n\t\tthis.updateFlashlightExp();\r\n\t\tthis.flashlight.range = this.blendFlashlightDistance.targetValue();\r\n\t\tthis.flashlight.intensity=this.blendFlashlightIntensity.targetValue()*mv3d.FLASHLIGHT_INTENSITY_MULTIPLIER;\r\n\t\tthis.flashlight.diffuse.set(...this.blendFlashlightColor.targetComponents());\r\n\t\t//this.flashlight.projectionTexture = mv3d.getFlashlightTexture();\r\n\t\tthis.flashlight.direction.y=-1;\r\n\t\tthis.flashlightOrigin=new TransformNode('flashlight origin',mv3d.scene);\r\n\t\tthis.flashlightOrigin.parent=this.lightOrigin;\r\n\t\tthis.flashlight.parent=this.flashlightOrigin;\r\n\t\tthis.blendFlashlightPitch = this.makeBlender('flashlightPitch',90);\r\n\t\tthis.blendFlashlightYaw = this.makeBlender('flashlightYaw', 0);\r\n\t\tthis.blendFlashlightYaw.cycle=360;\r\n\t\tthis.updateFlashlightDirection();\r\n\t\tthis.setupMesh();\r\n\t\tthis.updateLightOffsets();\r\n\t}\r\n\r\n\tupdateFlashlightExp(){\r\n\t\tthis.flashlight.exponent = 64800*Math.pow(this.blendFlashlightAngle.currentValue(),-2);\r\n\t}\r\n\r\n\tsetupLamp(){\r\n\t\tif(this.lamp){ return; }\r\n\t\tconst config = this.getConfig('lamp',{\r\n\t\t\tcolor:0xffffff,\r\n\t\t\tintensity:1,\r\n\t\t\tdistance:mv3d.LIGHT_DIST,\r\n\t\t});\r\n\t\tthis.blendLampColor = this.makeColorBlender('lampColor',config.color);\r\n\t\tthis.blendLampIntensity = this.makeBlender('lampIntensity',config.intensity);\r\n\t\tthis.blendLampDistance = this.makeBlender('lampDistance',config.distance);\r\n\t\tconst lightDist = this.blendLampDistance.targetValue();\r\n\t\tthis.blendLampDistance.setValue(0,0); this.blendLampDistance.setValue(lightDist,0.25);\r\n\t\tthis.lamp = new PointLight('lamp',Vector3.Zero(),mv3d.scene);\r\n\t\tthis.lamp.renderPriority=1;\r\n\t\tthis.lamp.diffuse.set(...this.blendLampColor.targetComponents());\r\n\t\tthis.lamp.intensity=this.blendLampIntensity.targetValue();\r\n\t\tthis.lamp.range=this.blendLampDistance.targetValue();\r\n\t\tthis.lampOrigin=new TransformNode('lamp origin',mv3d.scene);\r\n\t\tthis.lampOrigin.parent = this.lightOrigin;\r\n\t\tthis.lamp.parent=this.lampOrigin;\r\n\t\tthis.updateLightOffsets();\r\n\t}\r\n\r\n\tupdateFlashlightDirection(){\r\n\t\tthis.flashlightOrigin.yaw=this.blendFlashlightYaw.currentValue();\r\n\t\tthis.flashlightOrigin.pitch=-this.blendFlashlightPitch.currentValue();\r\n\t\t//this.flashlightOrigin.position.set(0,0,0);\r\n\t\t//let flashlightOffset = Math.tan(degtorad(90-this.blendFlashlightAngle.currentValue()-Math.max(90,this.blendFlashlightPitch.currentValue())+90))*mv3d.LIGHT_HEIGHT;\r\n\t\t//flashlightOffset = Math.max(0,Math.min(1,flashlightOffset));\r\n\t\t//this.flashlight.range+=flashlightOffset;\r\n\t\t//this.flashlightOrigin.translate(YAxis,flashlightOffset,LOCALSPACE);\r\n\t}\r\n\r\n\tupdateLights(){\r\n\t\tif(this.flashlight){\r\n\t\t\tconst flashlightYaw = 180+relativeNumber( mv3d.dirToYaw( this.char.mv3d_direction(),mv3d.DIR8MOVE ), this.getConfig('flashlightYaw','+0'));\r\n\t\t\tif(flashlightYaw !== this.blendFlashlightYaw.targetValue()){\r\n\t\t\t\tthis.blendFlashlightYaw.setValue(flashlightYaw,0.25);\r\n\t\t\t}\r\n\t\t\tif(this.blendFlashlightColor.update()|this.blendFlashlightIntensity.update()\r\n\t\t\t|this.blendFlashlightDistance.update()|this.blendFlashlightAngle.update()\r\n\t\t\t|this.blendFlashlightYaw.update()|this.blendFlashlightPitch.update()){\r\n\t\t\t\tthis.flashlight.diffuse.set(...this.blendFlashlightColor.currentComponents());\r\n\t\t\t\tthis.flashlight.intensity=this.blendFlashlightIntensity.currentValue()*mv3d.FLASHLIGHT_INTENSITY_MULTIPLIER;\r\n\t\t\t\tthis.flashlight.range=this.blendFlashlightDistance.currentValue();\r\n\t\t\t\tthis.flashlight.angle=degtorad(this.blendFlashlightAngle.currentValue()+mv3d.FLASHLIGHT_EXTRA_ANGLE);\r\n\t\t\t\tthis.updateFlashlightExp();\r\n\t\t\t\tthis.updateFlashlightDirection();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this.lamp){\r\n\t\t\tif(this.blendLampColor.update()|this.blendLampIntensity.update()|this.blendLampDistance.update()){\r\n\t\t\t\tthis.lamp.diffuse.set(...this.blendLampColor.currentComponents());\r\n\t\t\t\tthis.lamp.intensity=this.blendLampIntensity.currentValue();\r\n\t\t\t\tthis.lamp.range=this.blendLampDistance.currentValue();\r\n\t\t\t\tthis.needsMaterialUpdate=true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tmakeBlender(key,dfault,clazz=Blender){\r\n\t\tif(key in this.char.mv3d_blenders){\r\n\t\t\tdfault = this.char.mv3d_blenders[key];\r\n\t\t}else{\r\n\t\t\tthis.char.mv3d_blenders[key]=dfault;\r\n\t\t}\r\n\t\tconst blender=new clazz(key,dfault,false);\r\n\t\tblender.storageLocation=()=>this.char.mv3d_blenders;\r\n\t\treturn blender;\r\n\t}\r\n\tmakeColorBlender(key,dfault){\r\n\t\treturn this.makeBlender(key,dfault,ColorBlender);\r\n\t}\r\n\r\n\thasBush(){\r\n\t\tif(this.platformChar){ return false; }\r\n\t\treturn this.getConfig('bush',!(\r\n\t\t\tthis.char.isTile() || this.isVehicle\r\n\t\t\t|| this.isEvent && this.char.isObjectCharacter()\r\n\t\t))&&!(this.blendElevation.currentValue()||this.falling);\r\n\t}\r\n\r\n\tgetShape(){\r\n\t\treturn this.getConfig('shape', mv3d.enumShapes.SPRITE );\r\n\t}\r\n\tupdateShape(){\r\n\t\tconst newshape = this.getShape();\r\n\t\tif(this.shape === newshape){ return; }\r\n\t\tthis.shape=newshape;\r\n\t\t//let backfaceCulling=true;\r\n\t\tlet geometry = Sprite.Meshes.SPRITE;\r\n\t\tconst shapes = mv3d.enumShapes;\r\n\t\tswitch(this.shape){\r\n\t\tcase shapes.FLAT:\r\n\t\t\tgeometry = Sprite.Meshes.FLAT;\r\n\t\t\t//if(this.char._priorityType===2||this.hasConfig('height')||this.hasConfig('z')){\r\n\t\t\t//\tbackfaceCulling=false;\r\n\t\t\t//}\r\n\t\t\tbreak;\r\n\t\tcase shapes.XCROSS:\r\n\t\tcase shapes.CROSS:\r\n\t\t\tgeometry = Sprite.Meshes.CROSS;\r\n\t\t\t//backfaceCulling=false;\r\n\t\t\tbreak;\r\n\t\tcase shapes.WALL:\r\n\t\tcase shapes.FENCE:\r\n\t\t\t//backfaceCulling=false;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tmv3d.callFeatures('destroyCharMesh',this.mesh);\r\n\t\tthis.mesh.dispose();\r\n\t\tthis.mesh=geometry.clone();\r\n\t\t//this.material.backfaceCulling=backfaceCulling;\r\n\t\tthis.setupMesh();\r\n\t\tthis.spriteOrigin.rotation.set(0,0,0);\r\n\t\tthis.dirtyNearbyCells();\r\n\t}\r\n\r\n\tupdate(){\r\n\t\tif(this.char._erased){\r\n\t\t\tthis.dispose();\r\n\t\t}\r\n\r\n\r\n\t\tthis.visible=this.mv_sprite.visible;\r\n\t\tif(typeof this.char.isVisible === 'function'){\r\n\t\t\tthis.visible=this.visible&&this.char.isVisible();\r\n\t\t}\r\n\t\tconst inRenderDist = this.char.mv3d_inRenderDist();\r\n\t\tthis.disabled=!this.visible;\r\n\t\tif(this.char.isTransparent() || !inRenderDist\r\n\t\t|| (this.char._characterName||this.char._tileId)&&!this.textureLoaded){\r\n\t\t\tthis.visible=false;\r\n\t\t}\r\n\t\tif(!this._isEnabled){\r\n\t\t\tif(this.visible){ this.setEnabled(true); this.needsPositionUpdate=true; }\r\n\t\t}else{\r\n\t\t\tif(!this.visible){ this.setEnabled(false); }\r\n\t\t}\r\n\r\n\t\tif(this.isImageChanged()){\r\n\t\t\tthis.updateCharacter();\r\n\t\t}\r\n\t\t//if(this.patternChanged()){\r\n\t\t//\tthis.updateFrame();\r\n\t\t//}\r\n\r\n\t\tif(!inRenderDist){\r\n\t\t\t//this.updateAnimations();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(this.blendElevation.update()){\r\n\t\t\tthis.needsPositionUpdate=true;\r\n\t\t}else if(this.x!==this.char._realX || this.y!==this.char._realY\r\n\t\t|| this.falling || this.prevZ !== this.z\r\n\t\t|| this.platformChar&&this.platformChar.needsPositionUpdate\r\n\t\t|| this.isPlayer || this.char===$gamePlayer.vehicle()\r\n\t\t){\r\n\t\t\tthis.needsPositionUpdate=true;\r\n\t\t\tthis.prevZ = this.z;\r\n\t\t}\r\n\r\n\t\tif(this.material && this._isEnabled){\r\n\t\t\tthis.updateNormal();\r\n\t\t}else{\r\n\t\t\tthis.updateEmpty();\r\n\t\t}\r\n\t\tthis.updateAnimations();\r\n\t\tif(this.needsMaterialUpdate){\r\n\t\t\tthis.updateEmissive();\r\n\t\t\tthis.needsMaterialUpdate=false;\r\n\t\t}\r\n\t\tthis.char.mv3d_positionUpdated=this.needsPositionUpdate;\r\n\t\tthis.needsPositionUpdate=false;\r\n\t\t//this.mesh.renderOutline=true;\r\n\t\t//this.mesh.outlineWidth=1;\r\n\t}\r\n\t//get needsPositionUpdate(){return this._needsPositionUpdate; }\r\n\t//set needsPositionUpdate(v){ this._needsPositionUpdate=v; }\r\n\r\n\tupdateNormal(){\r\n\t\tconst shapes = mv3d.enumShapes;\r\n\t\tif(this.shape===shapes.SPRITE){\r\n\t\t\tthis.mesh.pitch = mv3d.blendCameraPitch.currentValue()-90;\r\n\t\t\tthis.mesh.yaw = mv3d.blendCameraYaw.currentValue();\r\n\t\t}else if(this.shape===shapes.TREE){\r\n\t\t\tthis.spriteOrigin.pitch=this.getConfig('pitch',0);\r\n\t\t\tthis.mesh.yaw = mv3d.blendCameraYaw.currentValue();\r\n\t\t}else{\r\n\t\t\tthis.mesh.yaw=this.getConfig('rot',0);\r\n\t\t\tthis.spriteOrigin.pitch=this.getConfig('pitch',0);\r\n\t\t\tthis.spriteOrigin.yaw=this.getConfig('yaw',0);\r\n\t\t\tif(this.shape===shapes.XCROSS){this.mesh.yaw+=45;}\r\n\t\t}\r\n\r\n\t\tif(this.isPlayer){\r\n\t\t\tthis.mesh.visibility = +!mv3d.is1stPerson(true);\r\n\t\t}\r\n\r\n\t\tthis.updateAlpha();\r\n\r\n\t\tthis.updatePosition();\r\n\t\tthis.updateElevation();\r\n\t\tif(this.shadow){ this.updateShadow(); }\r\n\t\tthis.updateLights();\r\n\t}\r\n\r\n\tupdateEmpty(){\r\n\t\tthis.updatePosition();\r\n\t\tthis.updateElevation();\r\n\t\tthis.updateLights();\r\n\t\tif(this.shadow&&this.shadow._isEnabled){ this.shadow.setEnabled(false); }\r\n\t}\r\n\r\n\tupdateAlpha(){\r\n\t\tlet hasAlpha=this.hasConfig('alpha')||this.char.opacity()<255;\r\n\t\tthis.bush = Boolean(this.char.bushDepth());\r\n\t\tconst blendMode = mv3d.blendModes[this.char.blendMode()];\r\n\t\tif(this.material.alphaMode!==blendMode){\r\n\t\t\tthis.material.alphaMode=blendMode;\r\n\t\t}\r\n\t\tif(blendMode!==mv3d.blendModes.NORMAL){\r\n\t\t\thasAlpha=true;\r\n\t\t}else if(this.bush && this.hasBush()){\r\n\t\t\tif(!this.material.opacityTexture){\r\n\t\t\t\tconst bushAlpha = mv3d.getBushAlphaTextureSync();\r\n\t\t\t\tif(bushAlpha&&bushAlpha.isReady()){\r\n\t\t\t\t\tthis.material.opacityTexture=bushAlpha;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif(this.material.opacityTexture){\r\n\t\t\t\tthis.material.opacityTexture=null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(hasAlpha||this.material.opacityTexture){\r\n\t\t\tthis.material.useAlphaFromDiffuseTexture=true;\r\n\t\t\tthis.material.alpha=this.getConfig('alpha',1)*this.char.opacity()/255;\r\n\t\t}else{\r\n\t\t\tthis.material.useAlphaFromDiffuseTexture=false;\r\n\t\t\tthis.material.alpha=1;\r\n\t\t}\r\n\t}\r\n\r\n\tupdateLightOffsets(){\r\n\t\tif(this.lamp){\r\n\t\t\tconst height = this.getConfig('lampHeight',mv3d.LAMP_HEIGHT);\r\n\t\t\tconst offset = this.getConfig('lampOffset',null);\r\n\t\t\tthis.lampOrigin.position.set(0,0,0);\r\n\t\t\tthis.lampOrigin.z=height;\r\n\t\t\tif(offset){\r\n\t\t\t\tthis.lampOrigin.x=offset.x;\r\n\t\t\t\tthis.lampOrigin.y=offset.y;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this.flashlight){\r\n\t\t\tconst height = this.getConfig('flashlightHeight',mv3d.FLASHLIGHT_HEIGHT);\r\n\t\t\tconst offset = this.getConfig('flashlightOffset',null);\r\n\t\t\tthis.flashlightOrigin.position.set(0,0,0);\r\n\t\t\tthis.flashlightOrigin.z=height;\r\n\t\t\tif(offset){\r\n\t\t\t\tthis.flashlightOrigin.x=offset.x;\r\n\t\t\t\tthis.flashlightOrigin.y=offset.y;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tupdatePositionOffsets(){\r\n\t\tthis.spriteOrigin.position.set(0,0,0);\r\n\t\tif(this.shape===mv3d.enumShapes.FLAT){\r\n\t\t\tthis.spriteOrigin.z = mv3d.LAYER_DIST*4;\r\n\t\t}else if(this.shape===mv3d.enumShapes.SPRITE){\r\n\t\t\tthis.spriteOrigin.z = mv3d.LAYER_DIST*4 * (1-Math.max(0,Math.min(90,mv3d.blendCameraPitch.currentValue()))/90);\r\n\t\t}else{\r\n\t\t\tthis.spriteOrigin.z = 0;\r\n\t\t}\r\n\r\n\t\tconst billboardOffset = new Vector2(Math.sin(-mv3d.cameraNode.rotation.y),Math.cos(mv3d.cameraNode.rotation.y));\r\n\t\tthis.billboardOffset=billboardOffset;\r\n\t\tif(this.shape===mv3d.enumShapes.SPRITE){\r\n\t\t\tthis.spriteOrigin.x=billboardOffset.x*mv3d.SPRITE_OFFSET;\r\n\t\t\tthis.spriteOrigin.y=billboardOffset.y*mv3d.SPRITE_OFFSET;\r\n\t\t\tthis.lightOrigin.x=this.spriteOrigin.x;\r\n\t\t\tthis.lightOrigin.y=this.spriteOrigin.y;\r\n\t\t}else{\r\n\t\t\tthis.lightOrigin.x=0;\r\n\t\t\tthis.lightOrigin.y=0;\r\n\t\t}\r\n\r\n\t\tthis.spriteOrigin.x += this.getConfig('xoff',0);\r\n\t\tthis.spriteOrigin.y += this.getConfig('yoff',0);\r\n\t\tthis.spriteOrigin.z += this.getConfig('zoff',0);\r\n\t}\r\n\r\n\tupdatePosition(){\r\n\t\tthis.updatePositionOffsets();\r\n\r\n\t\tconst loopPos = mv3d.loopCoords(this.char._realX,this.char._realY);\r\n\t\tthis.x = loopPos.x;\r\n\t\tthis.y = loopPos.y;\r\n\r\n\t\tif(!this.needsPositionUpdate) { return; }\r\n\r\n\t\tconst cellX=Math.floor(Math.round(this.char._realX)/mv3d.CELL_SIZE);\r\n\t\tconst cellY=Math.floor(Math.round(this.char._realY)/mv3d.CELL_SIZE);\r\n\t\tconst cell = mv3d.cells[[cellX,cellY]];\r\n\t\tif(this.cell&&this.cell!==cell){\r\n\t\t\tthis.removeFromCell();\r\n\t\t}\r\n\t\tif(cell&&!this.cell){\r\n\t\t\tthis.cell=cell;\r\n\t\t\tcell.characters.push(this);\r\n\t\t}\r\n\t\tthis.dirtyNearbyCells();\r\n\t}\r\n\r\n\tupdateElevation(){\r\n\t\tif(!this.needsPositionUpdate) { return; }\r\n\r\n\t\t//don't update when moving on tile corners\r\n\t\tif(this.char.isMoving() && !((this.x-0.5)%1)&&!((this.y-0.5)%1)){ return; }\r\n\r\n\t\tthis.falling=false;\r\n\r\n\t\tif(this.isPlayer){\r\n\t\t\tconst vehicle = this.char.vehicle();\r\n\t\t\tif(vehicle){\r\n\t\t\t//if(vehicle&&vehicle._driving){\r\n\t\t\t\tthis.z = vehicle.z;\r\n\t\t\t\tthis.targetElevation = vehicle.targetElevation;\r\n\t\t\t\tthis.platformChar = vehicle.platformChar;\r\n\t\t\t\tthis.platformHeight = vehicle.platformHeight;\r\n\t\t\t\tif(vehicle._driving){ return; }\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(this.hasConfig('zlock')){\r\n\t\t\tthis.z=this.getConfig('zlock',0);\r\n\t\t\tthis.z += this.blendElevation.currentValue();\r\n\t\t\tthis.targetElevation = this.z;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.hasFloat = this.isVehicle || (this.isPlayer||this.isFollower)&&$gamePlayer.vehicle();\r\n\r\n\t\tconst platform = this.getPlatform(this.char._realX,this.char._realY);\r\n\t\tthis.platform = platform;\r\n\t\tthis.platformHeight = platform.z2;\r\n\t\tthis.platformChar = platform.char;\r\n\r\n\t\tthis.targetElevation = this.getTargetElevation(this.char._realX,this.char._realY,{platform});\r\n\t\tlet gravity = this.getConfig('gravity',mv3d.GRAVITY)/60;\r\n\r\n\t\tif(this.char.isJumping()){\r\n\t\t\tlet jumpProgress = 1-(this.char._jumpCount/(this.char._jumpPeak*2));\r\n\t\t\tlet jumpHeight = Math.pow(jumpProgress-0.5,2)*-4+1;\r\n\t\t\tlet jumpDiff = Math.abs(this.char.mv3d_jumpHeightEnd - this.char.mv3d_jumpHeightStart);\r\n\t\t\tthis.z = this.char.mv3d_jumpHeightStart*(1-jumpProgress)\r\n\t\t\t+ this.char.mv3d_jumpHeightEnd*jumpProgress + jumpHeight*jumpDiff/2\r\n\t\t\t+this.char.jumpHeight()/tileSize();\r\n\t\t}else if(gravity){\r\n\t\t\tconst gap = Math.abs(this.targetElevation-this.z);\r\n\t\t\tif(gap<gravity){ gravity=gap; }\r\n\t\t\t//if(this.z>this.targetElevation||this.z<this.platformHeight){\r\n\t\t\tif(this.z<this.platformHeight){\r\n\t\t\t\tthis.z=this.platformHeight;\r\n\t\t\t}\r\n\t\t\tif(this.z>this.targetElevation){\r\n\t\t\t\tthis.z-=gravity;\r\n\t\t\t\tif(mv3d.tileCollision(this,this.char._realX,this.char._realY,false,false)){\r\n\t\t\t\t\tthis.z=this.platformHeight;\r\n\t\t\t\t}\r\n\t\t\t}else if(this.z<this.targetElevation){\r\n\t\t\t\tthis.z+=gravity\r\n\t\t\t\tif(mv3d.tileCollision(this,this.char._realX,this.char._realY,false,false)){\r\n\t\t\t\t\tthis.z-=gravity;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.falling=this.z>this.targetElevation;\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\tgetTargetElevation(x=this.char._realX,y=this.char._realY,opts={}){\r\n\t\tif(this.isPlayer){\r\n\t\t\tconst vehicle = this.char.vehicle();\r\n\t\t\tif(vehicle&&vehicle.mv3d_sprite&&vehicle._driving){\r\n\t\t\t\treturn vehicle.mv3d_sprite.getTargetElevation(x,y);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this.hasConfig('zlock')){\r\n\t\t\treturn this.getConfig('zlock',0)+this.blendElevation.currentValue();\r\n\t\t}\r\n\r\n\t\tif(!opts.platform){ opts.platform = this.getPlatform(x,y,opts); }\r\n\t\tconst platform = opts.platform;\r\n\t\tlet targetElevation;\r\n\t\tif(this.hasFloat && !this.platformChar){\r\n\t\t\ttargetElevation = this.getPlatformFloat(x,y,{platform});\r\n\t\t}else{\r\n\t\t\ttargetElevation = platform.z2;\r\n\t\t}\r\n\r\n\t\ttargetElevation += this.blendElevation.currentValue()\r\n\r\n\t\tif(this.isAirship && $gamePlayer.vehicle()===this.char){\r\n\t\t\ttargetElevation += mv3d.loadData('airship_height',mv3d.AIRSHIP_SETTINGS.height)*this.char._altitude/this.char.maxAltitude();\r\n\t\t}\r\n\t\treturn targetElevation;\r\n\t}\r\n\r\n\tgetPlatform(x=this.char._realX,y=this.char._realY,opts={}){\r\n\t\treturn mv3d.getPlatformForCharacter(this,x,y,opts);\r\n\t}\r\n\r\n\tgetPlatformFloat(x=this.char._realX,y=this.char._realY,opts={}){\r\n\t\tif(!opts.platform){ opts.platform = this.getPlatform(x,y,opts); }\r\n\t\tconst platform = opts.platform;\r\n\t\tlet z = platform.z2;\r\n\t\tif(this.hasFloat&&!platform.char){\r\n\t\t\tconst cHeight = this.getCHeight();\r\n\t\t\tz += mv3d.getFloatHeight(Math.round(x),Math.round(y),this.z+Math.max(cHeight,mv3d.STAIR_THRESH),mv3d.STAIR_THRESH>=cHeight);\r\n\t\t}\r\n\t\treturn z;\r\n\t}\r\n\r\n\tupdateShadow(){\r\n\t\tlet shadowVisible = Boolean(this.getConfig('shadow', this.shape!=mv3d.enumShapes.FLAT ));\r\n\r\n\t\tif(shadowVisible&&(this.isPlayer||this.isFollower)){\r\n\t\t\tconst myIndex = mv3d.characters.indexOf(this);\r\n\t\t\tif(myIndex>=0)\r\n\t\t\tfor (let i=myIndex+1; i<mv3d.characters.length; ++i){\r\n\t\t\t\tconst other = mv3d.characters[i];\r\n\t\t\t\tif(!other.shadow||!other.visible){ continue; }\r\n\t\t\t\tif(other.char._realX===this.char._realX&&other.char._realY===this.char._realY){\r\n\t\t\t\t\tshadowVisible=false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!this.shadow._isEnabled){\r\n\t\t\tif(shadowVisible){ this.shadow.setEnabled(true); }\r\n\t\t}else{\r\n\t\t\tif(!shadowVisible){ this.shadow.setEnabled(false); }\r\n\t\t}\r\n\t\tif(!shadowVisible){ return; }\r\n\r\n\t\tconst shadowDist = Math.max(this.z - this.platformHeight, 0);\r\n\t\tconst shadowFadeDist = this.getConfig('shadowDist',4);\r\n\t\tconst shadowStrength = Math.max(0,1-Math.abs(shadowDist)/shadowFadeDist);\r\n\t\tthis.shadow.z = -shadowDist + mv3d.LAYER_DIST*3.5;\r\n\t\tthis.shadow.x=this.spriteOrigin.x;this.shadow.y=this.spriteOrigin.y;\r\n\t\tconst shadowScale = this.getConfig('shadow',1);\r\n\t\tthis.shadow.scaling.setAll(shadowScale*shadowStrength);\r\n\t\tif(!this.shadow.isAnInstance){\r\n\t\t\tthis.shadow.visibility=shadowStrength-0.5*this.bush;//visibility doesn't work with instancing\r\n\t\t}\r\n\t}\r\n\r\n\tupdateAnimations(){\r\n\t\tif(this.char.isBalloonPlaying()){\r\n\t\t\tif(!this._balloon){\r\n\t\t\t\tthis._balloon=mv3d.showBalloon(this);\r\n\t\t\t}\r\n\t\t\tthis._balloon.update();\r\n\t\t}else{\r\n\t\t\tthis.disposeBalloon();\r\n\t\t}\r\n\t\tfor(const animation of this.char.mv_sprite._animationSprites){\r\n\t\t\tif(animation.mv3d_animation){\r\n\t\t\t\tanimation.mv3d_animation.update();\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this.char.mv_sprite._animationSprites.length){\r\n\t\t\tthis.needsMaterialUpdate=true;\r\n\t\t}\r\n\t}\r\n\r\n\tdisposeBalloon(){\r\n\t\tif(this._balloon){\r\n\t\t\tthis._balloon.dispose();\r\n\t\t\tthis._balloon=null;\r\n\t\t}\r\n\t}\r\n\r\n\tdispose(...args){\r\n\t\tsuper.dispose(...args);\r\n\t\tdelete this.char.mv3d_sprite;\r\n\t\tconst index = mv3d.characters.indexOf(this);\r\n\t\tmv3d.characters.splice(index,1);\r\n\t\tthis.disposeBalloon();\r\n\t\tthis.removeFromCell();\r\n\t}\r\n\r\n\tremoveFromCell(){\r\n\t\tif(this.cell){\r\n\t\t\tconst index = this.cell.characters.indexOf(this);\r\n\t\t\tif(index>=0){ this.cell.characters.splice(index,1); }\r\n\t\t\tthis.cell=null;\r\n\t\t}\r\n\t}\r\n\r\n\tgetCHeight(){\r\n\t\tlet collide = this.getConfig('collide',this.shape===mv3d.enumShapes.FLAT||this.char._priorityType===0?0:this.spriteHeight);\r\n\t\treturn collide===true ? this.spriteHeight : Number(collide);\r\n\t}\r\n\r\n\tgetCollider(){\r\n\t\tif(this._collider){ return this._collider; }\r\n\t\tconst collider = {char:this};\r\n\t\tthis._collider=collider;\r\n\t\tObject.defineProperties(collider,{\r\n\t\t\tz1:{get:()=>this.z },\r\n\t\t\tz2:{get:()=>{\r\n\t\t\t\treturn Math.max(this.z,this.z+this.getCHeight());\r\n\t\t\t}}\r\n\t\t});\r\n\t\treturn collider;\r\n\t}\r\n\tgetTriggerCollider(){\r\n\t\tif(this._triggerCollider){ return this._triggerCollider; }\r\n\t\tconst collider = {};\r\n\t\tthis._triggerCollider=collider;\r\n\t\tObject.defineProperties(collider,{\r\n\t\t\tz1:{get:()=>{\r\n\t\t\t\tconst trigger = this.getConfig('trigger');\r\n\t\t\t\tif(trigger){\r\n\t\t\t\t\treturn this.z-trigger.down;\r\n\t\t\t\t}else if(mv3d.TRIGGER_INFINITE || this.isEmpty){\r\n\t\t\t\t\treturn -Infinity;\r\n\t\t\t\t}else{\r\n\t\t\t\t\treturn this.getCollider().z1;\r\n\t\t\t\t}\r\n\t\t\t}},\r\n\t\t\tz2:{get:()=>{\r\n\t\t\t\tconst trigger = this.getConfig('trigger');\r\n\t\t\t\tif(trigger){\r\n\t\t\t\t\treturn this.z-trigger.up;\r\n\t\t\t\t}else if(mv3d.TRIGGER_INFINITE || this.isEmpty){\r\n\t\t\t\t\treturn Infinity;\r\n\t\t\t\t}else{\r\n\t\t\t\t\treturn this.getCollider().z2;\r\n\t\t\t\t}\r\n\t\t\t}}\r\n\t\t});\r\n\t\treturn collider;\r\n\t}\r\n\r\n\tgetCollisionHeight(z=this.z){\r\n\t\tconst cHeight=this.getCHeight();\r\n\t\treturn {z1:z, z2:z+cHeight, char:this};\r\n\t}\r\n\r\n\tgetTriggerHeight(z=this.z){\r\n\t\tconst trigger = this.getConfig('trigger');\r\n\t\tif(trigger){\r\n\t\t\treturn {z1:z-trigger.down, z2:z+trigger.up};\r\n\t\t}else if(mv3d.TRIGGER_INFINITE || this.isEmpty){\r\n\t\t\treturn {z1:-Infinity, z2: Infinity};\r\n\t\t}else{\r\n\t\t\treturn this.getCollisionHeight();\r\n\t\t}\r\n\t}\r\n}\r\n\r\noverride(Sprite_Character.prototype,'characterPatternY',o=>function(){\r\n\tconst sprite = this._character.mv3d_sprite;\r\n\tif(!sprite){ return o.apply(this,arguments); }\r\n\tconst dirfix = sprite.getConfig('dirfix', sprite.isEvent && sprite.char.isObjectCharacter());\r\n\tconst ddir=this._character.mv3d_direction();\r\n\tconst useDiagonal = !this._isBigCharacter&&this._characterIndex<4&&this._characterName.includes(mv3d.DIAG_SYMBOL);\r\n\tlet dir;\r\n\tif(dirfix||mv3d.isDisabled()){\r\n\t\tif(useDiagonal){ dir=ddir; }\r\n\t\telse{ dir=this._character.direction(); }\r\n\t}else if(useDiagonal){\r\n\t\tdir = mv3d.transformFacing(ddir,mv3d.blendCameraYaw.currentValue(),true);\r\n\t}else{\r\n\t\tdir = mv3d.transformFacing(ddir,mv3d.blendCameraYaw.currentValue(),false);\r\n\t}\r\n\tif(dir%2){\r\n\t\treturn diagRow[dir];\r\n\t}else{\r\n\t\treturn dir/2-1;\r\n\t}\r\n},()=> !mv3d.isDisabled() || mv3d.DIR8MOVE&&mv3d.DIR8_2D);\r\nconst diagRow={\r\n\t3:4,\r\n\t1:5,\r\n\t9:6,\r\n\t7:7,\r\n};\r\n\r\noverride(Sprite_Character.prototype,'setFrame',o=>function(x, y, width, height){\r\n\to.apply(this,arguments);\r\n\tconst sprite = this._character.mv3d_sprite; if(!sprite){ return; }\r\n\tif(sprite.isImageChanged()){ return; }\r\n\tsprite.setFrame(x,y,this.patternWidth(),this.patternHeight());\r\n});\r\n\r\noverride(Sprite_Character.prototype,'setBlendColor',o=>function(){\r\n\to.apply(this,arguments);\r\n\tconst sprite = this._character.mv3d_sprite; if(!sprite){ return; }\r\n\tsprite.needsMaterialUpdate=true;\r\n});\r\n\r\nmv3d.Sprite = Sprite;\r\nmv3d.Character = Character;\r\n\r\n\r\nconst _isOnBush = Game_CharacterBase.prototype.isOnBush;\r\nGame_CharacterBase.prototype.isOnBush = function() {\r\n\tif(mv3d.isDisabled()||!this.mv3d_sprite){ return _isOnBush.apply(this,arguments); }\r\n\tconst rx=Math.round(this._realX), ry=Math.round(this._realY);\r\n\tconst tileData=mv3d.getTileData(rx,ry);\r\n\tconst layers = mv3d.getTileLayers(rx,ry,this.mv3d_sprite.z+this.mv3d_sprite.getCHeight(),false);\r\n\tconst flags = $gameMap.tilesetFlags();\r\n\tfor( const l of layers ){\r\n\t\tif( (flags[tileData[l]] & 0x40) !== 0 ){ return true; }\r\n\t}\r\n\treturn false;\r\n};","import mv3d from './mv3d.js';\r\nimport { Sprite, SpriteManager, TransformNode, Vector3, ORTHOGRAPHIC_CAMERA, StandardMaterial, Texture } from './mod_babylon.js';\r\nimport { radtodeg, override } from './util.js';\r\n\r\nObject.assign(mv3d,{\r\n\tshowBalloon(char){\r\n\t\tif(!char){ char=$gamePlayer.mv3d_sprite; }\r\n\t\treturn new Balloon(char);\r\n\t}\r\n});\r\n\r\nclass AnimSprite extends TransformNode{\r\n\tconstructor(src,w,h,smooth){\r\n\t\tsuper('animSprite',mv3d.scene);\r\n\t\tthis.cellWidth=w; this.cellHeight=h;\r\n\t\tthis.cellIndex=0;\r\n\t\tthis.isSmooth=smooth;\r\n\t\tthis.mesh = mv3d.Meshes.BASIC.clone();\r\n\t\tthis.mesh.isPickable=false;\r\n\t\tthis.mesh.parent=this;\r\n\t\tthis.mesh.setEnabled(false);\r\n\t\tthis.material = new StandardMaterial('anim material',mv3d.scene);\r\n\t\tthis.mesh.material=this.material;\r\n\t\tthis.material.useAlphaFromDiffuseTexture=true;\r\n\t\t//this.material.alphaCutOff = mv3d.ALPHA_CUTOFF;\r\n\t\tthis.material.alphaCutOff = 0;\r\n\t\tthis.material.disableLighting=true;\r\n\t\tthis.material.emissiveColor.set(1,1,1);\r\n\t\tthis.material.ambientColor.set(1,1,1);\r\n\t\tthis.material.specularColor.set(0,0,0);\r\n\t\tthis.loadTexture(src)\r\n\t}\r\n\tasync loadTexture(src){\r\n\t\tthis.texture = await mv3d.createTexture(src);\r\n\t\tthis.texture.hasAlpha=true;\r\n\t\tthis.material.diffuseTexture=this.texture;\r\n\t\tawait mv3d.waitTextureLoaded(this.texture);\r\n\t\tthis.texture.updateSamplingMode( this.isSmooth\r\n\t\t\t? Texture.BILINEAR_SAMPLINGMODE\r\n\t\t\t: Texture.NEAREST_SAMPLINGMODE\r\n\t\t);\r\n\t\tthis.textureLoaded=true;\r\n\t\tconst size = this.texture.getBaseSize();\r\n\t\tthis.cellCols = Math.floor(size.width/this.cellWidth);\r\n\t}\r\n\tupdate(){\r\n\t\tif(!this.textureLoaded){ return; }\r\n\t\tif(!this.mesh.isEnabled()){ this.mesh.setEnabled(true); }\r\n\t\tthis.pitch = mv3d.blendCameraPitch.currentValue()-90;\r\n\t\tthis.yaw = mv3d.blendCameraYaw.currentValue();\r\n\t\tthis.texture.crop(\r\n\t\t\tthis.cellIndex%this.cellCols*this.cellWidth,\r\n\t\t\tMath.floor(this.cellIndex/this.cellCols)*this.cellHeight,\r\n\t\t\tthis.cellWidth, this.cellHeight, true\r\n\t\t);\r\n\t}\r\n\tdispose(){\r\n\t\tsuper.dispose(false,true);\r\n\t}\r\n}\r\nmv3d.AnimSprite=AnimSprite;\r\n\r\n// Balloons\r\nclass Balloon extends AnimSprite{\r\n\tconstructor(char){\r\n\t\tsuper('img/system/Balloon.png',48,48,false);\r\n\t\tthis.char=char;\r\n\t}\r\n\tupdate(){\r\n\t\tif(!this.char){ return; }\r\n\t\tconst pos = transformVectorForCharacter(new Vector3(0,0.5+this.char.spriteHeight,0),this.char);\r\n\t\tthis.position.copyFrom(pos);\r\n\t\tconst bs = this.char.char.mv_sprite._balloonSprite;\r\n\t\tif(!bs){ return; }\r\n\t\tthis.cellIndex = (bs._balloonId-1)*8 + Math.max(0,bs.frameIndex());\r\n\t\tsuper.update();\r\n\t}\r\n}\r\nmv3d.Balloon=Balloon;\r\n\r\n// depth animations\r\n\r\nclass DepthAnimation{\r\n\tconstructor(animation){\r\n\t\tthis.animation=animation;\r\n\t\tthis.spriteList=[];\r\n\t\tthis.char = this.animation._target._character.mv3d_sprite;\r\n\t\tDepthAnimation.list.push(this);\r\n\t}\r\n\tresetSpriteList(){\r\n\t\tfor(const animationSprite of this.spriteList ){\r\n\t\t\tanimationSprite.unused=true;\r\n\t\t}\r\n\t}\r\n\tclearUnusedSprites(){\r\n\t\tfor(let i=this.spriteList.length-1;i>=0;--i){\r\n\t\t\tconst animationSprite = this.spriteList[i];\r\n\t\t\tif(animationSprite.unused){\r\n\t\t\t\tanimationSprite.setEnabled(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tupdate(){\r\n\t\tconst char = this.char;\r\n\t\tif(!char){ return; }\r\n\t\tconst cameraDirection = mv3d.camera.getDirection(mv3d.camera.getTarget());\r\n\t\tthis.resetSpriteList();\r\n\t\tconst frameData = this.animation._animation.frames[this.animation.currentFrameIndex()];\r\n\t\tif(frameData)\r\n\t\tfor(let i=0; i<Math.min(this.animation._cellSprites.length); ++i){\r\n\t\t\tconst cell = this.animation._cellSprites[i];\r\n\t\t\tif(!cell.visible || !cell.bitmap){ continue; }\r\n\t\t\tconst anim = this.getAnimationSprite(cell.bitmap._url);\r\n\t\t\tanim.material.alphaMode = mv3d.blendModes[cell.blendMode];\r\n\r\n\t\t\tanim.mesh.roll=radtodeg(cell.rotation);\r\n\t\t\tconst scale = this.animation._mv3d_animationSettings.scale||1;\r\n\t\t\tanim.mesh.scaling.x=4*cell.scale.x*scale;\r\n\t\t\tanim.mesh.scaling.y=4*cell.scale.y*scale;\r\n\t\t\tanim.material.alpha=cell.opacity/255;\r\n\r\n\t\t\tconst offsetVector = new Vector3(\r\n\t\t\t\tcell.position.x/48*scale,\r\n\t\t\t\tgetAnimationOffset(this.animation)-cell.position.y/48*scale,\r\n\t\t\t\t0);\r\n\t\t\tconst animationOrigin = transformVectorForCharacter(offsetVector,char);\r\n\t\t\tanim.position.copyFrom(animationOrigin);\r\n\t\t\tconst scale2=Math.pow(scale,2);\r\n\t\t\tanim.mesh.position.set(\r\n\t\t\t\t-cameraDirection.x*0.1*(i+1)*scale2,\r\n\t\t\t\t-cameraDirection.y*0.1*(i+1)*scale2,\r\n\t\t\t\t-cameraDirection.z*0.1*(i+1)*scale2\r\n\t\t\t);\r\n\r\n\t\t\tconst pattern = frameData[i][0];\r\n\t\t\tanim.cellIndex=pattern;\r\n\t\t\tanim.update();\r\n\t\t\t//console.log(anim.isVisible);\r\n\t\t}\r\n\t\t//console.log(this.spriteList.length);\r\n\t\tthis.clearUnusedSprites();\r\n\t}\r\n\tgetAnimationSprite(url){\r\n\t\tlet sprite;\r\n\t\tfor(const animationSprite of this.spriteList ){\r\n\t\t\tif(animationSprite._mv3d_sprite_url===url\r\n\t\t\t&&animationSprite.unused){\r\n\t\t\t\t//console.log(\"Found reusable sprite!\", animationSprite);\r\n\t\t\t\tanimationSprite.unused=false;\r\n\t\t\t\tanimationSprite.setEnabled(true);\r\n\t\t\t\tsprite=animationSprite;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!sprite){\r\n\t\t\tsprite = new AnimSprite(url,192,192,true);\r\n\t\t\tthis.spriteList.push(sprite);\r\n\t\t\tsprite._mv3d_sprite_url=url;\r\n\t\t\t//sprite.parent=this.char.spriteOrigin;\r\n\t\t\tconst settings = this.animation._mv3d_animationSettings\r\n\t\t\tif(settings.depth==false&&settings.depth!=null){\r\n\t\t\t\tsprite.mesh.renderingGroupId=mv3d.enumRenderGroups.FRONT;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn sprite;\r\n\t}\r\n\tremove(){\r\n\t\tfor(const animationSprite of this.spriteList ){\r\n\t\t\tanimationSprite.dispose();\r\n\t\t}\r\n\t\tthis.spriteList.length=0;\r\n\t\tconst index = DepthAnimation.list.indexOf(this);\r\n\t\tif(index>=0){\r\n\t\t\tDepthAnimation.list.splice(index,1);\r\n\t\t}\r\n\t}\r\n}\r\nDepthAnimation.list = [];\r\nmv3d.Animation=DepthAnimation;\r\n\r\nfunction transformVectorForCharacter(vector,char){\r\n\tif(!char.isEmpty&&char.shape===mv3d.enumShapes.SPRITE){\r\n\t\treturn Vector3.TransformCoordinates(vector,mv3d.getUnscaledMatrix(char.mesh));\r\n\t}else{\r\n\t\treturn Vector3.TransformCoordinates(vector,mv3d.getTranslationMatrix(char.mesh));\r\n\t}\r\n}\r\n\r\n\r\n// mod animations\r\n\r\nconst _start_animation = Sprite_Character.prototype.startAnimation;\r\nSprite_Character.prototype.startAnimation = function(){\r\n\t_start_animation.apply(this,arguments);\r\n\tif(mv3d.mapDisabled||!(SceneManager._scene instanceof Scene_Map)){ return; }\r\n\tconst animationSprite = this._animationSprites[this._animationSprites.length-1];\r\n\tanimationSprite._mv3d_animationSettings=this._character._mv3d_animationSettings;\r\n\tdelete this._character._mv3d_animationSettings;\r\n\tif(animationSprite._mv3d_animationSettings){\r\n\t\tanimationSprite.mv3d_animation=new DepthAnimation(animationSprite);\r\n\t\tmv3d.pixiContainer.addChild(animationSprite._screenFlashSprite);\r\n\t\treturn;\r\n\t}\r\n\tmv3d.pixiContainer.addChild(animationSprite);\r\n};\r\n\r\nconst _animation_remove = Sprite_Animation.prototype.remove;\r\nSprite_Animation.prototype.remove=function(){\r\n\tif(!mv3d.mapDisabled && this.mv3d_animation){\r\n\t\tif(this._screenFlashSprite){\r\n\t\t\tthis.addChild(this._screenFlashSprite);\r\n\t\t}\r\n\t\tthis.mv3d_animation.remove();\r\n\t}\r\n\t_animation_remove.apply(this,arguments);\r\n};\r\n\r\nconst _map_terminate = Scene_Map.prototype.terminate;\r\nScene_Map.prototype.terminate=function(){\r\n\t_map_terminate.apply(this,arguments);\r\n\tfor(let i=DepthAnimation.list.length-1;i>=0;--i){\r\n\t\tDepthAnimation.list[i].remove();\r\n\t}\r\n};\r\n\r\n\r\nconst _animation_updateScreenFlash=Sprite_Animation.prototype.updateScreenFlash;\r\nSprite_Animation.prototype.updateScreenFlash = function() {\r\n\t_animation_updateScreenFlash.apply(this,arguments);\r\n\tif(!mv3d.mapDisabled&&(SceneManager._scene instanceof Scene_Map)){\r\n\t\tthis._screenFlashSprite.x = 0;\r\n\t\tthis._screenFlashSprite.y = 0;\r\n\t}\r\n};\r\n\r\nfunction getAnimationOffset(animation){\r\n\tconst p = animation._animation.position;\r\n\tconst offset = p===3?0:1-p/2;\r\n\tconst char = animation._target._character;\r\n\tif(!char.mv3d_sprite){ return offset; }\r\n\treturn offset * char.mv3d_sprite.spriteHeight;\r\n}\r\n\r\nconst _update_animation_sprites = Sprite_Character.prototype.updateAnimationSprites;\r\nSprite_Character.prototype.updateAnimationSprites = function() {\r\n\t_update_animation_sprites.apply(this,arguments);\r\n\tif(mv3d.mapDisabled||!this._animationSprites.length||!(SceneManager._scene instanceof Scene_Map)){ return; }\r\n\tif(!this._character.mv3d_sprite){ return; }\r\n\tfor (const animationSprite of this._animationSprites){\r\n\t\tif(animationSprite.mv3d_animation){ continue; }\r\n\t\tif(animationSprite._animation.position===3){\r\n\t\t\tanimationSprite.update();\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tconst offsetVector = new Vector3(0, getAnimationOffset(animationSprite), 0);\r\n\t\tconst animationOrigin = transformVectorForCharacter(offsetVector,this._character.mv3d_sprite);\r\n\t\tconst pos = mv3d.getScreenPosition(animationOrigin);\r\n\t\tconst dist = Vector3.Distance(\r\n\t\t\tBABYLON.Vector3.TransformCoordinates(mv3d.camera.position,mv3d.getTranslationMatrix(mv3d.camera)),\r\n\t\t\tanimationOrigin);\r\n\t\tconst scale = mv3d.camera.mode===ORTHOGRAPHIC_CAMERA ? mv3d.getScaleForDist() : mv3d.getScaleForDist(dist);\r\n\r\n\t\tanimationSprite.behindCamera = pos.behindCamera;\r\n\t\tanimationSprite.update();\r\n\t\tanimationSprite.x=pos.x;\r\n\t\tanimationSprite.y=pos.y;\r\n\t\tanimationSprite.scale.set(scale,scale);\r\n\t}\r\n};\r\n\r\nconst _update_cell = Sprite_Animation.prototype.updateCellSprite;\r\nSprite_Animation.prototype.updateCellSprite = function(sprite,cell) {\r\n\t_update_cell.apply(this,arguments);\r\n\tif(this.behindCamera){ sprite.visible=false; }\r\n};","import mv3d from './mv3d.js';\r\nimport { override } from './util.js';\r\n\r\noverride(Game_Map.prototype,'setupParallax',o=>function(){\r\n\to.apply(this,arguments);\r\n\tthis.mv3d_parallaxX=0;\r\n\tthis.mv3d_parallaxY=0;\r\n},true);\r\n\r\noverride(Game_Map.prototype,'changeParallax',o=>function(name, loopX, loopY, sx, sy){\r\n\tif (this._parallaxLoopX && !loopX || this._parallaxSx && !sx) {\r\n\t\tthis.mv3d_parallaxX=0;\r\n\t}\r\n\tif (this._parallaxLoopY && !loopY || this._parallaxSy && !sy) {\r\n\t\tthis.mv3d_parallaxY=0;\r\n\t}\r\n\to.apply(this,arguments);\r\n});\r\n\r\noverride(Game_Map.prototype,'updateParallax',o=>function(){\r\n\tif (this._parallaxLoopX) {\r\n\t\tthis.mv3d_parallaxX += this._parallaxSx / 8;\r\n\t}\r\n\tif (this._parallaxLoopY) {\r\n\t\tthis.mv3d_parallaxY += this._parallaxSy / 8;\r\n\t}\r\n});\r\n\r\noverride(Game_Map.prototype,'parallaxOx',o=>function(){\r\n\tlet ox = this.mv3d_parallaxX;\r\n\tif(this._parallaxLoopX){\r\n\t\treturn ox - mv3d.blendCameraYaw.currentValue()*816/90;\r\n\t}\r\n\treturn ox;\r\n});\r\n\r\noverride(Game_Map.prototype,'parallaxOy',o=>function(){\r\n\tlet oy = this.mv3d_parallaxY;\r\n\tif(this._parallaxLoopY){\r\n\t\treturn oy - mv3d.blendCameraPitch.currentValue()*816/90;\r\n\t}\r\n\treturn 0;\r\n});\r\n\r\n/*\r\n['setDisplayPos','scrollUp','scrollDown','scrollLeft','scrollRight'].forEach(method=>{\r\n\tconst _oldMethod=Game_Map.prototype[method];\r\n\tGame_Map.prototype[method]=function(){\r\n\t\tif (mv3d.isDisabled()){ _oldMethod.apply(this,arguments); }\r\n\t}\r\n});\r\nconst _updateScroll = Game_Map.prototype.updateScroll;\r\nGame_Map.prototype.updateScroll = function() {\r\n\tif (mv3d.mapDisabled){ return _updateScroll.apply(this,arguments); }\r\n\tthis._displayX = -mv3d.blendCameraYaw.currentValue()*816/3600;\r\n\tthis._displayY = -mv3d.blendCameraPitch.currentValue()*816/3600;\r\n};\r\n*/\r\n\r\nGame_CharacterBase.prototype.mv3d_inRenderDist=function(){\r\n\tconst loopPos = mv3d.loopCoords(this.x,this.y);\r\n\treturn Math.abs(loopPos.x - mv3d.cameraStick.x)<=mv3d.renderDist\r\n\t&& Math.abs(loopPos.y - mv3d.cameraStick.y)<=mv3d.renderDist;\r\n};\r\n\r\noverride(Game_CharacterBase.prototype,'isNearTheScreen',o=>function(){\r\n\tif(!mv3d.EVENTS_UPDATE_NEAR){ return o.apply(this,arguments); }\r\n\treturn this.mv3d_inRenderDist() || o.apply(this,arguments);\r\n});\r\n\r\n\r\noverride(Game_Screen.prototype,'shake',o=>function(){\r\n\treturn 0;\r\n},()=> !mv3d.isDisabled() && SceneManager._scene instanceof Scene_Map );\r\n\r\noverride(Game_CharacterBase.prototype,'screenX',o=>function screenX(){\r\n\tconst sprite = this.mv3d_sprite;\r\n\tif(!sprite){ return o.apply(this,arguments); }\r\n\tif(SceneManager.isNextScene(Scene_Battle) && this===$gamePlayer){\r\n\t\treturn Graphics.width/2;\r\n\t}\r\n\treturn mv3d.getScreenPosition(sprite).x;\r\n});\r\n\r\noverride(Game_CharacterBase.prototype,'screenY',o=>function screenY(){\r\n\tconst sprite = this.mv3d_sprite;\r\n\tif(!sprite){ return o.apply(this,arguments); }\r\n\tif(SceneManager.isNextScene(Scene_Battle) && this===$gamePlayer){\r\n\t\treturn Graphics.height/2;\r\n\t}\r\n\treturn mv3d.getScreenPosition(sprite).y;\r\n});","import mv3d from './mv3d.js';\r\n\r\nconst isPlaytest = Utils.isOptionValid('test');\r\n\r\nconst saveFile=async(fileName,fileData)=>{\r\n\tconst fs=require('fs');\r\n\tconst path=require('path');\r\n\tconst filePath = path.resolve(global.__dirname,fileName);\r\n\tawait ensureDirectory(path.dirname(filePath));\r\n\tawait new Promise((resolve,reject)=>{\r\n\t\tfs.writeFile(filePath,fileData,err=>{\r\n\t\t\tif(err){ reject(err); return; }\r\n\t\t\tresolve();\r\n\t\t});\r\n\t});\r\n}\r\n\r\nconst ensureDirectory=(dirName)=>new Promise((resolve,reject)=>{\r\n\tconst fs=require('fs');\r\n\tconst path=require('path');\r\n\tfs.mkdir(path.resolve(global.__dirname,dirName),{recursive:true},err=>{\r\n\t\tif(err&&err.code!=='EEXIST'){ reject(err); return; }\r\n\t\tresolve();\r\n\t});\r\n});\r\n\r\nconst _loadDataFile = DataManager.loadDataFile;\r\nDataManager.loadDataFile = function(name, src) {\r\n\tif(src.startsWith('Test_mv3d_')){\r\n\t\tsrc=src.replace('Test_mv3d_','mv3d_')\r\n\t}\r\n\t_loadDataFile.call(this,name,src);\r\n};\r\n\r\nclass DataProxy{\r\n\tconstructor(varName,fileName,defaultData={}){\r\n\t\tthis.varName=varName;\r\n\t\tthis.fileName=fileName;\r\n\t\tif(isPlaytest){\r\n\t\t\tconst fs = require('fs');\r\n\t\t\tconst path = require('path');\r\n\t\t\tconst filePath = path.resolve(nw.__dirname,'data',fileName);\r\n\t\t\tif(!fs.existsSync(filePath)) {\r\n\t\t\t\tfs.writeFileSync(filePath,JSON.stringify(typeof defaultData==='function'?defaultData():defaultData));\r\n\t\t\t}\r\n\t\t}\r\n\t\tDataManager._databaseFiles.push({name:varName,src:fileName});\r\n\r\n\t\tthis._dirty=false;\r\n\t\tthis._data_handler={\r\n\t\t\tget:(target,key)=>{\r\n\t\t\t\tif(target[key]&&typeof target[key]==='object'){\r\n\t\t\t\t\treturn new Proxy(target[key],data_handler);\r\n\t\t\t\t}else{\r\n\t\t\t\t\treturn target[key];\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tset:(target,key,value)=>{\r\n\t\t\t\tthis._dirty=true;\r\n\t\t\t\ttarget[key]=value;\r\n\t\t\t},\r\n\t\t\tdeleteProperty:(target,key)=>{\r\n\t\t\t\tthis._dirty=true;\r\n\t\t\t\tdelete target[key];\r\n\t\t\t},\r\n\t\t}\r\n\t\tthis.writing=false;\r\n\t\tDataProxy.list.push(this);\r\n\t}\r\n\tsetup(){\r\n\t\tthis._data=window[this.varName];\r\n\t\tif(isPlaytest){\r\n\t\t\twindow[this.varName]=new Proxy(this._data,this._data_handler);\r\n\t\t}\r\n\t}\r\n\tasync update(){\r\n\t\tif(!isPlaytest){ return; }\r\n\t\tif(this._dirty&&!this.writing){\r\n\t\t\tthis.writing=true;\r\n\t\t\tthis._dirty=false;\r\n\t\t\tawait saveFile(`data/${this.fileName}`,JSON.stringify(this._data));\r\n\t\t\tthis.writing=false;\r\n\t\t}\r\n\t}\r\n}\r\nDataProxy.list=[];\r\nmv3d.DataProxy=DataProxy;\r\n\r\nconst _onBoot = Scene_Boot.prototype.start;\r\nScene_Boot.prototype.start=function(){\r\n\t_onBoot.apply(this,arguments);\r\n\tmv3d.setupData();\r\n}\r\n\r\nObject.assign(mv3d,{\r\n\tsetupData(){\r\n\t\tfor (const dataProxy of DataProxy.list){\r\n\t\t\tdataProxy.setup();\r\n\t\t}\r\n\t},\r\n\tupdateData(){\r\n\t\tfor (const dataProxy of DataProxy.list){\r\n\t\t\tdataProxy.update();\r\n\t\t}\r\n\t}\r\n});\r\n\r\nnew DataProxy('mv3d_data','mv3d_data.json',()=>({\r\n\tid:crypto.getRandomValues(new Uint32Array(1))[0],\r\n}));","import './mv3d.js';\r\nimport './mod_babylon.js';\r\nimport './mod_mv.js';\r\nimport './parameters.js';\r\nimport './blenders.js';\r\nimport './blendModes.js';\r\nimport './input.js';\r\nimport './input_directions.js';\r\nimport './configuration.js';\r\nimport './plugin_commands.js';\r\nimport './tileData.js'\r\nimport './loadMap.js';\r\nimport './assets.js';\r\nimport './characters.js';\r\nimport './animations.js';\r\nimport './parallax.js';\r\nimport './data.js';\r\nimport './features.js';\r\nimport './plugin_support/plugin_support.js';\r\n\r\n//features\r\n//import './feature-dynamicShadows.js';"],"sourceRoot":""}